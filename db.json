{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/kaze/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/kaze/source/img/touxiang.jpg","path":"img/touxiang.jpg","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","path":"js/lib/busuanzi.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lozad.min.js","path":"js/lib/lozad.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/md5.min.js","path":"js/lib/md5.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.css","path":"js/lib/lightbox/baguetteBox.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.js","path":"js/lib/lightbox/baguetteBox.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","path":"js/lib/prism/prism-coy.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","path":"js/lib/prism/prism-dark.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","path":"js/lib/prism/prism-funky.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","path":"js/lib/prism/prism-line-numbers.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","path":"js/lib/prism/prism-okaidia.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","path":"js/lib/prism/prism-solarizedlight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","path":"js/lib/prism/prism-tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","path":"js/lib/prism/prism-twilight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","path":"js/lib/prism/prism.min.css","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"9603dddf9db5cd017d7f797b2d6613a5db0a0cf4","modified":1616338784000},{"_id":"source/_posts/JAVAString类常用方法.md","hash":"2c11e4c7c98a87b4b879f5e55a1ca2cd9b9d1a96","modified":1568768040000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置.md","hash":"b106634f94af2139252e05a02041f0d838056a74","modified":1588579750000},{"_id":"source/_posts/JAVA基础知识.md","hash":"46c5bf26c67e4559a9d120dd96f70d2d609e101d","modified":1588579786000},{"_id":"source/_posts/LeetCode 课程表 II.md","hash":"e9580dc3c05032e27207b1fb5207630296c20a71","modified":1588579876000},{"_id":"source/_posts/LeetCode-字符串转换整数-atoi.md","hash":"a94f2e4430f7c3b18d3869f0c373a8f800ee881a","modified":1588657604000},{"_id":"source/_posts/N皇后.md","hash":"6ce10f762740aea2f1ca8303bf8dd0195d4d23cf","modified":1648296316000},{"_id":"source/_posts/hexo操作.md","hash":"5ded07b4e6616a3f777166deb14d183a5c6f5f74","modified":1607652410000},{"_id":"source/_posts/my-first-blog.md","hash":"06e5e1c45d5a2ce1b310e50ed5b4189041e9e354","modified":1565064578000},{"_id":"source/_posts/c-java-python大数加法.md","hash":"8d648c8664ae9a49343b57ca113b7af8907df2b7","modified":1588579762000},{"_id":"source/_posts/Z字形变换.md","hash":"a420b97c9c5de36d991ff6c77b1e30659d2eb62f","modified":1646922526000},{"_id":"source/_posts/hello-world.md","hash":"380ba9fc8ebf285f8e9aef870cf01a21bea298b1","modified":1564212180000},{"_id":"source/_posts/m叉树的双亲孩子节点之间的关系.md","hash":"82e2e718697b3579b4af2f71dbc0c8c3c8b4d259","modified":1632837752000},{"_id":"source/_posts/一元二次多项式的相加.md","hash":"940bf34f626fb72927b57ba68803870f3a85b4c0","modified":1588579938000},{"_id":"source/_posts/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构.md","hash":"b5b12eb50963b3980d6f0c1638da5cba0e6505a5","modified":1588579906000},{"_id":"source/_posts/串的模式匹配算法.md","hash":"1227d8f833d2f47dec88c53d2ed14789169b9571","modified":1588579888000},{"_id":"source/_posts/人的三个20岁.md","hash":"788de71ccccbe4b810a5ef01af5558db7f6954c9","modified":1619350648000},{"_id":"source/_posts/关于自己考研以来的一些思考.md","hash":"9ccf420f7e245aaafe46b83e3040e4a8f01da2fa","modified":1631887438000},{"_id":"source/_posts/差分隐私之组合定理.md","hash":"f9ecfd8af688419806d8bad49a5f97dd929d18b0","modified":1679906258847},{"_id":"source/_posts/平衡二叉树节点的删除.md","hash":"7bf36c31040714e23cbf096d891f9ebd0f8df689","modified":1633877826000},{"_id":"source/_posts/填写运算符问题.md","hash":"c6aa4455c23a4db42f2e5437d305cc883f6dda7d","modified":1588579930000},{"_id":"source/_posts/基本JAVA-WEB项目.md","hash":"3aee839dd0e6508f446f41cc8af094dcc3b572fb","modified":1596009044000},{"_id":"source/_posts/动态查找（查找，插入及删除）.md","hash":"d332e59760cdfbb8a1245d12d4ac1f99a926474e","modified":1588579896000},{"_id":"source/_posts/树莓派小车基本功能的实现.md","hash":"0a7c36ca014385b7f758e3fd5af2cf6586e7f039","modified":1588579922000},{"_id":"source/_posts/格雷编码.md","hash":"7a10384067b6cebb5096b9c7c76117200090acf6","modified":1648296384000},{"_id":"source/_posts/考研5.md","hash":"d92850933782a8bd2c0178b43cba8ba002162f7d","modified":1621864454000},{"_id":"source/_posts/考研10.md","hash":"1256bfefc333012c0c66c2646cf7598eb2e9b48c","modified":1633271208000},{"_id":"source/_posts/考研6.md","hash":"1a89b66c1e928a09e776acf3db4942b58de53e07","modified":1622554934000},{"_id":"source/_posts/考研7.md","hash":"8f87f302794326df34ccd4f31236abe23e93c942","modified":1627564478000},{"_id":"source/_posts/考研之旅001.md","hash":"bd527094fdb9bc3d3d24d8d945b27df742d5326c","modified":1620528288000},{"_id":"source/_posts/考研之旅002.md","hash":"2c91fc56cfa559fe08eb4a1f6c17e3e1f8974473","modified":1620528302000},{"_id":"source/_posts/考研8.md","hash":"8e9380ecf3b1845377909d8b3ad8a51c67c9836d","modified":1627564308000},{"_id":"source/_posts/考研9.md","hash":"7ad36c8127fd183bbb776a1f656b10485de9e14b","modified":1631886916000},{"_id":"source/_posts/考研之旅003.md","hash":"6cc7ac78e6f608f7b42b9887fef6cee1e2cb89db","modified":1620528296000},{"_id":"source/_posts/考研初始结束.md","hash":"02ae3cfe47b6e1e4245da8ec3c85ea1fc7c29c9e","modified":1641267618000},{"_id":"source/_posts/考研之旅004.md","hash":"498b52722513320f9d82e209e4aab38ed622da85","modified":1620528122000},{"_id":"source/_posts/计算三重积分的四种方法.md","hash":"cb09b7f11cd5213a478d23d3faca7604a48b75d3","modified":1568193150000},{"_id":"source/_posts/颜色分类.md","hash":"d48f7a567042dd06c41dda1d1b4452578f552668","modified":1648296286000},{"_id":"source/_posts/串的模式匹配算法/2.png","hash":"96efcb9fd5c0edde153a2cc496f10c8278e21512","modified":1572154032000},{"_id":"source/_posts/串的模式匹配算法/1.png","hash":"53f4857eea666ca2657341d70432740964452f51","modified":1572154032000},{"_id":"source/_posts/串的模式匹配算法/4.png","hash":"e7833f090efcb10583c0db4466f63ad39c78bad9","modified":1572154032000},{"_id":"source/_posts/串的模式匹配算法/5.png","hash":"b2844a9daf5746d3f5e5d2f882b527b8ec4b7dc6","modified":1572154032000},{"_id":"source/_posts/串的模式匹配算法/3.png","hash":"3434c36ad0724d1cf91d24bd0ff7176c0b1c6438","modified":1572154032000},{"_id":"source/_posts/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/2.png","hash":"27cd2b9471ec353503910b5b97eb76d767157ff6","modified":1575358416000},{"_id":"source/_posts/公交路图的初始化以及找到两站点间换乘不超过一次的路径/2.PNG","hash":"370186d14bdc10f4a168a42a077783a519fdc861","modified":1575803352000},{"_id":"source/_posts/动态查找（查找，插入及删除）/1.PNG","hash":"68e0d66f4256e2e8fec239fd192cfd5fda9cbca2","modified":1576148706000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/4.png","hash":"05fcc3ade7182594786e18d5f65e02fb9b956800","modified":1567683374000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/7.png","hash":"8a5e24c2efcfed4021e72ed78ab348658971f041","modified":1567690838000},{"_id":"source/_posts/一元二次多项式的相加/1.PNG","hash":"88ebffe915971ad2a5868a43fb2bd5998fd976aa","modified":1574040742000},{"_id":"source/_posts/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/1.PNG","hash":"034dba5c1a191eb17322f88ed81db12841252e15","modified":1575207114000},{"_id":"source/_posts/公交路图的初始化以及找到两站点间换乘不超过一次的路径/1.PNG","hash":"461bd406a415a9545189a0660f349d5ea9fe41a9","modified":1575802060000},{"_id":"source/_posts/基本JAVA-WEB项目/1.PNG","hash":"35cbb3c65c501a2f964667017d030c6a138701ae","modified":1595919390000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/5.png","hash":"abb32d6830abf7bf6d220bbb259858bb3227f614","modified":1567688470000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/8.png","hash":"9cb60644e96b298a0c0038b03544355aae9ff15d","modified":1567691034000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/9.png","hash":"7752670bf8eb16fd4e4f92b49edc1903fc7f6f0e","modified":1567691134000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/1.png","hash":"fc7107c9ae83574da32a169094e72edd530c062b","modified":1567687230000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/6.png","hash":"83045286e641d55544f4822f11ef77d049eb58c6","modified":1567689192000},{"_id":"source/_posts/树莓派小车基本功能的实现/3426615-a8a227ec96464665.jpg","hash":"e492a625db45f9ab03a52239ccd844e7c48d1f45","modified":1564660024000},{"_id":"source/_posts/树莓派小车基本功能的实现/alipay.jpeg","hash":"8367b86195fb0132f88500bf334e1034f13ec8da","modified":1566452996000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/3.png","hash":"7cc9ba0fa860689e212458cff3ef2249788fc164","modified":1567687434000},{"_id":"source/_posts/树莓派小车基本功能的实现/111.jpg","hash":"2905be12b65b1179d96a7cb043a3baf0a9646309","modified":1565076178000},{"_id":"themes/kaze/.eslintrc.json","hash":"768b89d617645d3cd440fe0976994be2c78d4d31","modified":1614087066000},{"_id":"themes/kaze/.gitignore","hash":"692d3f45e2d9ac3ddbfe92967100883cf11f03de","modified":1614087066000},{"_id":"themes/kaze/_config.yml","hash":"9d196c85b26fbbffa8d84cd544886cdad2853469","modified":1679906239853},{"_id":"themes/kaze/gulpfile.js","hash":"625872400c48d03fc0615c34f69747f8aacc61b2","modified":1614087066000},{"_id":"themes/kaze/index.js","hash":"37e564126e64000f0ed7b5af7f78b5992326667a","modified":1614087066000},{"_id":"themes/kaze/README.md","hash":"8e910879f3216ff2a78e423ca2e3f9519bdd1c91","modified":1614087066000},{"_id":"themes/kaze/LICENSE","hash":"f02809429223af6943d9ce48bcf9573c8bcd8d74","modified":1614087066000},{"_id":"themes/kaze/languages/en.yml","hash":"2a4fb3e7dfe50778cdc13511b1ba2d9b4539941a","modified":1614087066000},{"_id":"themes/kaze/languages/zh-CN.yml","hash":"eb64cb0e66dedca08ac6554e5e7c56555f677e9b","modified":1614087066000},{"_id":"themes/kaze/README_zh.md","hash":"af0b98a3a8245b487df98d808c9b616f88d4776f","modified":1614087066000},{"_id":"themes/kaze/scripts/index.js","hash":"38f5bceb479238c1b23da77e3d612cf8d3af0987","modified":1614087066000},{"_id":"themes/kaze/package.json","hash":"bf9efcdbcbdc0f3a614f4b91086d31bb36a0aedf","modified":1614087066000},{"_id":"themes/kaze/layout/artitalk.ejs","hash":"e7bc5b532d29588389fd01c6415ee7393d14bf8f","modified":1614087066000},{"_id":"themes/kaze/lib/lazyload.js","hash":"4d261bc1285fde791d77f3ed1b4369a0cd27c9a5","modified":1614087066000},{"_id":"themes/kaze/lib/mergeConfig.js","hash":"a14df30e68accd8c074bf8e2e1d35b610152cc55","modified":1614087066000},{"_id":"themes/kaze/layout/about.ejs","hash":"14fbe8f5ecfdb8b5332ec2290f8ee4de9d49853d","modified":1614087066000},{"_id":"themes/kaze/layout/archive.ejs","hash":"10b00f41dfd82f8f1fc376cc25170ede95fcfddf","modified":1614087066000},{"_id":"themes/kaze/layout/categories.ejs","hash":"0c2a1610b71d01c09ca23544e206ccf9c532af34","modified":1614087066000},{"_id":"themes/kaze/layout/category.ejs","hash":"a4cd08fcf018a4f573d673d543e9dd8687b9d66e","modified":1614087066000},{"_id":"themes/kaze/layout/index.ejs","hash":"7caad6736d8b761ec255528ae3afd172712b50c9","modified":1614087066000},{"_id":"themes/kaze/layout/layout.ejs","hash":"5583a9bcdf83e5a179cffd021862a6911177c489","modified":1614087066000},{"_id":"themes/kaze/layout/post.ejs","hash":"22acb2073b06b7bb4af5da5503b208628d6a2e1b","modified":1614087066000},{"_id":"themes/kaze/layout/links.ejs","hash":"0b17f79b812cbeeee2ed62b5e142477a37487779","modified":1614087066000},{"_id":"themes/kaze/layout/tags.ejs","hash":"a6b999180af449bfc6fe9f358a41326de611bbce","modified":1614087066000},{"_id":"themes/kaze/.github/workflows/release.yml","hash":"ac436597c6831e9d346aeb9e5cf54b7ec6476aba","modified":1614087066000},{"_id":"themes/kaze/.github/workflows/beta.yml","hash":"e02e7f4995bd1778ebe0dd92e0cf8a03173a8651","modified":1614087066000},{"_id":"themes/kaze/lib/minify/minifyJS.js","hash":"77b9317ddd5a127a3c39e0fa03934056ac296be9","modified":1614087066000},{"_id":"themes/kaze/lib/minify/minifyCSS.js","hash":"a05c5435db2d7a8dc2750e6b684457a867451aa6","modified":1614087066000},{"_id":"themes/kaze/layout/tag.ejs","hash":"b0fbadda1257e40924fa88542ba3aa10ebb63fac","modified":1614087066000},{"_id":"themes/kaze/scripts/generators/pagerouter.js","hash":"ff9ad130a6b55b73d66d13233d2acb078a416bb8","modified":1614087066000},{"_id":"themes/kaze/scripts/generators/search.js","hash":"980884b7fcbee21b1162893ca5a083ed798628d9","modified":1614087066000},{"_id":"themes/kaze/scripts/helpers/load.js","hash":"71efbb02d50b323f642a1594b326d78e117ad899","modified":1614087066000},{"_id":"themes/kaze/scripts/highlight/replace.js","hash":"38879d7e4bafd016a0a3cd86df65233eb2d0f92e","modified":1614087066000},{"_id":"themes/kaze/scripts/helpers/count.js","hash":"a2ecc582e9f4489726bb9668b51b682f8129e30e","modified":1614087066000},{"_id":"themes/kaze/scripts/tag/note.js","hash":"a04695ac1c623544a554b083b2bb112caaeb571f","modified":1614087066000},{"_id":"themes/kaze/lib/minify/minifyHTML.js","hash":"9fea2e1cf2b3b0a66091ae2d7c029b8b64659329","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/categories.ejs","hash":"19ada8700ab5c7fc1e0e7e5908eff8c316d28591","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/author.ejs","hash":"f199de30fa5333bfb16aa9a635a6179446512b76","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/archives.ejs","hash":"4822c0ca716866292339e093b6dbcc266b48a8eb","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/footer.ejs","hash":"524c9ff81b4604831a86d086073f0053f5c2403b","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/head.ejs","hash":"1e1f8400947116dfd866577274795851da99c81f","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/left-aside.ejs","hash":"c85094ac6e570c3b06be8cc43cb7458b9a21f415","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/pagination.ejs","hash":"7fb58bb1acad33a94359503ffcf63cd2e11e014b","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/recent-post.ejs","hash":"f55b4a2ab7c85ec8e8883b9f462828fd4f9b6088","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/right-aside.ejs","hash":"274699037cc6a5891fc7c848d24396158d553dda","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/nav.ejs","hash":"eceebb469703a72b38515c95dc4a7609c22f6641","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/toc-card.ejs","hash":"b4fe4cbd158773da4d56092487794ef151271e47","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/tags.ejs","hash":"1cbb1371e9f22e79b28641b128bf8a41f60da46e","modified":1614087066000},{"_id":"themes/kaze/source/css/main.styl","hash":"8b602110e32636076754d9e26555f4c924dfa8bb","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/scrollbutton.ejs","hash":"bdcf3efe16a77055e5c8ab00211d931a70b18e2b","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/plugins/latex.ejs","hash":"ced3205d1d6b9ddf0af3828257372b9329b9ebad","modified":1614087066000},{"_id":"themes/kaze/source/img/touxiang.jpg","hash":"129afb7eb2b1808a4770aa945c7c584b9293d502","modified":1565080846000},{"_id":"themes/kaze/source/css/_base/color.styl","hash":"79422f2777a4b945bd526214e013b1d4d094b92e","modified":1614087066000},{"_id":"themes/kaze/source/js/main.js","hash":"ec44b7367280c12ebed4425eed652c754fa1b74f","modified":1614087066000},{"_id":"themes/kaze/source/css/_base/index.styl","hash":"c5eb9ee07af5825d919504fd55acaf7c74f92edc","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/plugins/lightbox.ejs","hash":"e58bdb1241195fc6c61471bd425e7abb01e2a67c","modified":1614087066000},{"_id":"themes/kaze/source/css/_mixins/index.styl","hash":"1a7b903c2a2efac8b00f5cc8d66efcf0815e4f0f","modified":1614087066000},{"_id":"themes/kaze/source/css/_base/highlight.styl","hash":"466974079c5f2cedc89e5ffa65b79beefe1d521b","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/archives.styl","hash":"a16f9c95bbb35e0f40b4a13dea289bce5cdbc888","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/about.styl","hash":"77b652d7f4df3070f9ad914bfde737dd17136698","modified":1614087066000},{"_id":"themes/kaze/source/css/_base/reset.styl","hash":"235d6d0dc47ee6be3d5b1cb3130fd1b4dac5a54e","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/index.styl","hash":"9cf3eaefe00fadd82226ed0b934008236c212564","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/rewrite.styl","hash":"ff11ffb307b13eedbeb6d8646fc8857d1df8472a","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/tags.styl","hash":"fd982b1929796ccea7b9e58297335998b310c894","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/categories.styl","hash":"eb6b59a69b3e0e5f8308f78a3ab2a76315421c94","modified":1614087066000},{"_id":"themes/kaze/source/css/_variables/index.styl","hash":"7416faa1090178099f029588dc1813ab88955442","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/lozad.min.js","hash":"31d6033296c6e6ebff829ab29d171bac3177280d","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/plugins/comments/livere.ejs","hash":"7c743023ba37aec87a2f341031f81e2939759cbd","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/plugins/comments/gitalk.ejs","hash":"e32fa94e598a49870bf3795549b6729d59f93e8e","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/plugins/comments/valine.ejs","hash":"11f9ec64783d78486ef4d07150a35ec9fc0e04e4","modified":1614087066000},{"_id":"themes/kaze/layout/_partial/plugins/comments/waline.ejs","hash":"9d797e837f889efb3d6809cc09a029ababaa0f9b","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/button.styl","hash":"732e595a17701ddd307ca56d2d77b2f336feae8d","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/archive.styl","hash":"ad5f4c28411e2054c14003f723c7732682899813","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/author.styl","hash":"8022ea6dde3a4b0eabb65c8181c95f67582c6c99","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/card.styl","hash":"db2b18162ce44bce7b7a6ef4a9c6a0d47ff4003e","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/container.styl","hash":"62faf1e412d9b7d5d709ad6619df36f5991d1ef4","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/footer.styl","hash":"fe93d15bfd0d0fbb6fd4e7fc4e6634e6564f5382","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/columns.styl","hash":"0dce9e38b8ee4a3aae49b2b978859b01f132bf5f","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/categories.styl","hash":"6e600621b9610b20636ec158fe95d8526e9c7904","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/friends.styl","hash":"3ad6e00b1913043157d8568de2b3de951cabfd6e","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/pagination.styl","hash":"87787a0ac9863dc2ef4647e665dc7723116af9c6","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/post.styl","hash":"fdb9b1c4163746a0858f7a60c59531dc0b6c4a1f","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/nav.styl","hash":"045f508265155fe7d98398dcb2f974ae7c92fc89","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/recentposts.styl","hash":"4dc019947948744c5d180444a8f342a7988c6d37","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/search.styl","hash":"ef81b98cef1f47da1381df0a6d47cbd4fcac3e4b","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/section.styl","hash":"61e7d629d2f124c9f6099134fa674fe7505f415d","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/postlist.styl","hash":"8dd8f1c8e10f28f7895635f26d7269b01f7f60d5","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/tags.styl","hash":"c3a33c7f1e6453f12cbb691f1d63e0b474534954","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.css","hash":"4daa164702723f5206591005151dc89f58eab559","modified":1614087066000},{"_id":"themes/kaze/source/css/_pages/widgets/toc.styl","hash":"c353b845bfd881de34d3dd1326edd213980af0fa","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.js","hash":"300d6a58c385a454ac7f6b271e210ab59f54796c","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","hash":"de43e5d8fe8ac0e5be493fc37280a14764d224ba","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","hash":"99ad7013f4e2cb94d6858f1d338ce24976722e16","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","hash":"1b4f667352bde11377b82f6402af9470ca7d410d","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","hash":"7831e69297d5fadf91f33f63f2aeb58f0c374e6b","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","hash":"a611beee4ccd9bc303667159ad2977fc4fa02126","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","hash":"ff9820d63a78827b2798030c4734e9c752183953","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","hash":"58ddae9f0df85468118a028e24b975848e22488c","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","hash":"18a27c7ef76965a40daaab90035500a3ad7f2cbf","modified":1614087066000},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","hash":"3e748cee6ef8cdaceec5335971b8d133aa9dcfa3","modified":1614087066000},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/2.png","hash":"b6a2593e91d20222da24fa8c1cb80ee4ffc4f0e7","modified":1567687302000},{"_id":"source/_posts/树莓派小车基本功能的实现/L@4)MDNEM8]XG)U~P248D]E.png","hash":"9919efcabc2ab930d114b043bfb700ce49b678d9","modified":1564660294000},{"_id":"public/content.json","hash":"5ce19f1ee69715df3a466867d947f6d9feb67f64","modified":1679906275955},{"_id":"public/search.json","hash":"2bdfd658a0aae53413bdfa822f15ccc405f5dabf","modified":1679906275955},{"_id":"public/2021/10/10/平衡二叉树节点的删除/index.html","hash":"acdc4eea85b4d2f3e2b599030e46303e217b5cfc","modified":1679906275955},{"_id":"public/2021/10/03/考研10/index.html","hash":"2f4e591715b461204d9986111a00b8918ce98581","modified":1679906275955},{"_id":"public/2021/09/17/关于自己考研以来的一些思考/index.html","hash":"1f552b42349055dcf60c4527be04d6b7649216c1","modified":1679906275955},{"_id":"public/2021/07/29/考研8/index.html","hash":"4cd64734c3f79bfdfb8d63b5be6647a8d0cc3a30","modified":1679906275955},{"_id":"public/2021/06/10/考研7/index.html","hash":"8ec503bb70f813206f1e56cac83152e35cdd78a8","modified":1679906275955},{"_id":"public/2021/06/01/考研6/index.html","hash":"a7b76f46d420758dc32774aa841316a346d90c6e","modified":1679906275955},{"_id":"public/2021/05/09/考研之旅004/index.html","hash":"0be6d80ecc42ac186d4c12aea25fb5d9b5e44ff9","modified":1679906275955},{"_id":"public/2023/03/27/差分隐私之组合定理/index.html","hash":"06733900fdb9c58a0e1697e5e0b43fd8947633c8","modified":1679906275955},{"_id":"public/2022/03/10/Z字形变换/index.html","hash":"03e8ddc9ce97f4a1e9b3475f1546a0f92949fd58","modified":1679906275955},{"_id":"public/2023/03/27/hello-world/index.html","hash":"cd943ebd9f0cae03eb954f8fc6923603ee64d682","modified":1679906275955},{"_id":"public/2022/01/04/考研初始结束/index.html","hash":"ea23d9ec728e8bd59a4fbc501ef3b0d71926d7c7","modified":1679906275955},{"_id":"public/2021/09/28/m叉树的双亲孩子节点之间的关系/index.html","hash":"ee2e67cae59ce7c9eb209f5f506d6068a4fe3f45","modified":1679906275955},{"_id":"public/2021/09/17/考研9/index.html","hash":"1ffb03e70d5abc4d3e4f294766092b9dff9fb17f","modified":1679906275955},{"_id":"public/2021/06/24/格雷编码/index.html","hash":"b5011b771ac4d62926d6beac92d128588846fa3e","modified":1679906275955},{"_id":"public/2021/05/22/考研5/index.html","hash":"3db105652037361546b7d6aa632f112e0aedd422","modified":1679906275955},{"_id":"public/2021/04/25/人的三个20岁/index.html","hash":"8350084afdf853a8d4cf9b35dc495d19f27f6802","modified":1679906275955},{"_id":"public/2021/04/19/考研之旅003/index.html","hash":"950363fe80bb92f83d325f94c8ed9916acbaf26a","modified":1679906275955},{"_id":"public/2021/04/04/考研之旅002/index.html","hash":"6515ebbcb2cd48341ad1318252bbe3d61d6974d8","modified":1679906275955},{"_id":"public/2021/03/14/考研之旅001/index.html","hash":"730fb2bba37b38de963614ff1e2a023ab1fada9d","modified":1679906275955},{"_id":"public/2020/12/11/hexo操作/index.html","hash":"9f4021b9b00ca831dc311db8227b6103a44c50ed","modified":1679906275955},{"_id":"public/2019/07/27/my-first-blog/index.html","hash":"ee7517495551e0d1b6aa446f3264ec2e1bdcce3e","modified":1679906275955},{"_id":"public/archives/2019/page/2/index.html","hash":"e2fad16169f2295df3dda55ef142fd79c0b4ea2c","modified":1679906275955},{"_id":"public/archives/2019/07/index.html","hash":"177b44fe3fd63cc64d5da18a483b80798a6415b1","modified":1679906275955},{"_id":"public/archives/2019/08/index.html","hash":"a9238e73b87785b51d4a3e03e8d8017f78aaca6c","modified":1679906275955},{"_id":"public/archives/2019/10/index.html","hash":"0c99a10560b60b1adf783269973077dd1dcf4667","modified":1679906275955},{"_id":"public/archives/2019/11/index.html","hash":"e0c67393c74eccbbd2eb9ed105cc85779221d945","modified":1679906275955},{"_id":"public/archives/2019/12/index.html","hash":"d8b4d69f2f97705f4dc0f887e2384e3290d2cbc4","modified":1679906275955},{"_id":"public/archives/2020/03/index.html","hash":"6b0121db82bb606ef40b85f6cbd0bb30c5f29c2d","modified":1679906275955},{"_id":"public/archives/2020/04/index.html","hash":"bc620a8f888751effbaa3aa0c73548c5937e0721","modified":1679906275955},{"_id":"public/archives/2020/05/index.html","hash":"bf59b0cea3505bc8a5f18d5dadc78eaf9157a790","modified":1679906275955},{"_id":"public/archives/2020/06/index.html","hash":"113ac555ebd73996462bca4dc757317a288bcfb0","modified":1679906275955},{"_id":"public/archives/2020/07/index.html","hash":"ae2673109af51799ffa4b1cc1aa682d059026c76","modified":1679906275955},{"_id":"public/archives/2020/12/index.html","hash":"399c2e1d783175fe7a928a162ac3b1c285d9fb75","modified":1679906275955},{"_id":"public/archives/2021/03/index.html","hash":"19e36275fb410f6edb2520f1836005bd0e67c124","modified":1679906275955},{"_id":"public/archives/2021/04/index.html","hash":"8aff38a95ac79d2298250fdaf7a5e626b25d41c9","modified":1679906275955},{"_id":"public/archives/2021/05/index.html","hash":"0ca5bdab385a6b7dcfa15b40c632973fb4a938f1","modified":1679906275955},{"_id":"public/archives/2021/06/index.html","hash":"91ae8b9e21a51175bd7a25473962b96d280b66bc","modified":1679906275955},{"_id":"public/archives/2021/07/index.html","hash":"66d7e970b40b18cbbf699507455c942350fa7510","modified":1679906275955},{"_id":"public/archives/2021/10/index.html","hash":"46bf27d3128d0265c84c031cb458339b154205b0","modified":1679906275955},{"_id":"public/archives/2022/index.html","hash":"18332e0c7c1c8029b289923fedcf731308e7151d","modified":1679906275955},{"_id":"public/archives/2022/01/index.html","hash":"3c28d93ec8b8c70db4a8dc48a42e7b65d097152b","modified":1679906275955},{"_id":"public/archives/2022/03/index.html","hash":"da4009f3e0afbbc72d1965003c869711ddeb1eda","modified":1679906275955},{"_id":"public/archives/2023/index.html","hash":"bac8d8d4ae3c2ebfa144eecd86b519d216be159e","modified":1679906275955},{"_id":"public/archives/2023/03/index.html","hash":"42e17934ebb0c0e0b939456c64ebf1735c191a74","modified":1679906275955},{"_id":"public/tags/JAVA基础知识/index.html","hash":"2e3a68caf18f44f820c01a2e5863cc6af534cb3b","modified":1679906275955},{"_id":"public/tags/算法/index.html","hash":"ffeb75c217441caef0027eb98641d664a1a0343c","modified":1679906275955},{"_id":"public/tags/数据结构/index.html","hash":"4a733607582e4f017841fbc57a040239c9a66bf3","modified":1679906275955},{"_id":"public/tags/随笔/index.html","hash":"405bcf164c854491a0f2383fac93c7cca12678c8","modified":1679906275955},{"_id":"public/tags/差分隐私/index.html","hash":"0871e354375bede12192f27e17c06e0c5d683ac5","modified":1679906275955},{"_id":"public/tags/树莓派/index.html","hash":"62f88b468c35558f113e7884894e22547c288b8d","modified":1679906275955},{"_id":"public/tags/考研/page/2/index.html","hash":"cb9aabd5610c0838e40e6f3ba43926c6b13936e7","modified":1679906275955},{"_id":"public/categories/index.html","hash":"41fd77b6281253aacf8a93787660f96066bdfdd6","modified":1679906275955},{"_id":"public/tags/index.html","hash":"0f49b3354132a6423e1f7895f5a8a3ed551b42f7","modified":1679906275955},{"_id":"public/links/index.html","hash":"71a15512c3ff886c90335b7a26f800f58b12db6c","modified":1679906275955},{"_id":"public/2020/07/29/基本JAVA-WEB项目/index.html","hash":"dbf849d0e7a13dd7946fa0bd819284b801f6b704","modified":1679906275955},{"_id":"public/2020/06/12/N皇后/index.html","hash":"ff590825f7d3d1db19f81e074d9c0a257f8cdbc1","modified":1679906275955},{"_id":"public/2020/05/05/LeetCode-字符串转换整数-atoi/index.html","hash":"193e6ef5c26a83da85bc26edeb4e017d221eab89","modified":1679906275955},{"_id":"public/2020/05/04/填写运算符问题/index.html","hash":"9844b450355568a6866555c49930556e2cf9f102","modified":1679906275955},{"_id":"public/2020/04/23/颜色分类/index.html","hash":"3894534072fe770420e2ff87866fb384f18dc6de","modified":1679906275955},{"_id":"public/2020/03/23/LeetCode 课程表 II/index.html","hash":"684bfd334aa32852eebb776a37eeabf623fcf917","modified":1679906275955},{"_id":"public/2019/12/12/动态查找（查找，插入及删除）/index.html","hash":"8c8addc654fbbca5bb7289449853ce17caa36912","modified":1679906275955},{"_id":"public/2019/12/01/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/index.html","hash":"88d2cf1c83baf86455f1cf9dec587a0d17b33564","modified":1679906275955},{"_id":"public/2019/11/17/一元二次多项式的相加/index.html","hash":"be142b20643d6870c03a24138f393edb8fadda03","modified":1679906275955},{"_id":"public/2019/10/27/串的模式匹配算法/index.html","hash":"2a6cfcfb7e0cd334a85da94a9f618f65eb544a29","modified":1679906275955},{"_id":"public/2019/09/18/JAVAString类常用方法/index.html","hash":"340fac2363ec718a09a504b4956596480749278a","modified":1679906275955},{"_id":"public/2019/09/17/JAVA基础知识/index.html","hash":"c356aa24195ecc0c827f580e43b7c451d2eba667","modified":1679906275955},{"_id":"public/2019/09/11/计算三重积分的四种方法/index.html","hash":"8041a994317dbc745fda7572827ddcccc2ddaf44","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/index.html","hash":"f06ca41f981c6bc72c5077678b6766db53bb2d9c","modified":1679906275955},{"_id":"public/2019/08/05/树莓派小车基本功能的实现/index.html","hash":"8665e6af609c557b1f6e910bb714dc88fa6e7606","modified":1679906275955},{"_id":"public/2019/07/30/c-java-python大数加法/index.html","hash":"60a14f125c07e80a0dda8994c00ed535877d97ff","modified":1679906275955},{"_id":"public/archives/index.html","hash":"063224ed914d83b081259b3a4d8b7a1f82046491","modified":1679906275955},{"_id":"public/archives/page/2/index.html","hash":"a1cdeda044c08a5b3ae828235f5b43631c19c5aa","modified":1679906275955},{"_id":"public/archives/page/3/index.html","hash":"38422dd2a161e85210719fe403f915097c2850ed","modified":1679906275955},{"_id":"public/archives/page/4/index.html","hash":"e610f7e62ef87806dce1414942b2a6f2d644dcbc","modified":1679906275955},{"_id":"public/archives/2019/index.html","hash":"775844aac63d3bdc778fcb0dc03b78cb48adcaaa","modified":1679906275955},{"_id":"public/archives/2019/09/index.html","hash":"f2a68d171d3007621089c0a46a734e0ea9c6171b","modified":1679906275955},{"_id":"public/archives/2020/index.html","hash":"4cc18cff5be1dc1d12800cb34bd142d661ce3cff","modified":1679906275955},{"_id":"public/archives/2021/index.html","hash":"e842addf12f0e2e177356df7088fd570c1d21079","modified":1679906275955},{"_id":"public/archives/2021/page/2/index.html","hash":"c039398bec4522452f4a55583890bcf820f92029","modified":1679906275955},{"_id":"public/archives/2021/09/index.html","hash":"2353a41beb472b4c6632ba750bf1bca2a64e2f08","modified":1679906275955},{"_id":"public/index.html","hash":"d64e48d521c64f93b437e672dccd7c26d31f2f83","modified":1679906275955},{"_id":"public/page/2/index.html","hash":"005c9137b6ee378f75f1a9ea2eae9d4ae35da44f","modified":1679906275955},{"_id":"public/page/4/index.html","hash":"bc64b94b688c808cbe3490b98e63fade4fafffee","modified":1679906275955},{"_id":"public/page/3/index.html","hash":"ee664fa87a355f84cf8aeb515077039ba318d48e","modified":1679906275955},{"_id":"public/tags/LeetCode/index.html","hash":"9dd599c37bd4c56a5e62c777bb8af70697683f0d","modified":1679906275955},{"_id":"public/tags/考研/index.html","hash":"9149372808b46b8d0ad5e6ead2dbdc9031931fcc","modified":1679906275955},{"_id":"public/CNAME","hash":"9603dddf9db5cd017d7f797b2d6613a5db0a0cf4","modified":1679906275955},{"_id":"public/2019/10/27/串的模式匹配算法/1.png","hash":"53f4857eea666ca2657341d70432740964452f51","modified":1679906275955},{"_id":"public/2019/10/27/串的模式匹配算法/2.png","hash":"96efcb9fd5c0edde153a2cc496f10c8278e21512","modified":1679906275955},{"_id":"public/2019/10/27/串的模式匹配算法/3.png","hash":"3434c36ad0724d1cf91d24bd0ff7176c0b1c6438","modified":1679906275955},{"_id":"public/2019/10/27/串的模式匹配算法/4.png","hash":"e7833f090efcb10583c0db4466f63ad39c78bad9","modified":1679906275955},{"_id":"public/2019/10/27/串的模式匹配算法/5.png","hash":"b2844a9daf5746d3f5e5d2f882b527b8ec4b7dc6","modified":1679906275955},{"_id":"public/2019/12/01/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/2.png","hash":"27cd2b9471ec353503910b5b97eb76d767157ff6","modified":1679906275955},{"_id":"public/2019/12/12/动态查找（查找，插入及删除）/1.PNG","hash":"68e0d66f4256e2e8fec239fd192cfd5fda9cbca2","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1679906275955},{"_id":"public/live2dw/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1679906275955},{"_id":"public/live2dw/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1679906275955},{"_id":"public/live2dw/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1679906275955},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1679906275955},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1679906275955},{"_id":"public/img/touxiang.jpg","hash":"129afb7eb2b1808a4770aa945c7c584b9293d502","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/4.png","hash":"05fcc3ade7182594786e18d5f65e02fb9b956800","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/7.png","hash":"8a5e24c2efcfed4021e72ed78ab348658971f041","modified":1679906275955},{"_id":"public/2019/11/17/一元二次多项式的相加/1.PNG","hash":"88ebffe915971ad2a5868a43fb2bd5998fd976aa","modified":1679906275955},{"_id":"public/2019/12/01/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/1.PNG","hash":"034dba5c1a191eb17322f88ed81db12841252e15","modified":1679906275955},{"_id":"public/2020/07/29/基本JAVA-WEB项目/1.PNG","hash":"35cbb3c65c501a2f964667017d030c6a138701ae","modified":1679906275955},{"_id":"public/live2dw/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1679906275955},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/5.png","hash":"abb32d6830abf7bf6d220bbb259858bb3227f614","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/8.png","hash":"9cb60644e96b298a0c0038b03544355aae9ff15d","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/9.png","hash":"7752670bf8eb16fd4e4f92b49edc1903fc7f6f0e","modified":1679906275955},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1679906275955},{"_id":"public/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1679906275955},{"_id":"public/js/main.js","hash":"ec44b7367280c12ebed4425eed652c754fa1b74f","modified":1679906275955},{"_id":"public/js/lib/lozad.min.js","hash":"31d6033296c6e6ebff829ab29d171bac3177280d","modified":1679906275955},{"_id":"public/js/lib/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1679906275955},{"_id":"public/js/lib/lightbox/baguetteBox.min.css","hash":"4daa164702723f5206591005151dc89f58eab559","modified":1679906275955},{"_id":"public/js/lib/lightbox/baguetteBox.min.js","hash":"300d6a58c385a454ac7f6b271e210ab59f54796c","modified":1679906275955},{"_id":"public/js/lib/prism/prism-coy.min.css","hash":"de43e5d8fe8ac0e5be493fc37280a14764d224ba","modified":1679906275955},{"_id":"public/js/lib/prism/prism-dark.min.css","hash":"99ad7013f4e2cb94d6858f1d338ce24976722e16","modified":1679906275955},{"_id":"public/js/lib/prism/prism-line-numbers.min.css","hash":"7831e69297d5fadf91f33f63f2aeb58f0c374e6b","modified":1679906275955},{"_id":"public/js/lib/prism/prism-funky.min.css","hash":"1b4f667352bde11377b82f6402af9470ca7d410d","modified":1679906275955},{"_id":"public/js/lib/prism/prism-okaidia.min.css","hash":"a611beee4ccd9bc303667159ad2977fc4fa02126","modified":1679906275955},{"_id":"public/js/lib/prism/prism-solarizedlight.min.css","hash":"58ddae9f0df85468118a028e24b975848e22488c","modified":1679906275955},{"_id":"public/js/lib/prism/prism-tomorrow.min.css","hash":"ff9820d63a78827b2798030c4734e9c752183953","modified":1679906275955},{"_id":"public/js/lib/prism/prism-twilight.min.css","hash":"18a27c7ef76965a40daaab90035500a3ad7f2cbf","modified":1679906275955},{"_id":"public/js/lib/prism/prism.min.css","hash":"3e748cee6ef8cdaceec5335971b8d133aa9dcfa3","modified":1679906275955},{"_id":"public/css/main.css","hash":"acf2cd1325d31e00a73cdd8948efb61864b4ce99","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/1.png","hash":"fc7107c9ae83574da32a169094e72edd530c062b","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/6.png","hash":"83045286e641d55544f4822f11ef77d049eb58c6","modified":1679906275955},{"_id":"public/2019/08/05/树莓派小车基本功能的实现/111.jpg","hash":"2905be12b65b1179d96a7cb043a3baf0a9646309","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/3.png","hash":"7cc9ba0fa860689e212458cff3ef2249788fc164","modified":1679906275955},{"_id":"public/2019/08/05/树莓派小车基本功能的实现/alipay.jpeg","hash":"8367b86195fb0132f88500bf334e1034f13ec8da","modified":1679906275955},{"_id":"public/2019/08/05/树莓派小车基本功能的实现/3426615-a8a227ec96464665.jpg","hash":"e492a625db45f9ab03a52239ccd844e7c48d1f45","modified":1679906275955},{"_id":"public/2019/09/05/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/2.png","hash":"b6a2593e91d20222da24fa8c1cb80ee4ffc4f0e7","modified":1679906275955},{"_id":"public/live2dw/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1679906275955},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1679906275955},{"_id":"public/2019/08/05/树莓派小车基本功能的实现/L@4)MDNEM8]XG)U~P248D]E.png","hash":"9919efcabc2ab930d114b043bfb700ce49b678d9","modified":1679906275955}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Eclipse的安装,HelloWorld的实现以及jdk的下载与环境配置","date":"2019-09-05T14:03:14.000Z","_content":"\n上了第一节JAVA课后，老师然我们自己下去安装Eclipse以及JAVA的jdk，也是费了我一番功夫，在这里简单总结一下，希望能帮助到大家\n\n# 1.Eclipse的下载与安装\n直接百度搜索Eclipse，下面第一个就是官网，进入官网我们选择downlaoad packages\n![xxx](1.png)\n然后选择对应的要下载的版本，我这里选的是Windows\n\n\n![xxx](2.png)\n<!-- more --> \n直接下载的话速度可能会非常慢，可以把镜像改成国内的，会快很多\n![xxx](3.png)\n最后按默认安装即可\n# 2.HelloWorld的实现\n打开eclipse后选择New->Project->java project\n![xxx](4.png)\n在project name输入HelloWorld\n在Module name也输入HelloWorld\n然后在左边的视图里找到src，右键创建一个package，接着在你创建的package上右键创建一个class ，class名为HelloWorld\n然后写上代码即可\n\n![xxx](5.png)如图所示，点击右上角运行即可，下方即会出现HelloWorld\n# 3.jdk的下载与jdk的配置\n百度jdk第一项便是[oracle](https://www.oracle.com/technetwork/java/javase/downloads/index.html)官网\n进入后下载对应的版本即可!\n[xxx](6.png)\n我下的是最后一项,windows的zip\n然后经行环境的配置\n打开系统的环境变量\n首先新建一个系统变量JAVA_HOME\n变量值为你的jdk路径，注意是你自己的路径\n\n\n![xxx](7.png)\n接着再新建一个系统变量CLASSPATH\n变量值为  ;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tool.jar\n复制过去就好\n\n![xxx](8.png)\n接着再系统变量的path里加上\n%JAVA_HOME%\\bin\n与%CLASSPATH%即可\n\n![xxx](9.png)\n至此环境就配好了\n我们可以在命令行里分别输入java 与 javac 来查看是否配置成功\n如果成功则应出现相应的内容\n\n我的个人博客 amazingz6.github.io\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n我的bilibili https://space.bilibili.com/66908429","source":"_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置.md","raw":"---\ntitle: 'Eclipse的安装,HelloWorld的实现以及jdk的下载与环境配置'\ndate: 2019-09-05 22:03:14\ntags:\n---\n\n上了第一节JAVA课后，老师然我们自己下去安装Eclipse以及JAVA的jdk，也是费了我一番功夫，在这里简单总结一下，希望能帮助到大家\n\n# 1.Eclipse的下载与安装\n直接百度搜索Eclipse，下面第一个就是官网，进入官网我们选择downlaoad packages\n![xxx](1.png)\n然后选择对应的要下载的版本，我这里选的是Windows\n\n\n![xxx](2.png)\n<!-- more --> \n直接下载的话速度可能会非常慢，可以把镜像改成国内的，会快很多\n![xxx](3.png)\n最后按默认安装即可\n# 2.HelloWorld的实现\n打开eclipse后选择New->Project->java project\n![xxx](4.png)\n在project name输入HelloWorld\n在Module name也输入HelloWorld\n然后在左边的视图里找到src，右键创建一个package，接着在你创建的package上右键创建一个class ，class名为HelloWorld\n然后写上代码即可\n\n![xxx](5.png)如图所示，点击右上角运行即可，下方即会出现HelloWorld\n# 3.jdk的下载与jdk的配置\n百度jdk第一项便是[oracle](https://www.oracle.com/technetwork/java/javase/downloads/index.html)官网\n进入后下载对应的版本即可!\n[xxx](6.png)\n我下的是最后一项,windows的zip\n然后经行环境的配置\n打开系统的环境变量\n首先新建一个系统变量JAVA_HOME\n变量值为你的jdk路径，注意是你自己的路径\n\n\n![xxx](7.png)\n接着再新建一个系统变量CLASSPATH\n变量值为  ;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tool.jar\n复制过去就好\n\n![xxx](8.png)\n接着再系统变量的path里加上\n%JAVA_HOME%\\bin\n与%CLASSPATH%即可\n\n![xxx](9.png)\n至此环境就配好了\n我们可以在命令行里分别输入java 与 javac 来查看是否配置成功\n如果成功则应出现相应的内容\n\n我的个人博客 amazingz6.github.io\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n我的bilibili https://space.bilibili.com/66908429","slug":"Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置","published":1,"updated":"2020-05-04T08:09:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7600007suu6waa6b6t","content":"<p>上了第一节JAVA课后，老师然我们自己下去安装Eclipse以及JAVA的jdk，也是费了我一番功夫，在这里简单总结一下，希望能帮助到大家</p>\n<h1><span id=\"1eclipse的下载与安装\">1.Eclipse的下载与安装</span></h1><p>直接百度搜索Eclipse，下面第一个就是官网，进入官网我们选择downlaoad packages<br><img src=\"1.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"1.png\" class=\"lozad post-image\"><br>然后选择对应的要下载的版本，我这里选的是Windows</p>\n<p><img src=\"2.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"2.png\" class=\"lozad post-image\"><br><span id=\"more\"></span><br>直接下载的话速度可能会非常慢，可以把镜像改成国内的，会快很多<br><img src=\"3.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"3.png\" class=\"lozad post-image\"><br>最后按默认安装即可</p>\n<h1><span id=\"2helloworld的实现\">2.HelloWorld的实现</span></h1><p>打开eclipse后选择New-&gt;Project-&gt;java project<br><img src=\"4.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"4.png\" class=\"lozad post-image\"><br>在project name输入HelloWorld<br>在Module name也输入HelloWorld<br>然后在左边的视图里找到src，右键创建一个package，接着在你创建的package上右键创建一个class ，class名为HelloWorld<br>然后写上代码即可</p>\n<p><img src=\"5.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"5.png\" class=\"lozad post-image\">如图所示，点击右上角运行即可，下方即会出现HelloWorld</p>\n<h1><span id=\"3jdk的下载与jdk的配置\">3.jdk的下载与jdk的配置</span></h1><p>百度jdk第一项便是<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">oracle</a>官网<br>进入后下载对应的版本即可!<br><a href=\"6.png\">xxx</a><br>我下的是最后一项,windows的zip<br>然后经行环境的配置<br>打开系统的环境变量<br>首先新建一个系统变量JAVA_HOME<br>变量值为你的jdk路径，注意是你自己的路径</p>\n<p><img src=\"7.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"7.png\" class=\"lozad post-image\"><br>接着再新建一个系统变量CLASSPATH<br>变量值为  ;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tool.jar<br>复制过去就好</p>\n<p><img src=\"8.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"8.png\" class=\"lozad post-image\"><br>接着再系统变量的path里加上<br>%JAVA_HOME%\\bin<br>与%CLASSPATH%即可</p>\n<p><img src=\"9.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"9.png\" class=\"lozad post-image\"><br>至此环境就配好了<br>我们可以在命令行里分别输入java 与 javac 来查看是否配置成功<br>如果成功则应出现相应的内容</p>\n<p>我的个人博客 amazingz6.github.io<br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a><br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a></p>\n","site":{"data":{}},"excerpt":"<p>上了第一节JAVA课后，老师然我们自己下去安装Eclipse以及JAVA的jdk，也是费了我一番功夫，在这里简单总结一下，希望能帮助到大家</p>\n<h1 id=\"1-Eclipse的下载与安装\"><a href=\"#1-Eclipse的下载与安装\" class=\"headerlink\" title=\"1.Eclipse的下载与安装\"></a>1.Eclipse的下载与安装</h1><p>直接百度搜索Eclipse，下面第一个就是官网，进入官网我们选择downlaoad packages<br><img src=\"1.png\" alt=\"xxx\"><br>然后选择对应的要下载的版本，我这里选的是Windows</p>\n<p><img src=\"2.png\" alt=\"xxx\"><br>","more":"<br>直接下载的话速度可能会非常慢，可以把镜像改成国内的，会快很多<br><img src=\"3.png\" alt=\"xxx\"><br>最后按默认安装即可</p>\n<h1 id=\"2-HelloWorld的实现\"><a href=\"#2-HelloWorld的实现\" class=\"headerlink\" title=\"2.HelloWorld的实现\"></a>2.HelloWorld的实现</h1><p>打开eclipse后选择New-&gt;Project-&gt;java project<br><img src=\"4.png\" alt=\"xxx\"><br>在project name输入HelloWorld<br>在Module name也输入HelloWorld<br>然后在左边的视图里找到src，右键创建一个package，接着在你创建的package上右键创建一个class ，class名为HelloWorld<br>然后写上代码即可</p>\n<p><img src=\"5.png\" alt=\"xxx\">如图所示，点击右上角运行即可，下方即会出现HelloWorld</p>\n<h1 id=\"3-jdk的下载与jdk的配置\"><a href=\"#3-jdk的下载与jdk的配置\" class=\"headerlink\" title=\"3.jdk的下载与jdk的配置\"></a>3.jdk的下载与jdk的配置</h1><p>百度jdk第一项便是<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">oracle</a>官网<br>进入后下载对应的版本即可!<br><a href=\"6.png\">xxx</a><br>我下的是最后一项,windows的zip<br>然后经行环境的配置<br>打开系统的环境变量<br>首先新建一个系统变量JAVA_HOME<br>变量值为你的jdk路径，注意是你自己的路径</p>\n<p><img src=\"7.png\" alt=\"xxx\"><br>接着再新建一个系统变量CLASSPATH<br>变量值为  ;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tool.jar<br>复制过去就好</p>\n<p><img src=\"8.png\" alt=\"xxx\"><br>接着再系统变量的path里加上<br>%JAVA_HOME%\\bin<br>与%CLASSPATH%即可</p>\n<p><img src=\"9.png\" alt=\"xxx\"><br>至此环境就配好了<br>我们可以在命令行里分别输入java 与 javac 来查看是否配置成功<br>如果成功则应出现相应的内容</p>\n<p>我的个人博客 amazingz6.github.io<br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a><br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a></p>"},{"title":"LeetCode 课程表 II","date":"2020-03-23T05:32:51.000Z","_content":"\n**名称：210. 课程表 II**\n\n**题目描述：**\n现在你总共有 n 门课需要选，记为 0 到 n-1。\n\n在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]\n\n给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。\n\n可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。\n\n示例 1:\n```\n输入: 2, [[1,0]] \n输出: [0,1]\n解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。\n```\n示例 2:\n```\n输入: 4, [[1,0],[2,0],[3,1],[3,2]]\n输出: [0,1,2,3] or [0,2,1,3]\n解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\n     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。\n```\n\n解题思路：首先是要判断是否可以完成全部的课程，很明显，我们应该用拓扑排序来做，那么数据结构我们就应该采用图（用map来存），再加上一个简单的bfs即可解出此题。\nc++代码\n```javescript\nclass Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<int> result;\n        vector<int> fake;\n        vector<int> degree(numCourses , 0);\n        unordered_map<int, vector<int>> map;\n        for(vector<int> prerequisite : prerequisites) {\n            map[prerequisite[1]].push_back(prerequisite[0]);\n            degree[prerequisite[0]]++;\n        }\n        queue<int> q;//用来做拓扑排序的队列\n        for(int i = 0; i < numCourses ; i++){\n            if(degree[i] == 0){\n                q.push(i);\n            }\n        }\n        while(!q.empty()){\n            int cur = q.front();\n            result.push_back(cur);//把每次的结果存起来，最终得到的就是顺序\n            q.pop();\n            for(int next : map[cur]){\n                degree[next]--;\n                if(degree[next] == 0)\n                    q.push(next);\n            }\n        }\n        return result.size() == numCourses ? result : fake;//fake是一个空的数组，如果找不到就输出空数组\n    }\n};\n```\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","source":"_posts/LeetCode 课程表 II.md","raw":"---\ntitle: LeetCode 课程表 II\ndate: 2020-03-23 13:32:51\ntags:\n---\n\n**名称：210. 课程表 II**\n\n**题目描述：**\n现在你总共有 n 门课需要选，记为 0 到 n-1。\n\n在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]\n\n给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。\n\n可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。\n\n示例 1:\n```\n输入: 2, [[1,0]] \n输出: [0,1]\n解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。\n```\n示例 2:\n```\n输入: 4, [[1,0],[2,0],[3,1],[3,2]]\n输出: [0,1,2,3] or [0,2,1,3]\n解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\n     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。\n```\n\n解题思路：首先是要判断是否可以完成全部的课程，很明显，我们应该用拓扑排序来做，那么数据结构我们就应该采用图（用map来存），再加上一个简单的bfs即可解出此题。\nc++代码\n```javescript\nclass Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<int> result;\n        vector<int> fake;\n        vector<int> degree(numCourses , 0);\n        unordered_map<int, vector<int>> map;\n        for(vector<int> prerequisite : prerequisites) {\n            map[prerequisite[1]].push_back(prerequisite[0]);\n            degree[prerequisite[0]]++;\n        }\n        queue<int> q;//用来做拓扑排序的队列\n        for(int i = 0; i < numCourses ; i++){\n            if(degree[i] == 0){\n                q.push(i);\n            }\n        }\n        while(!q.empty()){\n            int cur = q.front();\n            result.push_back(cur);//把每次的结果存起来，最终得到的就是顺序\n            q.pop();\n            for(int next : map[cur]){\n                degree[next]--;\n                if(degree[next] == 0)\n                    q.push(next);\n            }\n        }\n        return result.size() == numCourses ? result : fake;//fake是一个空的数组，如果找不到就输出空数组\n    }\n};\n```\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","slug":"LeetCode 课程表 II","published":1,"updated":"2020-05-04T08:11:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7d00017suufzw91v47","content":"<p><strong>名称：210. 课程表 II</strong></p>\n<p><strong>题目描述：</strong><br>现在你总共有 n 门课需要选，记为 0 到 n-1。</p>\n<p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p>\n<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p>\n<p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p>\n<p>示例 1:<br><pre class=\"highlight\"><span class=\"line\">输入: 2, [[1,0]] </span><br><span class=\"line\">输出: [0,1]</span><br><span class=\"line\">解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</span><br></pre><br>示例 2:<br><pre class=\"highlight\"><span class=\"line\">输入: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class=\"line\">输出: [0,1,2,3] or [0,2,1,3]</span><br><span class=\"line\">解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class=\"line\">     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</span><br></pre></p>\n<p>解题思路：首先是要判断是否可以完成全部的课程，很明显，我们应该用拓扑排序来做，那么数据结构我们就应该采用图（用map来存），再加上一个简单的bfs即可解出此题。<br>c++代码<br><pre class=\"highlight\"><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    vector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; result;</span><br><span class=\"line\">        vector&lt;int&gt; fake;</span><br><span class=\"line\">        vector&lt;int&gt; degree(numCourses , 0);</span><br><span class=\"line\">        unordered_map&lt;int, vector&lt;int&gt;&gt; map;</span><br><span class=\"line\">        for(vector&lt;int&gt; prerequisite : prerequisites) &#123;</span><br><span class=\"line\">            map[prerequisite[1]].push_back(prerequisite[0]);</span><br><span class=\"line\">            degree[prerequisite[0]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        queue&lt;int&gt; q;&#x2F;&#x2F;用来做拓扑排序的队列</span><br><span class=\"line\">        for(int i &#x3D; 0; i &lt; numCourses ; i++)&#123;</span><br><span class=\"line\">            if(degree[i] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">                q.push(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(!q.empty())&#123;</span><br><span class=\"line\">            int cur &#x3D; q.front();</span><br><span class=\"line\">            result.push_back(cur);&#x2F;&#x2F;把每次的结果存起来，最终得到的就是顺序</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">            for(int next : map[cur])&#123;</span><br><span class=\"line\">                degree[next]--;</span><br><span class=\"line\">                if(degree[next] &#x3D;&#x3D; 0)</span><br><span class=\"line\">                    q.push(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result.size() &#x3D;&#x3D; numCourses ? result : fake;&#x2F;&#x2F;fake是一个空的数组，如果找不到就输出空数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>名称：210. 课程表 II</strong></p>\n<p><strong>题目描述：</strong><br>现在你总共有 n 门课需要选，记为 0 到 n-1。</p>\n<p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p>\n<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p>\n<p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 2, [[1,0]] </span><br><span class=\"line\">输出: [0,1]</span><br><span class=\"line\">解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class=\"line\">输出: [0,1,2,3] or [0,2,1,3]</span><br><span class=\"line\">解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class=\"line\">     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</span><br></pre></td></tr></table></figure></p>\n<p>解题思路：首先是要判断是否可以完成全部的课程，很明显，我们应该用拓扑排序来做，那么数据结构我们就应该采用图（用map来存），再加上一个简单的bfs即可解出此题。<br>c++代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    vector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; result;</span><br><span class=\"line\">        vector&lt;int&gt; fake;</span><br><span class=\"line\">        vector&lt;int&gt; degree(numCourses , 0);</span><br><span class=\"line\">        unordered_map&lt;int, vector&lt;int&gt;&gt; map;</span><br><span class=\"line\">        for(vector&lt;int&gt; prerequisite : prerequisites) &#123;</span><br><span class=\"line\">            map[prerequisite[1]].push_back(prerequisite[0]);</span><br><span class=\"line\">            degree[prerequisite[0]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        queue&lt;int&gt; q;&#x2F;&#x2F;用来做拓扑排序的队列</span><br><span class=\"line\">        for(int i &#x3D; 0; i &lt; numCourses ; i++)&#123;</span><br><span class=\"line\">            if(degree[i] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">                q.push(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(!q.empty())&#123;</span><br><span class=\"line\">            int cur &#x3D; q.front();</span><br><span class=\"line\">            result.push_back(cur);&#x2F;&#x2F;把每次的结果存起来，最终得到的就是顺序</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">            for(int next : map[cur])&#123;</span><br><span class=\"line\">                degree[next]--;</span><br><span class=\"line\">                if(degree[next] &#x3D;&#x3D; 0)</span><br><span class=\"line\">                    q.push(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result.size() &#x3D;&#x3D; numCourses ? result : fake;&#x2F;&#x2F;fake是一个空的数组，如果找不到就输出空数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n"},{"title":"JAVAString类常用方法","date":"2019-09-18T00:53:20.000Z","_content":"\n# 1.创建新String\n```javescript\nString concat(String s);//返回一个新串，在原串后附加上s。\nString replace(String old, String new);//返回一个新串，将原串中出现的old替换成new。\nString substring(int start, int end);//返回一个新串，它是原串中从start到end的一部分。\nString toLowerCase();//返回一个新串，它将原串中的大写字母变成小写。\nString toUpperCase();//返回一个新串，它将原串中的小写字母变成大写。\n```\n# 2.查找方法\n```javescript\nboolean endsWith(String s);//如原串以s串为结尾，则返回true。\nboolean startsWith(String s);//如原串以s串为开始，则返回true。\nint indexOf(String s);//返回串中第一次出现s串的序号值。\nint indexOf(String s, int offset);//返回串中从offset开始查找，第一次出现s串的序号值。\n```\n# 3.比较方法\n```javescript\nboolean equals(String s);//如果原串与s串相等，则返回true。\nboolean equalsIgnoreCase(String s);//如果在忽略大小写的情况下，原串与s串相等，则返回true。\nint  compareTo(String s);//进行字典序比较，如果原串小于s串则返回负数；如果原串大于s串则返回正数；如果原串等于s串则返回零。\n```\n# 4.其它方法\n```javescript\nstr.split(\",\");//根据字符来拆分字符串，当我们需要以‘|’、‘：’、‘+’、‘.’、‘^’等特殊字符作为拆分条件的话，则需要加上 \\\\ 转义字符\ncharAt(int index)//返回index处的字符。\nint length()//返回串的长度。\nstr.trim();//裁除首、尾空格符\nstr.contains(\"\");//是否包含 \"\"\n```\n\n\n\n","source":"_posts/JAVAString类常用方法.md","raw":"---\ntitle: JAVAString类常用方法\ndate: 2019-09-18 08:53:20\ntags:\n---\n\n# 1.创建新String\n```javescript\nString concat(String s);//返回一个新串，在原串后附加上s。\nString replace(String old, String new);//返回一个新串，将原串中出现的old替换成new。\nString substring(int start, int end);//返回一个新串，它是原串中从start到end的一部分。\nString toLowerCase();//返回一个新串，它将原串中的大写字母变成小写。\nString toUpperCase();//返回一个新串，它将原串中的小写字母变成大写。\n```\n# 2.查找方法\n```javescript\nboolean endsWith(String s);//如原串以s串为结尾，则返回true。\nboolean startsWith(String s);//如原串以s串为开始，则返回true。\nint indexOf(String s);//返回串中第一次出现s串的序号值。\nint indexOf(String s, int offset);//返回串中从offset开始查找，第一次出现s串的序号值。\n```\n# 3.比较方法\n```javescript\nboolean equals(String s);//如果原串与s串相等，则返回true。\nboolean equalsIgnoreCase(String s);//如果在忽略大小写的情况下，原串与s串相等，则返回true。\nint  compareTo(String s);//进行字典序比较，如果原串小于s串则返回负数；如果原串大于s串则返回正数；如果原串等于s串则返回零。\n```\n# 4.其它方法\n```javescript\nstr.split(\",\");//根据字符来拆分字符串，当我们需要以‘|’、‘：’、‘+’、‘.’、‘^’等特殊字符作为拆分条件的话，则需要加上 \\\\ 转义字符\ncharAt(int index)//返回index处的字符。\nint length()//返回串的长度。\nstr.trim();//裁除首、尾空格符\nstr.contains(\"\");//是否包含 \"\"\n```\n\n\n\n","slug":"JAVAString类常用方法","published":1,"updated":"2019-09-18T00:54:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7g00027suu3tmwblud","content":"<h1><span id=\"1创建新string\">1.创建新String</span></h1><pre class=\"highlight\"><span class=\"line\">String concat(String s);&#x2F;&#x2F;返回一个新串，在原串后附加上s。</span><br><span class=\"line\">String replace(String old, String new);&#x2F;&#x2F;返回一个新串，将原串中出现的old替换成new。</span><br><span class=\"line\">String substring(int start, int end);&#x2F;&#x2F;返回一个新串，它是原串中从start到end的一部分。</span><br><span class=\"line\">String toLowerCase();&#x2F;&#x2F;返回一个新串，它将原串中的大写字母变成小写。</span><br><span class=\"line\">String toUpperCase();&#x2F;&#x2F;返回一个新串，它将原串中的小写字母变成大写。</span><br></pre>\n<h1><span id=\"2查找方法\">2.查找方法</span></h1><pre class=\"highlight\"><span class=\"line\">boolean endsWith(String s);&#x2F;&#x2F;如原串以s串为结尾，则返回true。</span><br><span class=\"line\">boolean startsWith(String s);&#x2F;&#x2F;如原串以s串为开始，则返回true。</span><br><span class=\"line\">int indexOf(String s);&#x2F;&#x2F;返回串中第一次出现s串的序号值。</span><br><span class=\"line\">int indexOf(String s, int offset);&#x2F;&#x2F;返回串中从offset开始查找，第一次出现s串的序号值。</span><br></pre>\n<h1><span id=\"3比较方法\">3.比较方法</span></h1><pre class=\"highlight\"><span class=\"line\">boolean equals(String s);&#x2F;&#x2F;如果原串与s串相等，则返回true。</span><br><span class=\"line\">boolean equalsIgnoreCase(String s);&#x2F;&#x2F;如果在忽略大小写的情况下，原串与s串相等，则返回true。</span><br><span class=\"line\">int  compareTo(String s);&#x2F;&#x2F;进行字典序比较，如果原串小于s串则返回负数；如果原串大于s串则返回正数；如果原串等于s串则返回零。</span><br></pre>\n<h1><span id=\"4其它方法\">4.其它方法</span></h1><pre class=\"highlight\"><span class=\"line\">str.split(&quot;,&quot;);&#x2F;&#x2F;根据字符来拆分字符串，当我们需要以‘|’、‘：’、‘+’、‘.’、‘^’等特殊字符作为拆分条件的话，则需要加上 \\\\ 转义字符</span><br><span class=\"line\">charAt(int index)&#x2F;&#x2F;返回index处的字符。</span><br><span class=\"line\">int length()&#x2F;&#x2F;返回串的长度。</span><br><span class=\"line\">str.trim();&#x2F;&#x2F;裁除首、尾空格符</span><br><span class=\"line\">str.contains(&quot;&quot;);&#x2F;&#x2F;是否包含 &quot;&quot;</span><br></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-创建新String\"><a href=\"#1-创建新String\" class=\"headerlink\" title=\"1.创建新String\"></a>1.创建新String</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String concat(String s);&#x2F;&#x2F;返回一个新串，在原串后附加上s。</span><br><span class=\"line\">String replace(String old, String new);&#x2F;&#x2F;返回一个新串，将原串中出现的old替换成new。</span><br><span class=\"line\">String substring(int start, int end);&#x2F;&#x2F;返回一个新串，它是原串中从start到end的一部分。</span><br><span class=\"line\">String toLowerCase();&#x2F;&#x2F;返回一个新串，它将原串中的大写字母变成小写。</span><br><span class=\"line\">String toUpperCase();&#x2F;&#x2F;返回一个新串，它将原串中的小写字母变成大写。</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-查找方法\"><a href=\"#2-查找方法\" class=\"headerlink\" title=\"2.查找方法\"></a>2.查找方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean endsWith(String s);&#x2F;&#x2F;如原串以s串为结尾，则返回true。</span><br><span class=\"line\">boolean startsWith(String s);&#x2F;&#x2F;如原串以s串为开始，则返回true。</span><br><span class=\"line\">int indexOf(String s);&#x2F;&#x2F;返回串中第一次出现s串的序号值。</span><br><span class=\"line\">int indexOf(String s, int offset);&#x2F;&#x2F;返回串中从offset开始查找，第一次出现s串的序号值。</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-比较方法\"><a href=\"#3-比较方法\" class=\"headerlink\" title=\"3.比较方法\"></a>3.比较方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean equals(String s);&#x2F;&#x2F;如果原串与s串相等，则返回true。</span><br><span class=\"line\">boolean equalsIgnoreCase(String s);&#x2F;&#x2F;如果在忽略大小写的情况下，原串与s串相等，则返回true。</span><br><span class=\"line\">int  compareTo(String s);&#x2F;&#x2F;进行字典序比较，如果原串小于s串则返回负数；如果原串大于s串则返回正数；如果原串等于s串则返回零。</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-其它方法\"><a href=\"#4-其它方法\" class=\"headerlink\" title=\"4.其它方法\"></a>4.其它方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.split(&quot;,&quot;);&#x2F;&#x2F;根据字符来拆分字符串，当我们需要以‘|’、‘：’、‘+’、‘.’、‘^’等特殊字符作为拆分条件的话，则需要加上 \\\\ 转义字符</span><br><span class=\"line\">charAt(int index)&#x2F;&#x2F;返回index处的字符。</span><br><span class=\"line\">int length()&#x2F;&#x2F;返回串的长度。</span><br><span class=\"line\">str.trim();&#x2F;&#x2F;裁除首、尾空格符</span><br><span class=\"line\">str.contains(&quot;&quot;);&#x2F;&#x2F;是否包含 &quot;&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"N皇后","date":"2020-06-12T12:40:09.000Z","_content":"\n# 51. N 皇后\n\n难度困难1219\n\n**n 皇后问题** 研究的是如何将 `n` 个皇后放置在 `n×n` 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n给你一个整数 `n` ，返回所有不同的 **n 皇后问题** 的解决方案。\n\n每一种解法包含一个不同的 **n 皇后问题** 的棋子放置方案，该方案中 `'Q'` 和 `'.'` 分别代表了皇后和空位。\n\n \n\n**示例 1：**\n\n![img](https://assets.leetcode.com/uploads/2020/11/13/queens.jpg)\n\n```\n输入：n = 4\n输出：[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n解释：如上图所示，4 皇后问题存在两个不同的解法。\n```\n\n**示例 2：**\n\n```\n输入：n = 1\n输出：[[\"Q\"]]\n```\n\n**提示：**\n\n- `1 <= n <= 9`\n\n来源:leetcode\n\n[51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/n-queens/)\n\n思路：之前写过n皇后，不过是只用算出有多少种情况，这题是要把棋盘给画出来，不过大差不差。大致思路还是dfs加回溯，在递归的时候检查当前位置的正上方有没有皇后（这里是从上到下一行一行来所以不用考虑下方），左上方一条线有没有皇后，右上方一条线有没有皇后，没有就可以进入下一层递归。\n\nc++代码：\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> ans;\n    vector<string> temp;\n    int size;\n\n    void dfs(int n){\n        if(n == size){\n            ans.push_back(temp);\n            return;\n        }\n        for(int i = 0; i < size; i++){\n            string s;\n            int flag = 0;\n            for(int j = 0; j < n; j++){\n                if(temp[j].at(i) == 'Q'){//当前位置上方\n                    flag = 1;\n                    break;\n                }    \n                if(i + n - j < size){\n                    if(temp[j].at(i + n - j) == 'Q'){//当前位置右上方\n                        flag = 1;\n                        break;\n                    }\n                }\n                if(i - n + j >= 0){\n                    if(temp[j].at(i - n + j) == 'Q'){//当前位置左上方\n                        flag = 1;\n                        break;\n                    }\n                }\n            }\n            if(flag) continue;\n            for(int j = 0; j < i; j++) s += \".\";\n            s += \"Q\";\n            for(int j = i + 1; j < size; j++) s += \".\";\n            temp.push_back(s);\n            dfs(n + 1);\n            temp.pop_back();//回溯\n        }\n    }\n\n\n    vector<vector<string>> solveNQueens(int n) {\n        size = n;\n        dfs(0);\n        return ans;\n    }\n};\n```\n\n\n\n","source":"_posts/N皇后.md","raw":"---\ntitle: N皇后\ndate: 2020-06-12 20:40:9\ntags: LeetCode\n---\n\n# 51. N 皇后\n\n难度困难1219\n\n**n 皇后问题** 研究的是如何将 `n` 个皇后放置在 `n×n` 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n给你一个整数 `n` ，返回所有不同的 **n 皇后问题** 的解决方案。\n\n每一种解法包含一个不同的 **n 皇后问题** 的棋子放置方案，该方案中 `'Q'` 和 `'.'` 分别代表了皇后和空位。\n\n \n\n**示例 1：**\n\n![img](https://assets.leetcode.com/uploads/2020/11/13/queens.jpg)\n\n```\n输入：n = 4\n输出：[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n解释：如上图所示，4 皇后问题存在两个不同的解法。\n```\n\n**示例 2：**\n\n```\n输入：n = 1\n输出：[[\"Q\"]]\n```\n\n**提示：**\n\n- `1 <= n <= 9`\n\n来源:leetcode\n\n[51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/n-queens/)\n\n思路：之前写过n皇后，不过是只用算出有多少种情况，这题是要把棋盘给画出来，不过大差不差。大致思路还是dfs加回溯，在递归的时候检查当前位置的正上方有没有皇后（这里是从上到下一行一行来所以不用考虑下方），左上方一条线有没有皇后，右上方一条线有没有皇后，没有就可以进入下一层递归。\n\nc++代码：\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> ans;\n    vector<string> temp;\n    int size;\n\n    void dfs(int n){\n        if(n == size){\n            ans.push_back(temp);\n            return;\n        }\n        for(int i = 0; i < size; i++){\n            string s;\n            int flag = 0;\n            for(int j = 0; j < n; j++){\n                if(temp[j].at(i) == 'Q'){//当前位置上方\n                    flag = 1;\n                    break;\n                }    \n                if(i + n - j < size){\n                    if(temp[j].at(i + n - j) == 'Q'){//当前位置右上方\n                        flag = 1;\n                        break;\n                    }\n                }\n                if(i - n + j >= 0){\n                    if(temp[j].at(i - n + j) == 'Q'){//当前位置左上方\n                        flag = 1;\n                        break;\n                    }\n                }\n            }\n            if(flag) continue;\n            for(int j = 0; j < i; j++) s += \".\";\n            s += \"Q\";\n            for(int j = i + 1; j < size; j++) s += \".\";\n            temp.push_back(s);\n            dfs(n + 1);\n            temp.pop_back();//回溯\n        }\n    }\n\n\n    vector<vector<string>> solveNQueens(int n) {\n        size = n;\n        dfs(0);\n        return ans;\n    }\n};\n```\n\n\n\n","slug":"N皇后","published":1,"updated":"2022-03-26T12:05:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7g00037suue3x7b3ui","content":"<h1><span id=\"51-n-皇后\">51. N 皇后</span></h1><p>难度困难1219</p>\n<p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p>\n<p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" alt=\"img\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" class=\"lozad post-image\"></p>\n<pre class=\"highlight\"><span class=\"line\">输入：n &#x3D; 4</span><br><span class=\"line\">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class=\"line\">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre>\n<p><strong>示例 2：</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入：n &#x3D; 1</span><br><span class=\"line\">输出：[[&quot;Q&quot;]]</span><br></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n<p>来源:leetcode</p>\n<p><a href=\"https://leetcode-cn.com/problems/n-queens/\">51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>思路：之前写过n皇后，不过是只用算出有多少种情况，这题是要把棋盘给画出来，不过大差不差。大致思路还是dfs加回溯，在递归的时候检查当前位置的正上方有没有皇后（这里是从上到下一行一行来所以不用考虑下方），左上方一条线有没有皇后，右上方一条线有没有皇后，没有就可以进入下一层递归。</p>\n<p>c++代码：</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; temp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == size)&#123;</span><br><span class=\"line\">            ans.push_back(temp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp[j].at(i) == <span class=\"string\">&#x27;Q&#x27;</span>)&#123;<span class=\"comment\">//当前位置上方</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i + n - j &lt; size)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp[j].at(i + n - j) == <span class=\"string\">&#x27;Q&#x27;</span>)&#123;<span class=\"comment\">//当前位置右上方</span></span><br><span class=\"line\">                        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i - n + j &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp[j].at(i - n + j) == <span class=\"string\">&#x27;Q&#x27;</span>)&#123;<span class=\"comment\">//当前位置左上方</span></span><br><span class=\"line\">                        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) s += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            s += <span class=\"string\">&quot;Q&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; size; j++) s += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            temp.push_back(s);</span><br><span class=\"line\">            dfs(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.pop_back();<span class=\"comment\">//回溯</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; solveNQueens(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        size = n;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"51-N-皇后\"><a href=\"#51-N-皇后\" class=\"headerlink\" title=\"51. N 皇后\"></a>51. N 皇后</h1><p>难度困难1219</p>\n<p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p>\n<p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n &#x3D; 4</span><br><span class=\"line\">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class=\"line\">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n &#x3D; 1</span><br><span class=\"line\">输出：[[&quot;Q&quot;]]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n<p>来源:leetcode</p>\n<p><a href=\"https://leetcode-cn.com/problems/n-queens/\">51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>思路：之前写过n皇后，不过是只用算出有多少种情况，这题是要把棋盘给画出来，不过大差不差。大致思路还是dfs加回溯，在递归的时候检查当前位置的正上方有没有皇后（这里是从上到下一行一行来所以不用考虑下方），左上方一条线有没有皇后，右上方一条线有没有皇后，没有就可以进入下一层递归。</p>\n<p>c++代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; temp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == size)&#123;</span><br><span class=\"line\">            ans.push_back(temp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp[j].at(i) == <span class=\"string\">&#x27;Q&#x27;</span>)&#123;<span class=\"comment\">//当前位置上方</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i + n - j &lt; size)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp[j].at(i + n - j) == <span class=\"string\">&#x27;Q&#x27;</span>)&#123;<span class=\"comment\">//当前位置右上方</span></span><br><span class=\"line\">                        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i - n + j &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp[j].at(i - n + j) == <span class=\"string\">&#x27;Q&#x27;</span>)&#123;<span class=\"comment\">//当前位置左上方</span></span><br><span class=\"line\">                        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) s += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            s += <span class=\"string\">&quot;Q&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; size; j++) s += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            temp.push_back(s);</span><br><span class=\"line\">            dfs(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.pop_back();<span class=\"comment\">//回溯</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; solveNQueens(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        size = n;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode 字符串转换整数 (atoi)","date":"2020-05-05T05:45:55.000Z","_content":"\n# LeetCode 字符串转换整数 (atoi)\n\n## 题目描述\n\n请你来实现一个 `atoi` 函数，使其能将字符串转换成整数。\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：\n\n- 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。\n- 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。\n- 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0 。\n\n**提示：**\n\n- 本题中的空白字符只包括空格字符 `' '` 。\n- 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n**示例 1:**\n\n```\n输入: \"42\"\n输出: 42\n```\n\n**示例 2:**\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n**示例 3:**\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n```\n\n**示例 4:**\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n**示例 5:**\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n```\n\n\n\n其实这个就是官方题解，我觉得很巧妙，所以来分享一下\n\n他采用了自动机的方法（本人刚好在学编译原理哈哈哈），将所有的状态分为四类 start(起始状态)，signed（'+'或'-'号）,number(数字)，end(结束状态)\n\n具体的状态之间的转换如下表\n\n|               | ' '   | +/-    | number    | other |\n| ------------- | ----- | ------ | --------- | ----- |\n| **start**     | start | signed | in_number | end   |\n| **signed**    | end   | end    | in_number | end   |\n| **in_number** | end   | end    | in_number | end   |\n| **end**       | end   | end    | end       | end   |\n\n\n\n\n\n```c++\nclass Automaton {\n    string state = \"start\";\n    unordered_map<string, vector<string>> table = {//状态转换表，与上表对应\n        {\"start\", {\"start\", \"signed\", \"in_number\", \"end\"}},\n        {\"signed\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"in_number\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"end\", {\"end\", \"end\", \"end\", \"end\"}}\n    };\n    int getchar(char c){//与上面的无向图对应，决定了无向图二维下标\n        if(isspace(c)) return 0;//为空格\n        if(c == '+' or c == '-') return 1;//为 '+','-'\n        if(isdigit(c)) return 2;//为数字\n        return  3;//为其他\n    }\npublic:\n    int sign = 1;//初始为1，因为当没有'+','-'号时默认是正数\n    long long ans = 0;\n    void getc(char c){\n        state = table[state][getchar(c)];//找到对应的下一个状态\n        if(state == \"in_number\"){//判断如果是数字，就将当前数字加入结果中\n            ans = ans * 10 + c - '0';\n            ans = sign == 1 ? min((long long)INT_MAX, ans) : min(-(long long)INT_MIN, ans);//判断是否超出范围是正数则与INT_MAX比较，负数则与INT_MIN比较\n        }\n        if(state == \"signed\"){//如果当前是'+'或'-'\n            if(c == '+') sign = 1; //1表示正数\n            else sign = -1;//-1表示负数\n        }//其他情况不用写出来，因为到了end状态后就只可能到达end状态，不会到达任何有用的状态，或者说除了上面两个状态之外的状态不需要做任何的操作\n    }\n    \n};\n\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        Automaton automaton;\n        for(char c:str)\n            automaton.getc(c);\n        return automaton.sign * automaton.ans;//与符号位相乘，决定他的正负\n    }\n};\n```\n\n\n\n转载自[leetcode](leetcode%C2%A0https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/%C2%A0leetcode)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","source":"_posts/LeetCode-字符串转换整数-atoi.md","raw":"---\ntitle: LeetCode 字符串转换整数 (atoi)\ndate: 2020-05-05 13:45:55\ntags: LeetCode\n---\n\n# LeetCode 字符串转换整数 (atoi)\n\n## 题目描述\n\n请你来实现一个 `atoi` 函数，使其能将字符串转换成整数。\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：\n\n- 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。\n- 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。\n- 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0 。\n\n**提示：**\n\n- 本题中的空白字符只包括空格字符 `' '` 。\n- 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n**示例 1:**\n\n```\n输入: \"42\"\n输出: 42\n```\n\n**示例 2:**\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n**示例 3:**\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n```\n\n**示例 4:**\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n**示例 5:**\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n```\n\n\n\n其实这个就是官方题解，我觉得很巧妙，所以来分享一下\n\n他采用了自动机的方法（本人刚好在学编译原理哈哈哈），将所有的状态分为四类 start(起始状态)，signed（'+'或'-'号）,number(数字)，end(结束状态)\n\n具体的状态之间的转换如下表\n\n|               | ' '   | +/-    | number    | other |\n| ------------- | ----- | ------ | --------- | ----- |\n| **start**     | start | signed | in_number | end   |\n| **signed**    | end   | end    | in_number | end   |\n| **in_number** | end   | end    | in_number | end   |\n| **end**       | end   | end    | end       | end   |\n\n\n\n\n\n```c++\nclass Automaton {\n    string state = \"start\";\n    unordered_map<string, vector<string>> table = {//状态转换表，与上表对应\n        {\"start\", {\"start\", \"signed\", \"in_number\", \"end\"}},\n        {\"signed\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"in_number\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"end\", {\"end\", \"end\", \"end\", \"end\"}}\n    };\n    int getchar(char c){//与上面的无向图对应，决定了无向图二维下标\n        if(isspace(c)) return 0;//为空格\n        if(c == '+' or c == '-') return 1;//为 '+','-'\n        if(isdigit(c)) return 2;//为数字\n        return  3;//为其他\n    }\npublic:\n    int sign = 1;//初始为1，因为当没有'+','-'号时默认是正数\n    long long ans = 0;\n    void getc(char c){\n        state = table[state][getchar(c)];//找到对应的下一个状态\n        if(state == \"in_number\"){//判断如果是数字，就将当前数字加入结果中\n            ans = ans * 10 + c - '0';\n            ans = sign == 1 ? min((long long)INT_MAX, ans) : min(-(long long)INT_MIN, ans);//判断是否超出范围是正数则与INT_MAX比较，负数则与INT_MIN比较\n        }\n        if(state == \"signed\"){//如果当前是'+'或'-'\n            if(c == '+') sign = 1; //1表示正数\n            else sign = -1;//-1表示负数\n        }//其他情况不用写出来，因为到了end状态后就只可能到达end状态，不会到达任何有用的状态，或者说除了上面两个状态之外的状态不需要做任何的操作\n    }\n    \n};\n\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        Automaton automaton;\n        for(char c:str)\n            automaton.getc(c);\n        return automaton.sign * automaton.ans;//与符号位相乘，决定他的正负\n    }\n};\n```\n\n\n\n转载自[leetcode](leetcode%C2%A0https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/%C2%A0leetcode)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","slug":"LeetCode-字符串转换整数-atoi","published":1,"updated":"2020-05-05T05:46:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7h00047suu7tx7cv8i","content":"<h1><span id=\"leetcode-字符串转换整数-atoi\">LeetCode 字符串转换整数 (atoi)</span></h1><h2><span id=\"题目描述\">题目描述</span></h2><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p>\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p>\n<ul>\n<li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li>\n<li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li>\n<li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li>\n</ul>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> 。</li>\n<li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li>\n</ul>\n<p><strong>示例 1:</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入: &quot;42&quot;</span><br><span class=\"line\">输出: 42</span><br></pre>\n<p><strong>示例 2:</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入: &quot;   -42&quot;</span><br><span class=\"line\">输出: -42</span><br><span class=\"line\">解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。</span><br><span class=\"line\">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre>\n<p><strong>示例 3:</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入: &quot;4193 with words&quot;</span><br><span class=\"line\">输出: 4193</span><br><span class=\"line\">解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。</span><br></pre>\n<p><strong>示例 4:</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入: &quot;words and 987&quot;</span><br><span class=\"line\">输出: 0</span><br><span class=\"line\">解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。</span><br><span class=\"line\">     因此无法执行有效的转换。</span><br></pre>\n<p><strong>示例 5:</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入: &quot;-91283472332&quot;</span><br><span class=\"line\">输出: -2147483648</span><br><span class=\"line\">解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 </span><br><span class=\"line\">     因此返回 INT_MIN (−231) 。</span><br></pre>\n<p>其实这个就是官方题解，我觉得很巧妙，所以来分享一下</p>\n<p>他采用了自动机的方法（本人刚好在学编译原理哈哈哈），将所有的状态分为四类 start(起始状态)，signed（’+’或’-‘号）,number(数字)，end(结束状态)</p>\n<p>具体的状态之间的转换如下表</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>‘ ‘</th>\n<th>+/-</th>\n<th>number</th>\n<th>other</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>start</strong></td>\n<td>start</td>\n<td>signed</td>\n<td>in_number</td>\n<td>end</td>\n</tr>\n<tr>\n<td><strong>signed</strong></td>\n<td>end</td>\n<td>end</td>\n<td>in_number</td>\n<td>end</td>\n</tr>\n<tr>\n<td><strong>in_number</strong></td>\n<td>end</td>\n<td>end</td>\n<td>in_number</td>\n<td>end</td>\n</tr>\n<tr>\n<td><strong>end</strong></td>\n<td>end</td>\n<td>end</td>\n<td>end</td>\n<td>end</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Automaton</span> &#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> state = <span class=\"string\">&quot;start&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; table = &#123;<span class=\"comment\">//状态转换表，与上表对应</span></span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;start&quot;</span>, &#123;<span class=\"string\">&quot;start&quot;</span>, <span class=\"string\">&quot;signed&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;signed&quot;</span>, &#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;in_number&quot;</span>, &#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;end&quot;</span>, &#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getchar</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;<span class=\"comment\">//与上面的无向图对应，决定了无向图二维下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isspace</span>(c)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//为空格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;+&#x27;</span> <span class=\"keyword\">or</span> c == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//为 &#x27;+&#x27;,&#x27;-&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isdigit</span>(c)) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;<span class=\"comment\">//为数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"number\">3</span>;<span class=\"comment\">//为其他</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;<span class=\"comment\">//初始为1，因为当没有&#x27;+&#x27;,&#x27;-&#x27;号时默认是正数</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getc</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">        state = table[state][getchar(c)];<span class=\"comment\">//找到对应的下一个状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state == <span class=\"string\">&quot;in_number&quot;</span>)&#123;<span class=\"comment\">//判断如果是数字，就将当前数字加入结果中</span></span><br><span class=\"line\">            ans = ans * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            ans = sign == <span class=\"number\">1</span> ? min((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)INT_MAX, ans) : min(-(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)INT_MIN, ans);<span class=\"comment\">//判断是否超出范围是正数则与INT_MAX比较，负数则与INT_MIN比较</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state == <span class=\"string\">&quot;signed&quot;</span>)&#123;<span class=\"comment\">//如果当前是&#x27;+&#x27;或&#x27;-&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;+&#x27;</span>) sign = <span class=\"number\">1</span>; <span class=\"comment\">//1表示正数</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> sign = <span class=\"number\">-1</span>;<span class=\"comment\">//-1表示负数</span></span><br><span class=\"line\">        &#125;<span class=\"comment\">//其他情况不用写出来，因为到了end状态后就只可能到达end状态，不会到达任何有用的状态，或者说除了上面两个状态之外的状态不需要做任何的操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span> </span>&#123;</span><br><span class=\"line\">        Automaton automaton;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c:str)</span><br><span class=\"line\">            automaton.getc(c);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> automaton.sign * automaton.ans;<span class=\"comment\">//与符号位相乘，决定他的正负</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre>\n<p>转载自<a href=\"leetcode%C2%A0https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/%C2%A0leetcode\">leetcode</a></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"LeetCode-字符串转换整数-atoi\"><a href=\"#LeetCode-字符串转换整数-atoi\" class=\"headerlink\" title=\"LeetCode 字符串转换整数 (atoi)\"></a>LeetCode 字符串转换整数 (atoi)</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p>\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p>\n<ul>\n<li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li>\n<li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li>\n<li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li>\n</ul>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> 。</li>\n<li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li>\n</ul>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;42&quot;</span><br><span class=\"line\">输出: 42</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;   -42&quot;</span><br><span class=\"line\">输出: -42</span><br><span class=\"line\">解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。</span><br><span class=\"line\">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;4193 with words&quot;</span><br><span class=\"line\">输出: 4193</span><br><span class=\"line\">解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 4:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;words and 987&quot;</span><br><span class=\"line\">输出: 0</span><br><span class=\"line\">解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。</span><br><span class=\"line\">     因此无法执行有效的转换。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 5:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;-91283472332&quot;</span><br><span class=\"line\">输出: -2147483648</span><br><span class=\"line\">解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 </span><br><span class=\"line\">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></table></figure>\n<p>其实这个就是官方题解，我觉得很巧妙，所以来分享一下</p>\n<p>他采用了自动机的方法（本人刚好在学编译原理哈哈哈），将所有的状态分为四类 start(起始状态)，signed（’+’或’-‘号）,number(数字)，end(结束状态)</p>\n<p>具体的状态之间的转换如下表</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>‘ ‘</th>\n<th>+/-</th>\n<th>number</th>\n<th>other</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>start</strong></td>\n<td>start</td>\n<td>signed</td>\n<td>in_number</td>\n<td>end</td>\n</tr>\n<tr>\n<td><strong>signed</strong></td>\n<td>end</td>\n<td>end</td>\n<td>in_number</td>\n<td>end</td>\n</tr>\n<tr>\n<td><strong>in_number</strong></td>\n<td>end</td>\n<td>end</td>\n<td>in_number</td>\n<td>end</td>\n</tr>\n<tr>\n<td><strong>end</strong></td>\n<td>end</td>\n<td>end</td>\n<td>end</td>\n<td>end</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Automaton</span> &#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> state = <span class=\"string\">&quot;start&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; table = &#123;<span class=\"comment\">//状态转换表，与上表对应</span></span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;start&quot;</span>, &#123;<span class=\"string\">&quot;start&quot;</span>, <span class=\"string\">&quot;signed&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;signed&quot;</span>, &#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;in_number&quot;</span>, &#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;end&quot;</span>, &#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getchar</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;<span class=\"comment\">//与上面的无向图对应，决定了无向图二维下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isspace</span>(c)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//为空格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;+&#x27;</span> <span class=\"keyword\">or</span> c == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//为 &#x27;+&#x27;,&#x27;-&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isdigit</span>(c)) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;<span class=\"comment\">//为数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"number\">3</span>;<span class=\"comment\">//为其他</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;<span class=\"comment\">//初始为1，因为当没有&#x27;+&#x27;,&#x27;-&#x27;号时默认是正数</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getc</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">        state = table[state][getchar(c)];<span class=\"comment\">//找到对应的下一个状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state == <span class=\"string\">&quot;in_number&quot;</span>)&#123;<span class=\"comment\">//判断如果是数字，就将当前数字加入结果中</span></span><br><span class=\"line\">            ans = ans * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            ans = sign == <span class=\"number\">1</span> ? min((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)INT_MAX, ans) : min(-(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)INT_MIN, ans);<span class=\"comment\">//判断是否超出范围是正数则与INT_MAX比较，负数则与INT_MIN比较</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state == <span class=\"string\">&quot;signed&quot;</span>)&#123;<span class=\"comment\">//如果当前是&#x27;+&#x27;或&#x27;-&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;+&#x27;</span>) sign = <span class=\"number\">1</span>; <span class=\"comment\">//1表示正数</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> sign = <span class=\"number\">-1</span>;<span class=\"comment\">//-1表示负数</span></span><br><span class=\"line\">        &#125;<span class=\"comment\">//其他情况不用写出来，因为到了end状态后就只可能到达end状态，不会到达任何有用的状态，或者说除了上面两个状态之外的状态不需要做任何的操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span> </span>&#123;</span><br><span class=\"line\">        Automaton automaton;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c:str)</span><br><span class=\"line\">            automaton.getc(c);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> automaton.sign * automaton.ans;<span class=\"comment\">//与符号位相乘，决定他的正负</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>转载自<a href=\"leetcode%C2%A0https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/%C2%A0leetcode\">leetcode</a></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n"},{"title":"JAVA基础知识","date":"2019-09-17T02:56:16.000Z","_content":"本人刚学JAVA，写个博客来给自己巩固一下基本知识 (=・ω・=)\n\n\n# 1.JAVA数据输出格式的控制\n```javascript\n String.format.(\"格式串\"，数值数据）//方法一\n System.out.print(\"格式串\"，数值数据) //方法二\n```\n# 2.用float时数后要加F\n```javascript\nfloat a=3.4F;\n```\n# 3.数字不能自动转化为Boolean\n# 4.字符检测的方法\n```javascript\nchar ch='a';\nCharacter.isLetter(ch) -- ch是否是字母\nCharacter.isDigit(ch)  -- ch是否是数字\nCharacter.isLetterOrDigit(ch) -- ch是否是字母或数字\nCharacter.isWhitespace(ch) -- ch是否是空格\nCharacter.isLowerCase(ch) -- ch是否是小写字母\nCharacter.isUpperCase(ch) -- ch是否是大写字母\n```\n# 5.自定义符号常量加final\n```javascript\nfinal double PI=3.14159;\n```\n# 6.在方法外定义的变量会自动初始化\n# 7.String加其他类型变量时会将其他类型转化为字符类型\n# 8.字符串转数值\n方法1：\n```javascript\n int i = Integer.parseInt(\"123\");       (常用)\n double d = Double.parseDouble(\"1.23\");\n```\n方法2：\n```javascript\n int i =Integer.valueOf(\"123\").intValue(); \n```\n# 9.数值转字符串\n 方法1： \n ```javascript\n String s=String.valueOf(value); \n ```\n 其中value为任一种数字类型。\n\n方法2：\n```javascript\n String s = Integer.toString(123);\n```\n方法3：最直接\n```javascript\nString s = \"\" + value;  其中value为任意一种数字类型。\n```\n # 10.字符数组转字符串\n ```javascript\n char[ ] c={'a','b','c'};\nString str=new String(c);\n ```\n # 11.字符串转字符数组  \n```javascript\nString str=\"abc\";\nchar[ ]  c=str.toCharArray(); \n```\n # 12.\"==\"和equals的区别\n```javascript\nString s1=\"abc\";  //方法以\nString s2=\"abc\";\nString s3=new String(\"abc\"); //方法二\nString s4=new String(\"abc\");\nSystem.out.println(s1==s2); \nSystem.out.println(s1.equals(s2));\nSystem.out.println(s3==s4);\nSystem.out.println(s3.equals(s4));            \n```\n得到的结果为true,true,false,true.\n方法一属于常量式创建，会存放一个在一个叫String pool 的地方，再次创建时会直接引用存在的相同变量\n而方法二属于对象式创建，是运行时在Heap内存里面创建对象，每new一次都一定会创建对象\n而“==”是比较两者的地址是否一样，所以第三个为false\nequals是比较变量是否一样。\n# 13.%也能用于浮点型变量\n# 14.类型转换\n当没有信息丢失时，变量可被自动升级为一个较长的形式（如：int至long的升级）\n```javascript\nlong bigval = 6;  // 6 is an int type, OK\nint smallval = 99L;  // 99L is a long, error \ndouble z = 12.414F;  // 12.414F is float, OK\nfloat z1 = 12.414;  // 12.414 is double, error\n//但升级也可能会导致出错\nshort  a，b，c\na=1；b=2；c= a+b；//上述程序会因为在操作short之前提升每个short至int而出错。\n//然而，如果c被声明为一个int，或按如下操作进行类型转换：\nc = (short)(a+b);//则上述代码将会成功通过\n```\n我的个人博客 amazingz6.github.io\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n我的bilibili https://space.bilibili.com/66908429\n\n\n\n\n\n\n\n \n\n\n \t\n\n\n\n\n\n\n\n\n\n \n\n\n \t\n\n","source":"_posts/JAVA基础知识.md","raw":"---\ntitle: JAVA基础知识\ndate: 2019-09-17 10:56:16\ntags: JAVA基础知识\n---\n本人刚学JAVA，写个博客来给自己巩固一下基本知识 (=・ω・=)\n\n\n# 1.JAVA数据输出格式的控制\n```javascript\n String.format.(\"格式串\"，数值数据）//方法一\n System.out.print(\"格式串\"，数值数据) //方法二\n```\n# 2.用float时数后要加F\n```javascript\nfloat a=3.4F;\n```\n# 3.数字不能自动转化为Boolean\n# 4.字符检测的方法\n```javascript\nchar ch='a';\nCharacter.isLetter(ch) -- ch是否是字母\nCharacter.isDigit(ch)  -- ch是否是数字\nCharacter.isLetterOrDigit(ch) -- ch是否是字母或数字\nCharacter.isWhitespace(ch) -- ch是否是空格\nCharacter.isLowerCase(ch) -- ch是否是小写字母\nCharacter.isUpperCase(ch) -- ch是否是大写字母\n```\n# 5.自定义符号常量加final\n```javascript\nfinal double PI=3.14159;\n```\n# 6.在方法外定义的变量会自动初始化\n# 7.String加其他类型变量时会将其他类型转化为字符类型\n# 8.字符串转数值\n方法1：\n```javascript\n int i = Integer.parseInt(\"123\");       (常用)\n double d = Double.parseDouble(\"1.23\");\n```\n方法2：\n```javascript\n int i =Integer.valueOf(\"123\").intValue(); \n```\n# 9.数值转字符串\n 方法1： \n ```javascript\n String s=String.valueOf(value); \n ```\n 其中value为任一种数字类型。\n\n方法2：\n```javascript\n String s = Integer.toString(123);\n```\n方法3：最直接\n```javascript\nString s = \"\" + value;  其中value为任意一种数字类型。\n```\n # 10.字符数组转字符串\n ```javascript\n char[ ] c={'a','b','c'};\nString str=new String(c);\n ```\n # 11.字符串转字符数组  \n```javascript\nString str=\"abc\";\nchar[ ]  c=str.toCharArray(); \n```\n # 12.\"==\"和equals的区别\n```javascript\nString s1=\"abc\";  //方法以\nString s2=\"abc\";\nString s3=new String(\"abc\"); //方法二\nString s4=new String(\"abc\");\nSystem.out.println(s1==s2); \nSystem.out.println(s1.equals(s2));\nSystem.out.println(s3==s4);\nSystem.out.println(s3.equals(s4));            \n```\n得到的结果为true,true,false,true.\n方法一属于常量式创建，会存放一个在一个叫String pool 的地方，再次创建时会直接引用存在的相同变量\n而方法二属于对象式创建，是运行时在Heap内存里面创建对象，每new一次都一定会创建对象\n而“==”是比较两者的地址是否一样，所以第三个为false\nequals是比较变量是否一样。\n# 13.%也能用于浮点型变量\n# 14.类型转换\n当没有信息丢失时，变量可被自动升级为一个较长的形式（如：int至long的升级）\n```javascript\nlong bigval = 6;  // 6 is an int type, OK\nint smallval = 99L;  // 99L is a long, error \ndouble z = 12.414F;  // 12.414F is float, OK\nfloat z1 = 12.414;  // 12.414 is double, error\n//但升级也可能会导致出错\nshort  a，b，c\na=1；b=2；c= a+b；//上述程序会因为在操作short之前提升每个short至int而出错。\n//然而，如果c被声明为一个int，或按如下操作进行类型转换：\nc = (short)(a+b);//则上述代码将会成功通过\n```\n我的个人博客 amazingz6.github.io\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n我的bilibili https://space.bilibili.com/66908429\n\n\n\n\n\n\n\n \n\n\n \t\n\n\n\n\n\n\n\n\n\n \n\n\n \t\n\n","slug":"JAVA基础知识","published":1,"updated":"2020-05-04T08:09:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7k00067suu3ews3ee4","content":"<p>本人刚学JAVA，写个博客来给自己巩固一下基本知识 (=・ω・=)</p>\n<h1><span id=\"1java数据输出格式的控制\">1.JAVA数据输出格式的控制</span></h1><pre class=\"highlight\"><span class=\"line\"><span class=\"built_in\">String</span>.format.(<span class=\"string\">&quot;格式串&quot;</span>，数值数据）<span class=\"comment\">//方法一</span></span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot;格式串&quot;</span>，数值数据) <span class=\"comment\">//方法二</span></span><br></pre>\n<h1><span id=\"2用float时数后要加f\">2.用float时数后要加F</span></h1><pre class=\"highlight\"><span class=\"line\">float a=<span class=\"number\">3.</span>4F;</span><br></pre>\n<h1><span id=\"3数字不能自动转化为boolean\">3.数字不能自动转化为Boolean</span></h1><h1><span id=\"4字符检测的方法\">4.字符检测的方法</span></h1><pre class=\"highlight\"><span class=\"line\">char ch=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">Character.isLetter(ch) -- ch是否是字母</span><br><span class=\"line\">Character.isDigit(ch)  -- ch是否是数字</span><br><span class=\"line\">Character.isLetterOrDigit(ch) -- ch是否是字母或数字</span><br><span class=\"line\">Character.isWhitespace(ch) -- ch是否是空格</span><br><span class=\"line\">Character.isLowerCase(ch) -- ch是否是小写字母</span><br><span class=\"line\">Character.isUpperCase(ch) -- ch是否是大写字母</span><br></pre>\n<h1><span id=\"5自定义符号常量加final\">5.自定义符号常量加final</span></h1><pre class=\"highlight\"><span class=\"line\">final double PI=<span class=\"number\">3.14159</span>;</span><br></pre>\n<h1><span id=\"6在方法外定义的变量会自动初始化\">6.在方法外定义的变量会自动初始化</span></h1><h1><span id=\"7string加其他类型变量时会将其他类型转化为字符类型\">7.String加其他类型变量时会将其他类型转化为字符类型</span></h1><h1><span id=\"8字符串转数值\">8.字符串转数值</span></h1><p>方法1：<br><pre class=\"highlight\"><span class=\"line\">int i = Integer.parseInt(<span class=\"string\">&quot;123&quot;</span>);       (常用)</span><br><span class=\"line\">double d = Double.parseDouble(<span class=\"string\">&quot;1.23&quot;</span>);</span><br></pre><br>方法2：<br><pre class=\"highlight\"><span class=\"line\">int i =Integer.valueOf(<span class=\"string\">&quot;123&quot;</span>).intValue(); </span><br></pre></p>\n<h1><span id=\"9数值转字符串\">9.数值转字符串</span></h1><p> 方法1：<br> <pre class=\"highlight\"><span class=\"line\"><span class=\"built_in\">String</span> s=<span class=\"built_in\">String</span>.valueOf(value); </span><br></pre><br> 其中value为任一种数字类型。</p>\n<p>方法2：<br><pre class=\"highlight\"><span class=\"line\"><span class=\"built_in\">String</span> s = Integer.toString(<span class=\"number\">123</span>);</span><br></pre><br>方法3：最直接<br><pre class=\"highlight\"><span class=\"line\"><span class=\"built_in\">String</span> s = <span class=\"string\">&quot;&quot;</span> + value;  其中value为任意一种数字类型。</span><br></pre></p>\n<h1><span id=\"10字符数组转字符串\">10.字符数组转字符串</span></h1> <pre class=\"highlight\"><span class=\"line\"> char[ ] c=&#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">String</span> str=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(c);</span><br></pre>\n<h1><span id=\"11字符串转字符数组\">11.字符串转字符数组</span></h1><pre class=\"highlight\"><span class=\"line\"><span class=\"built_in\">String</span> str=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">char[ ]  c=str.toCharArray(); </span><br></pre>\n<h1><span id=\"12和equals的区别\">12.”==”和equals的区别</span></h1><pre class=\"highlight\"><span class=\"line\"><span class=\"built_in\">String</span> s1=<span class=\"string\">&quot;abc&quot;</span>;  <span class=\"comment\">//方法以</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> s2=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> s3=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;abc&quot;</span>); <span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> s4=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">System.out.println(s1==s2); </span><br><span class=\"line\">System.out.println(s1.equals(s2));</span><br><span class=\"line\">System.out.println(s3==s4);</span><br><span class=\"line\">System.out.println(s3.equals(s4));            </span><br></pre>\n<p>得到的结果为true,true,false,true.<br>方法一属于常量式创建，会存放一个在一个叫String pool 的地方，再次创建时会直接引用存在的相同变量<br>而方法二属于对象式创建，是运行时在Heap内存里面创建对象，每new一次都一定会创建对象<br>而“==”是比较两者的地址是否一样，所以第三个为false<br>equals是比较变量是否一样。</p>\n<h1><span id=\"13也能用于浮点型变量\">13.%也能用于浮点型变量</span></h1><h1><span id=\"14类型转换\">14.类型转换</span></h1><p>当没有信息丢失时，变量可被自动升级为一个较长的形式（如：int至long的升级）<br><pre class=\"highlight\"><span class=\"line\">long bigval = <span class=\"number\">6</span>;  <span class=\"comment\">// 6 is an int type, OK</span></span><br><span class=\"line\">int smallval = 99L;  <span class=\"comment\">// 99L is a long, error </span></span><br><span class=\"line\">double z = <span class=\"number\">12.</span>414F;  <span class=\"comment\">// 12.414F is float, OK</span></span><br><span class=\"line\">float z1 = <span class=\"number\">12.414</span>;  <span class=\"comment\">// 12.414 is double, error</span></span><br><span class=\"line\"><span class=\"comment\">//但升级也可能会导致出错</span></span><br><span class=\"line\">short  a，b，c</span><br><span class=\"line\">a=<span class=\"number\">1</span>；b=<span class=\"number\">2</span>；c= a+b；<span class=\"comment\">//上述程序会因为在操作short之前提升每个short至int而出错。</span></span><br><span class=\"line\"><span class=\"comment\">//然而，如果c被声明为一个int，或按如下操作进行类型转换：</span></span><br><span class=\"line\">c = (short)(a+b);<span class=\"comment\">//则上述代码将会成功通过</span></span><br></pre><br>我的个人博客 amazingz6.github.io<br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a><br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本人刚学JAVA，写个博客来给自己巩固一下基本知识 (=・ω・=)</p>\n<h1 id=\"1-JAVA数据输出格式的控制\"><a href=\"#1-JAVA数据输出格式的控制\" class=\"headerlink\" title=\"1.JAVA数据输出格式的控制\"></a>1.JAVA数据输出格式的控制</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.format.(<span class=\"string\">&quot;格式串&quot;</span>，数值数据）<span class=\"comment\">//方法一</span></span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot;格式串&quot;</span>，数值数据) <span class=\"comment\">//方法二</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-用float时数后要加F\"><a href=\"#2-用float时数后要加F\" class=\"headerlink\" title=\"2.用float时数后要加F\"></a>2.用float时数后要加F</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float a=<span class=\"number\">3.</span>4F;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-数字不能自动转化为Boolean\"><a href=\"#3-数字不能自动转化为Boolean\" class=\"headerlink\" title=\"3.数字不能自动转化为Boolean\"></a>3.数字不能自动转化为Boolean</h1><h1 id=\"4-字符检测的方法\"><a href=\"#4-字符检测的方法\" class=\"headerlink\" title=\"4.字符检测的方法\"></a>4.字符检测的方法</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char ch=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">Character.isLetter(ch) -- ch是否是字母</span><br><span class=\"line\">Character.isDigit(ch)  -- ch是否是数字</span><br><span class=\"line\">Character.isLetterOrDigit(ch) -- ch是否是字母或数字</span><br><span class=\"line\">Character.isWhitespace(ch) -- ch是否是空格</span><br><span class=\"line\">Character.isLowerCase(ch) -- ch是否是小写字母</span><br><span class=\"line\">Character.isUpperCase(ch) -- ch是否是大写字母</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-自定义符号常量加final\"><a href=\"#5-自定义符号常量加final\" class=\"headerlink\" title=\"5.自定义符号常量加final\"></a>5.自定义符号常量加final</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final double PI=<span class=\"number\">3.14159</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-在方法外定义的变量会自动初始化\"><a href=\"#6-在方法外定义的变量会自动初始化\" class=\"headerlink\" title=\"6.在方法外定义的变量会自动初始化\"></a>6.在方法外定义的变量会自动初始化</h1><h1 id=\"7-String加其他类型变量时会将其他类型转化为字符类型\"><a href=\"#7-String加其他类型变量时会将其他类型转化为字符类型\" class=\"headerlink\" title=\"7.String加其他类型变量时会将其他类型转化为字符类型\"></a>7.String加其他类型变量时会将其他类型转化为字符类型</h1><h1 id=\"8-字符串转数值\"><a href=\"#8-字符串转数值\" class=\"headerlink\" title=\"8.字符串转数值\"></a>8.字符串转数值</h1><p>方法1：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = Integer.parseInt(<span class=\"string\">&quot;123&quot;</span>);       (常用)</span><br><span class=\"line\">double d = Double.parseDouble(<span class=\"string\">&quot;1.23&quot;</span>);</span><br></pre></td></tr></table></figure><br>方法2：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i =Integer.valueOf(<span class=\"string\">&quot;123&quot;</span>).intValue(); </span><br></pre></td></tr></table></figure></p>\n<h1 id=\"9-数值转字符串\"><a href=\"#9-数值转字符串\" class=\"headerlink\" title=\"9.数值转字符串\"></a>9.数值转字符串</h1><p> 方法1：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> s=<span class=\"built_in\">String</span>.valueOf(value); </span><br></pre></td></tr></table></figure><br> 其中value为任一种数字类型。</p>\n<p>方法2：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> s = Integer.toString(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure><br>方法3：最直接<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> s = <span class=\"string\">&quot;&quot;</span> + value;  其中value为任意一种数字类型。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"10-字符数组转字符串\"><a href=\"#10-字符数组转字符串\" class=\"headerlink\" title=\"10.字符数组转字符串\"></a>10.字符数组转字符串</h1> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> char[ ] c=&#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">String</span> str=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(c);</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-字符串转字符数组\"><a href=\"#11-字符串转字符数组\" class=\"headerlink\" title=\"11.字符串转字符数组\"></a>11.字符串转字符数组</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> str=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">char[ ]  c=str.toCharArray(); </span><br></pre></td></tr></table></figure>\n<h1 id=\"12-”-”和equals的区别\"><a href=\"#12-”-”和equals的区别\" class=\"headerlink\" title=\"12.”==”和equals的区别\"></a>12.”==”和equals的区别</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> s1=<span class=\"string\">&quot;abc&quot;</span>;  <span class=\"comment\">//方法以</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> s2=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> s3=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;abc&quot;</span>); <span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> s4=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">System.out.println(s1==s2); </span><br><span class=\"line\">System.out.println(s1.equals(s2));</span><br><span class=\"line\">System.out.println(s3==s4);</span><br><span class=\"line\">System.out.println(s3.equals(s4));            </span><br></pre></td></tr></table></figure>\n<p>得到的结果为true,true,false,true.<br>方法一属于常量式创建，会存放一个在一个叫String pool 的地方，再次创建时会直接引用存在的相同变量<br>而方法二属于对象式创建，是运行时在Heap内存里面创建对象，每new一次都一定会创建对象<br>而“==”是比较两者的地址是否一样，所以第三个为false<br>equals是比较变量是否一样。</p>\n<h1 id=\"13-也能用于浮点型变量\"><a href=\"#13-也能用于浮点型变量\" class=\"headerlink\" title=\"13.%也能用于浮点型变量\"></a>13.%也能用于浮点型变量</h1><h1 id=\"14-类型转换\"><a href=\"#14-类型转换\" class=\"headerlink\" title=\"14.类型转换\"></a>14.类型转换</h1><p>当没有信息丢失时，变量可被自动升级为一个较长的形式（如：int至long的升级）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long bigval = <span class=\"number\">6</span>;  <span class=\"comment\">// 6 is an int type, OK</span></span><br><span class=\"line\">int smallval = 99L;  <span class=\"comment\">// 99L is a long, error </span></span><br><span class=\"line\">double z = <span class=\"number\">12.</span>414F;  <span class=\"comment\">// 12.414F is float, OK</span></span><br><span class=\"line\">float z1 = <span class=\"number\">12.414</span>;  <span class=\"comment\">// 12.414 is double, error</span></span><br><span class=\"line\"><span class=\"comment\">//但升级也可能会导致出错</span></span><br><span class=\"line\">short  a，b，c</span><br><span class=\"line\">a=<span class=\"number\">1</span>；b=<span class=\"number\">2</span>；c= a+b；<span class=\"comment\">//上述程序会因为在操作short之前提升每个short至int而出错。</span></span><br><span class=\"line\"><span class=\"comment\">//然而，如果c被声明为一个int，或按如下操作进行类型转换：</span></span><br><span class=\"line\">c = (short)(a+b);<span class=\"comment\">//则上述代码将会成功通过</span></span><br></pre></td></tr></table></figure><br>我的个人博客 amazingz6.github.io<br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a><br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a></p>\n"},{"title":"Z字形变换","date":"2022-03-10T14:14:48.000Z","_content":"\n# [6. Z 字形变换](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zigzag-conversion\n\n题目描述：\n\n将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"PAYPALISHIRING\" 行数为 3 时，排列如下：\n\nP   A   H   N\nA P L S I I G\nY   I   R\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"PAHNAPLSIIGYIR\"。\n\n请你实现这个将字符串进行指定行数变换的函数：\n\nstring convert(string s, int numRows);\n\n示例 1：\n\n输入：s = \"PAYPALISHIRING\", numRows = 3\n输出：\"PAHNAPLSIIGYIR\"\n示例 2：\n输入：s = \"PAYPALISHIRING\", numRows = 4\n输出：\"PINALSIGYAHRPI\"\n解释：\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n示例 3：\n\n输入：s = \"A\", numRows = 1\n输出：\"A\"\n\n\n提示：\n\n1 <= s.length <= 1000\ns 由英文字母（小写和大写）、',' 和 '.' 组成\n1 <= numRows <= 1000\n\n\n\n题解：我的想法是，既然最后是按行来读取，那么就可以依次获取每一行的数据放入结果中，那么就需要给每一个元素来一个编号，编号就代表着这个元素的行数，所以可以用一个和s一样长的数组来字母每个元素在那一行，而他们的行数是一串循环的数字，如当总共三行时，行数就依次为0，1，2，1，0，（从0开始），c++代码如下\n\n```c++\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n        if(numRows == 1) return s;\n        int len = s.length();\n        int x = 0;\n        int flag = 0;\n        int p[len];\n        string ans = \"\";\n        for(int i = 0; i < len; i++){//这里构造行数数组\n            if(flag == 0)\n                p[i] = x++;\n            else p[i] = x--;\n            if(x == numRows - 1) flag = 1;\n            else if(x == 0) flag = 0;\n        }\n        for(int k = 0; k < numRows; k++){\n            for(int i = 0; i < len; i++){\n                if(p[i] == k)\n                    ans += s[i];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n","source":"_posts/Z字形变换.md","raw":"---\ntitle: Z字形变换\ndate: 2022-03-10 22:14:48\ntags: LeetCode\n---\n\n# [6. Z 字形变换](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zigzag-conversion\n\n题目描述：\n\n将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"PAYPALISHIRING\" 行数为 3 时，排列如下：\n\nP   A   H   N\nA P L S I I G\nY   I   R\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"PAHNAPLSIIGYIR\"。\n\n请你实现这个将字符串进行指定行数变换的函数：\n\nstring convert(string s, int numRows);\n\n示例 1：\n\n输入：s = \"PAYPALISHIRING\", numRows = 3\n输出：\"PAHNAPLSIIGYIR\"\n示例 2：\n输入：s = \"PAYPALISHIRING\", numRows = 4\n输出：\"PINALSIGYAHRPI\"\n解释：\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n示例 3：\n\n输入：s = \"A\", numRows = 1\n输出：\"A\"\n\n\n提示：\n\n1 <= s.length <= 1000\ns 由英文字母（小写和大写）、',' 和 '.' 组成\n1 <= numRows <= 1000\n\n\n\n题解：我的想法是，既然最后是按行来读取，那么就可以依次获取每一行的数据放入结果中，那么就需要给每一个元素来一个编号，编号就代表着这个元素的行数，所以可以用一个和s一样长的数组来字母每个元素在那一行，而他们的行数是一串循环的数字，如当总共三行时，行数就依次为0，1，2，1，0，（从0开始），c++代码如下\n\n```c++\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n        if(numRows == 1) return s;\n        int len = s.length();\n        int x = 0;\n        int flag = 0;\n        int p[len];\n        string ans = \"\";\n        for(int i = 0; i < len; i++){//这里构造行数数组\n            if(flag == 0)\n                p[i] = x++;\n            else p[i] = x--;\n            if(x == numRows - 1) flag = 1;\n            else if(x == 0) flag = 0;\n        }\n        for(int k = 0; k < numRows; k++){\n            for(int i = 0; i < len; i++){\n                if(p[i] == k)\n                    ans += s[i];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n","slug":"Z字形变换","published":1,"updated":"2022-03-10T14:28:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7k00077suu9e8d9osv","content":"<h1><span id=\"6-z-字形变换\"></span></h1><p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zigzag-conversion\">https://leetcode-cn.com/problems/zigzag-conversion</a></p>\n<p>题目描述：</p>\n<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p>\n<p>P   A   H   N<br>A P L S I I G<br>Y   I   R<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p>string convert(string s, int numRows);</p>\n<p>示例 1：</p>\n<p>输入：s = “PAYPALISHIRING”, numRows = 3<br>输出：”PAHNAPLSIIGYIR”<br>示例 2：<br>输入：s = “PAYPALISHIRING”, numRows = 4<br>输出：”PINALSIGYAHRPI”<br>解释：<br>P     I    N<br>A   L S  I G<br>Y A   H R<br>P     I<br>示例 3：</p>\n<p>输入：s = “A”, numRows = 1<br>输出：”A”</p>\n<p>提示：</p>\n<p>1 &lt;= s.length &lt;= 1000<br>s 由英文字母（小写和大写）、’,’ 和 ‘.’ 组成<br>1 &lt;= numRows &lt;= 1000</p>\n<p>题解：我的想法是，既然最后是按行来读取，那么就可以依次获取每一行的数据放入结果中，那么就需要给每一个元素来一个编号，编号就代表着这个元素的行数，所以可以用一个和s一样长的数组来字母每个元素在那一行，而他们的行数是一串循环的数字，如当总共三行时，行数就依次为0，1，2，1，0，（从0开始），c++代码如下</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numRows == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p[len];</span><br><span class=\"line\">        <span class=\"built_in\">string</span> ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;<span class=\"comment\">//这里构造行数数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">                p[i] = x++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> p[i] = x--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == numRows - <span class=\"number\">1</span>) flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>) flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; numRows; k++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i] == k)</span><br><span class=\"line\">                    ans += s[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"6-Z-字形变换\"><a href=\"#6-Z-字形变换\" class=\"headerlink\" title=\"6. Z 字形变换\"></a><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\">6. Z 字形变换</a></h1><p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zigzag-conversion\">https://leetcode-cn.com/problems/zigzag-conversion</a></p>\n<p>题目描述：</p>\n<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p>\n<p>P   A   H   N<br>A P L S I I G<br>Y   I   R<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p>string convert(string s, int numRows);</p>\n<p>示例 1：</p>\n<p>输入：s = “PAYPALISHIRING”, numRows = 3<br>输出：”PAHNAPLSIIGYIR”<br>示例 2：<br>输入：s = “PAYPALISHIRING”, numRows = 4<br>输出：”PINALSIGYAHRPI”<br>解释：<br>P     I    N<br>A   L S  I G<br>Y A   H R<br>P     I<br>示例 3：</p>\n<p>输入：s = “A”, numRows = 1<br>输出：”A”</p>\n<p>提示：</p>\n<p>1 &lt;= s.length &lt;= 1000<br>s 由英文字母（小写和大写）、’,’ 和 ‘.’ 组成<br>1 &lt;= numRows &lt;= 1000</p>\n<p>题解：我的想法是，既然最后是按行来读取，那么就可以依次获取每一行的数据放入结果中，那么就需要给每一个元素来一个编号，编号就代表着这个元素的行数，所以可以用一个和s一样长的数组来字母每个元素在那一行，而他们的行数是一串循环的数字，如当总共三行时，行数就依次为0，1，2，1，0，（从0开始），c++代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> numRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numRows == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p[len];</span><br><span class=\"line\">        <span class=\"built_in\">string</span> ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;<span class=\"comment\">//这里构造行数数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">                p[i] = x++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> p[i] = x--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == numRows - <span class=\"number\">1</span>) flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>) flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; numRows; k++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i] == k)</span><br><span class=\"line\">                    ans += s[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"c++ java python大数加法","date":"2019-07-30T09:39:01.000Z","toc":true,"_content":"\n\n转自：https://blog.csdn.net/weixin_43871885/article/details/97797871 \n### c++代码\n```javascript\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 1000\nint a[MAXN],b[MAXN];\nint main(int argc, const char * argv[])\n{\n    string str1,str2;//保存输入\n    long int len1,len2;\n    long int i,j,k;\n    int up;\n\n    /*输入流程*/\n    cin>>str1>>str2;\n\n    /*初始化各量*/\n    len1 = str1.length();\n    len2 = str2.length();\n    memset(a, 0, sizeof(a));\n    memset(b, 0, sizeof(b));\n\n    /*注意，必须倒着保存数据*/\n    for (i = len1 - 1, k = 0; i != -1; -- i)\n    {\n        a[k] = str1[i] - '0';\n        k++;\n    }\n    for (j = len2 - 1, k = 0; j != -1; -- j)\n    {\n        b[k] = str2[j] - '0';\n        k++;\n    }\n    for (i = 0, up = 0; i < MAXN; ++ i)\n    {\n        a[i] = a[i] + b[i] + up;\n        up = a[i] / 10;\n        a[i] %= 10;\n    }\n    for (i = MAXN - 1; i != -1; -- i)\n    {\n        if (a[i])\n        {\n            break;\n        }\n    }\n    for (k = i; k != -1; --k)\n    {\n        cout<<a[k];\n    }\n    return 0;\n}\n```\n<!-- more --> \n\n\n\n\n### java代码\n```javascript\npackage my;\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        BigInteger a, b;\n        Scanner in = new Scanner(System.in);\n            a = in.nextBigInteger();\n            b = in.nextBigInteger();\n            System.out.println(a + \" + \" + b + \" = \" + a.add(b) );\n            System.out.println();\n    }\n} \n```\n\n\n### Python大数代码\n```javascript\na = int(input());b = int(input());print(a+b);\n```\n\n我的个人博客 amazingz6.github.io\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n我的bilibili https://space.bilibili.com/66908429","source":"_posts/c-java-python大数加法.md","raw":"---\ntitle: c++ java python大数加法\ndate: 2019-07-30 17:39:01\ntags: 算法\ntoc: true\n---\n\n\n转自：https://blog.csdn.net/weixin_43871885/article/details/97797871 \n### c++代码\n```javascript\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 1000\nint a[MAXN],b[MAXN];\nint main(int argc, const char * argv[])\n{\n    string str1,str2;//保存输入\n    long int len1,len2;\n    long int i,j,k;\n    int up;\n\n    /*输入流程*/\n    cin>>str1>>str2;\n\n    /*初始化各量*/\n    len1 = str1.length();\n    len2 = str2.length();\n    memset(a, 0, sizeof(a));\n    memset(b, 0, sizeof(b));\n\n    /*注意，必须倒着保存数据*/\n    for (i = len1 - 1, k = 0; i != -1; -- i)\n    {\n        a[k] = str1[i] - '0';\n        k++;\n    }\n    for (j = len2 - 1, k = 0; j != -1; -- j)\n    {\n        b[k] = str2[j] - '0';\n        k++;\n    }\n    for (i = 0, up = 0; i < MAXN; ++ i)\n    {\n        a[i] = a[i] + b[i] + up;\n        up = a[i] / 10;\n        a[i] %= 10;\n    }\n    for (i = MAXN - 1; i != -1; -- i)\n    {\n        if (a[i])\n        {\n            break;\n        }\n    }\n    for (k = i; k != -1; --k)\n    {\n        cout<<a[k];\n    }\n    return 0;\n}\n```\n<!-- more --> \n\n\n\n\n### java代码\n```javascript\npackage my;\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        BigInteger a, b;\n        Scanner in = new Scanner(System.in);\n            a = in.nextBigInteger();\n            b = in.nextBigInteger();\n            System.out.println(a + \" + \" + b + \" = \" + a.add(b) );\n            System.out.println();\n    }\n} \n```\n\n\n### Python大数代码\n```javascript\na = int(input());b = int(input());print(a+b);\n```\n\n我的个人博客 amazingz6.github.io\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n我的bilibili https://space.bilibili.com/66908429","slug":"c-java-python大数加法","published":1,"updated":"2020-05-04T08:09:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7l00087suu2esbcdpp","content":"<p>转自：<a href=\"https://blog.csdn.net/weixin_43871885/article/details/97797871\">https://blog.csdn.net/weixin_43871885/article/details/97797871</a> </p>\n<h3><span id=\"c代码\">c++代码</span></h3><pre class=\"highlight\"><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAXN <span class=\"number\">1000</span></span><br><span class=\"line\">int a[MAXN],b[MAXN];</span><br><span class=\"line\">int main(int argc, <span class=\"keyword\">const</span> char * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string str1,str2;<span class=\"comment\">//保存输入</span></span><br><span class=\"line\">    long int len1,len2;</span><br><span class=\"line\">    long int i,j,k;</span><br><span class=\"line\">    int up;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*输入流程*/</span></span><br><span class=\"line\">    cin&gt;&gt;str1&gt;&gt;str2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*初始化各量*/</span></span><br><span class=\"line\">    len1 = str1.length();</span><br><span class=\"line\">    len2 = str2.length();</span><br><span class=\"line\">    memset(a, <span class=\"number\">0</span>, sizeof(a));</span><br><span class=\"line\">    memset(b, <span class=\"number\">0</span>, sizeof(b));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*注意，必须倒着保存数据*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = len1 - <span class=\"number\">1</span>, k = <span class=\"number\">0</span>; i != -<span class=\"number\">1</span>; -- i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[k] = str1[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = len2 - <span class=\"number\">1</span>, k = <span class=\"number\">0</span>; j != -<span class=\"number\">1</span>; -- j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[k] = str2[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, up = <span class=\"number\">0</span>; i &lt; MAXN; ++ i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = a[i] + b[i] + up;</span><br><span class=\"line\">        up = a[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">        a[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = MAXN - <span class=\"number\">1</span>; i != -<span class=\"number\">1</span>; -- i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = i; k != -<span class=\"number\">1</span>; --k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;a[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n<span id=\"more\"></span> \n<h3><span id=\"java代码\">java代码</span></h3><pre class=\"highlight\"><span class=\"line\">package my;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>)</span> &#123;</span><br><span class=\"line\">        BigInteger a, b;</span><br><span class=\"line\">        Scanner <span class=\"keyword\">in</span> = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">            a = <span class=\"keyword\">in</span>.nextBigInteger();</span><br><span class=\"line\">            b = <span class=\"keyword\">in</span>.nextBigInteger();</span><br><span class=\"line\">            System.out.println(a + <span class=\"string\">&quot; + &quot;</span> + b + <span class=\"string\">&quot; = &quot;</span> + a.add(b) );</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre>\n<h3><span id=\"python大数代码\">Python大数代码</span></h3><pre class=\"highlight\"><span class=\"line\">a = int(input());b = int(input());print(a+b);</span><br></pre>\n<p>我的个人博客 amazingz6.github.io<br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a><br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a></p>\n","site":{"data":{}},"excerpt":"<p>转自：<a href=\"https://blog.csdn.net/weixin_43871885/article/details/97797871\">https://blog.csdn.net/weixin_43871885/article/details/97797871</a> </p>\n<h3 id=\"c-代码\"><a href=\"#c-代码\" class=\"headerlink\" title=\"c++代码\"></a>c++代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAXN <span class=\"number\">1000</span></span><br><span class=\"line\">int a[MAXN],b[MAXN];</span><br><span class=\"line\">int main(int argc, <span class=\"keyword\">const</span> char * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string str1,str2;<span class=\"comment\">//保存输入</span></span><br><span class=\"line\">    long int len1,len2;</span><br><span class=\"line\">    long int i,j,k;</span><br><span class=\"line\">    int up;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*输入流程*/</span></span><br><span class=\"line\">    cin&gt;&gt;str1&gt;&gt;str2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*初始化各量*/</span></span><br><span class=\"line\">    len1 = str1.length();</span><br><span class=\"line\">    len2 = str2.length();</span><br><span class=\"line\">    memset(a, <span class=\"number\">0</span>, sizeof(a));</span><br><span class=\"line\">    memset(b, <span class=\"number\">0</span>, sizeof(b));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*注意，必须倒着保存数据*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = len1 - <span class=\"number\">1</span>, k = <span class=\"number\">0</span>; i != -<span class=\"number\">1</span>; -- i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[k] = str1[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = len2 - <span class=\"number\">1</span>, k = <span class=\"number\">0</span>; j != -<span class=\"number\">1</span>; -- j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[k] = str2[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, up = <span class=\"number\">0</span>; i &lt; MAXN; ++ i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = a[i] + b[i] + up;</span><br><span class=\"line\">        up = a[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">        a[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = MAXN - <span class=\"number\">1</span>; i != -<span class=\"number\">1</span>; -- i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = i; k != -<span class=\"number\">1</span>; --k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;a[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"java代码\"><a href=\"#java代码\" class=\"headerlink\" title=\"java代码\"></a>java代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package my;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>)</span> &#123;</span><br><span class=\"line\">        BigInteger a, b;</span><br><span class=\"line\">        Scanner <span class=\"keyword\">in</span> = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">            a = <span class=\"keyword\">in</span>.nextBigInteger();</span><br><span class=\"line\">            b = <span class=\"keyword\">in</span>.nextBigInteger();</span><br><span class=\"line\">            System.out.println(a + <span class=\"string\">&quot; + &quot;</span> + b + <span class=\"string\">&quot; = &quot;</span> + a.add(b) );</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"Python大数代码\"><a href=\"#Python大数代码\" class=\"headerlink\" title=\"Python大数代码\"></a>Python大数代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = int(input());b = int(input());print(a+b);</span><br></pre></td></tr></table></figure>\n<p>我的个人博客 amazingz6.github.io<br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a><br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2023-03-27T03:13:03.821Z","updated":"2019-07-27T07:23:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7o000b7suuh51nd1i9","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p> Quick Start</p>\n<h3><span id=\"create-a-new-post\">Create a new post</span></h3><pre class=\"highlight\"><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3><span id=\"run-server\">Run server</span></h3><pre class=\"highlight\"><span class=\"line\">$ hexo server</span><br></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3><span id=\"generate-static-files\">Generate static files</span></h3><pre class=\"highlight\"><span class=\"line\">$ hexo generate</span><br></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3><span id=\"deploy-to-remote-sites\">Deploy to remote sites</span></h3><pre class=\"highlight\"><span class=\"line\">$ hexo deploy</span><br></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p> Quick Start</p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo操作","date":"2020-12-11T01:50:28.000Z","_content":"\n## 怕自己忘了，所以在这里写一下OVO\n\n新建blog\n```javascript\nhexo new \"博客名\"\n```\n启动本地服务\n```javascript\nhexo server //可以简写成hexo s\n```\n遇到问题就用以下三步\n```javascript\nhexo clean //清除部署緩存,可以简写成hexo c\nhexo generate //生成静态页面至public目录,可以简写成hexo g\nhexo deploy //将.deploy目录部署到GitHub,可以简写成hexo d\n```","source":"_posts/hexo操作.md","raw":"---\ntitle: hexo操作\ndate: 2020-12-11 09:50:28\ntags:\n---\n\n## 怕自己忘了，所以在这里写一下OVO\n\n新建blog\n```javascript\nhexo new \"博客名\"\n```\n启动本地服务\n```javascript\nhexo server //可以简写成hexo s\n```\n遇到问题就用以下三步\n```javascript\nhexo clean //清除部署緩存,可以简写成hexo c\nhexo generate //生成静态页面至public目录,可以简写成hexo g\nhexo deploy //将.deploy目录部署到GitHub,可以简写成hexo d\n```","slug":"hexo操作","published":1,"updated":"2020-12-11T02:06:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7p000d7suugaledqxi","content":"<h2><span id=\"怕自己忘了所以在这里写一下ovo\">怕自己忘了，所以在这里写一下OVO</span></h2><p>新建blog<br><pre class=\"highlight\"><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&quot;博客名&quot;</span></span><br></pre><br>启动本地服务<br><pre class=\"highlight\"><span class=\"line\">hexo server <span class=\"comment\">//可以简写成hexo s</span></span><br></pre><br>遇到问题就用以下三步<br><pre class=\"highlight\"><span class=\"line\">hexo clean <span class=\"comment\">//清除部署緩存,可以简写成hexo c</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">//生成静态页面至public目录,可以简写成hexo g</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">//将.deploy目录部署到GitHub,可以简写成hexo d</span></span><br></pre></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"怕自己忘了，所以在这里写一下OVO\"><a href=\"#怕自己忘了，所以在这里写一下OVO\" class=\"headerlink\" title=\"怕自己忘了，所以在这里写一下OVO\"></a>怕自己忘了，所以在这里写一下OVO</h2><p>新建blog<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&quot;博客名&quot;</span></span><br></pre></td></tr></table></figure><br>启动本地服务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server <span class=\"comment\">//可以简写成hexo s</span></span><br></pre></td></tr></table></figure><br>遇到问题就用以下三步<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\">//清除部署緩存,可以简写成hexo c</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">//生成静态页面至public目录,可以简写成hexo g</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">//将.deploy目录部署到GitHub,可以简写成hexo d</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"my first blog","date":"2019-07-27T07:26:09.000Z","_content":"\n开始写博客啦！\n","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2019-07-27 15:26:09\ntags:\n---\n\n开始写博客啦！\n","slug":"my-first-blog","published":1,"updated":"2019-08-06T04:09:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7r000g7suu9j97d1rc","content":"<p>开始写博客啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>开始写博客啦！</p>\n"},{"title":"m叉树的双亲孩子节点编号之间的关系","date":"2021-09-28T13:39:11.000Z","_content":"\n# m叉树的双亲孩子节点编号之间的关系\n\n久违的知识博客！\n\n这个题过第一遍时没搞懂，现在再次看到这个题,我决定把它解决！\n\n已知双亲结点的编号为i（根节点为1），求这个结点的第一个孩子的编号。\n\n设树的高为h，则从第一层到h-1层的结点总数为(m^(h-1) - 1)/ (m - 1)\n\n则在h层的i之前的结点共有i - (m^(h-1) - 1)/ (m - 1) - 1个\n\n那么所求孩子结点的那一层在他前面共有节点 m * [ i - (m^(h-1) - 1)/ (m - 1) - 1]个结点\n\n而1到h层共有(m^h - 1)/ (m - 1)个结点\n\n所以要求的编号j = (m^h - 1)/ (m - 1) + m * [ i - (m^(h-1) - 1)/ (m - 1) - 1] + 1 = m * (i - 1) + 2\n\n即j = m * (i - 1) + 2\n\n如果已知孩子节点编号，求双亲节点编号，直接解一下即可。\n\n","source":"_posts/m叉树的双亲孩子节点之间的关系.md","raw":"---\ntitle: m叉树的双亲孩子节点编号之间的关系\ndate: 2021-09-28 21:39:11\ntags: 数据结构\n---\n\n# m叉树的双亲孩子节点编号之间的关系\n\n久违的知识博客！\n\n这个题过第一遍时没搞懂，现在再次看到这个题,我决定把它解决！\n\n已知双亲结点的编号为i（根节点为1），求这个结点的第一个孩子的编号。\n\n设树的高为h，则从第一层到h-1层的结点总数为(m^(h-1) - 1)/ (m - 1)\n\n则在h层的i之前的结点共有i - (m^(h-1) - 1)/ (m - 1) - 1个\n\n那么所求孩子结点的那一层在他前面共有节点 m * [ i - (m^(h-1) - 1)/ (m - 1) - 1]个结点\n\n而1到h层共有(m^h - 1)/ (m - 1)个结点\n\n所以要求的编号j = (m^h - 1)/ (m - 1) + m * [ i - (m^(h-1) - 1)/ (m - 1) - 1] + 1 = m * (i - 1) + 2\n\n即j = m * (i - 1) + 2\n\n如果已知孩子节点编号，求双亲节点编号，直接解一下即可。\n\n","slug":"m叉树的双亲孩子节点之间的关系","published":1,"updated":"2021-09-28T14:02:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7r000h7suu24ik8vuz","content":"<h1><span id=\"m叉树的双亲孩子节点编号之间的关系\">m叉树的双亲孩子节点编号之间的关系</span></h1><p>久违的知识博客！</p>\n<p>这个题过第一遍时没搞懂，现在再次看到这个题,我决定把它解决！</p>\n<p>已知双亲结点的编号为i（根节点为1），求这个结点的第一个孩子的编号。</p>\n<p>设树的高为h，则从第一层到h-1层的结点总数为(m^(h-1) - 1)/ (m - 1)</p>\n<p>则在h层的i之前的结点共有i - (m^(h-1) - 1)/ (m - 1) - 1个</p>\n<p>那么所求孩子结点的那一层在他前面共有节点 m * [ i - (m^(h-1) - 1)/ (m - 1) - 1]个结点</p>\n<p>而1到h层共有(m^h - 1)/ (m - 1)个结点</p>\n<p>所以要求的编号j = (m^h - 1)/ (m - 1) + m <em> [ i - (m^(h-1) - 1)/ (m - 1) - 1] + 1 = m </em> (i - 1) + 2</p>\n<p>即j = m * (i - 1) + 2</p>\n<p>如果已知孩子节点编号，求双亲节点编号，直接解一下即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"m叉树的双亲孩子节点编号之间的关系\"><a href=\"#m叉树的双亲孩子节点编号之间的关系\" class=\"headerlink\" title=\"m叉树的双亲孩子节点编号之间的关系\"></a>m叉树的双亲孩子节点编号之间的关系</h1><p>久违的知识博客！</p>\n<p>这个题过第一遍时没搞懂，现在再次看到这个题,我决定把它解决！</p>\n<p>已知双亲结点的编号为i（根节点为1），求这个结点的第一个孩子的编号。</p>\n<p>设树的高为h，则从第一层到h-1层的结点总数为(m^(h-1) - 1)/ (m - 1)</p>\n<p>则在h层的i之前的结点共有i - (m^(h-1) - 1)/ (m - 1) - 1个</p>\n<p>那么所求孩子结点的那一层在他前面共有节点 m * [ i - (m^(h-1) - 1)/ (m - 1) - 1]个结点</p>\n<p>而1到h层共有(m^h - 1)/ (m - 1)个结点</p>\n<p>所以要求的编号j = (m^h - 1)/ (m - 1) + m <em> [ i - (m^(h-1) - 1)/ (m - 1) - 1] + 1 = m </em> (i - 1) + 2</p>\n<p>即j = m * (i - 1) + 2</p>\n<p>如果已知孩子节点编号，求双亲节点编号，直接解一下即可。</p>\n"},{"title":"一元二次多项式的相加","date":"2019-11-17T13:24:09.000Z","_content":"\n这次我们话不多说，直接上代码，看代码注释即可\n\n```javascript\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\nusing namespace std;\n\ntypedef struct Zlnb{\n    double x; //系数\n    int y;  //指数\n    struct Zlnb *next; //指针域\n}Zl;//节点名称\n\nvoid PrintPoly(Zl *s)//打印单个项\n{\n    if(s->y==0)//指数等于零时，直接输出系数\n    {\n        cout<<s->x;\n    }\n    else if(s->x==1)//系数为1时，1省略\n    {\n        if(s->y==1)//指数为1时省略不写\n            cout<<\"x\";\n        else\n            cout<<\"x^\"<<s->y;\n    }\n    else if(s->x==-1)//系数为1时，-1省略\n    {\n        if(s->y==1)//指数为1时省略不写\n            cout<<\"-x\";\n        else\n            cout<<\"-x^\"<<s->y;\n    }\n    else\n    {\n        if(s->y==1)//指数为1时省略不写\n            cout<<s->x<<\"x\";\n        else\n            cout<<s->x<<\"x^\"<<s->y;\n    }\n}\n\nvoid PrintPolyn(Zl *first)//利用PrintPoly打印整个多项式\n{\n    Zl *temp=first->next;//表头没有数据，表头的下一个才是多项式的第一个项\n    while(temp->next!=NULL)//遍历，从第一个打印到倒数第二个\n    {\n        PrintPoly(temp);\n        temp=temp->next;\n        if(temp->x>0)\n            cout<<\"+\";//只有一个项时此循环不执行，所以直接打印加号即可\n    }\n    PrintPoly(temp);//打印最后一个\n    cout<<endl;\n}\n\nvoid ListInsert(Zl *first,Zl *s)//插入，将s节点插入到最后\n{\n    Zl *temp=first;\n    while(temp->next!=NULL)//循环找到最后一个节点\n        temp=temp->next;\n    temp->next=s;//插入s\n    s->next=NULL;\n}\n\nZl* InputData(int k)//输入函数，采用先输入系数后输入次数的方法，k代表是第几个多项式\n{\n    Zl *first=new Zl;//创建多项式链表的头指针\n    first->next=NULL;//头指针初始化\n    int a;\n    int com[100];\n    printf(\"请输入第%d个多项式的项数：\",k);\n    cin>>a;//接受多项式的项数\n    if(a<=0)//确保项数大于0\n    {\n        cout<<\"系数输入错误，请关闭程序重新输入\"<<endl;\n        return 0;\n    }\n    for(int i=1;i<=a;i++)//循环接收多项式的每个项\n    {\n        Zl *p=new Zl;//用p存下即将读取的数据\n        p->next=NULL;\n        double m;\n        int n;\n        printf(\"请输入第%d项的系数：\",i);\n        cin>>m;\n        if(!m)//系数不能等于0\n        {\n            cout<<\"系数输入错误，请关闭程序重新输入\"<<endl;\n            return 0;\n        }\n        printf(\"请输入第%d项的次数：\",i);\n        cin>>n;\n        com[i]=n;\n        for(int j=1;j<i;j++)//循环遍历是否有重复项出现\n            if(n==com[j])\n            {\n                cout<<\"次数输入重复，请关闭程序重新输入\"<<endl;\n                return 0;\n            }\n        p->x=m;//赋值\n        p->y=n;\n        ListInsert(first,p);//将p插入多项式中\n        cout<<endl;\n    }\n    printf(\"该多项式可表示为：\");\n    PrintPolyn(first);//打印多项式\n    cout<<endl;\n    return first;//返回多项式的首地址\n}\n\nZl* AddPolyn(Zl *a,Zl*b)//两个多项式相加的函数\n{\n    Zl *first=new Zl;//创建一个新的链表来存两多项式相加得到的结果\n    first->next=NULL;\n    Zl *m=a->next;//注意，这里表头没有存放数据，表头的下一个才存放的是多项式第一个项\n    Zl *n=b->next;\n    while(m!=NULL&&n!=NULL)//有一个表空了就跳出循环\n    {\n        Zl *temp=new Zl;//和上面的p一样，暂存得到的数据\n        temp->next=NULL;\n        int num=m->y-n->y;//判断指数的大小\n        if(num<0)//m的指数小于n\n        {\n            temp->x=m->x;\n            temp->y=m->y;\n            ListInsert(first,temp);//因为m指数小于n，将m的当前项复制过来插入结果链表\n            m=m->next;//指针后移\n        }\n        else if(num>0)//m的指数大于n\n        {\n            temp->x=n->x;\n            temp->y=n->y;\n            ListInsert(first,temp);//因为m指数大于n，将n的当前项复制过来插入结果链表\n            n=n->next;//指针后移\n        }\n        else//m的指数等于n\n        {//\n            double ans=m->x+n->x;\n            if(ans!=0){//系数和不等于0时系数相加作为新的系数插入结果链表中\n                temp->x=ans;\n                temp->y=m->y;\n                ListInsert(first,temp);\n            }//系数和不等于零时直接指针后移即可，由于两种情况都会后移，所以可以合并\n            m=m->next;\n            n=n->next;\n        }\n    }\n    Zl *templist=new Zl;//创建一个临时链表来将存放可能的剩下的项\n    templist->next=NULL;\n    if(m!=NULL)//当m链表还有剩余项时\n    {\n        Zl *p=m;\n        while(p!=NULL)//循环遍历剩下的项\n        {\n            Zl *temp=new Zl;\n            temp->x=p->x;\n            temp->y=p->y;\n            temp->next=NULL;//用temp暂存当前项\n            ListInsert(templist,temp);//插入temp\n            p=p->next;\n        }\n        Zl *temp=first;\n        while(temp->next!=NULL)//循环找到结果链表的最后一项\n            temp=temp->next;\n        temp->next=templist->next;//直接将临时链表接在结果链表后面即可\n    }\n    if(n!=NULL)//当n链表还有剩余项时，步骤与上面的情况一样\n    {\n        Zl *p=n;\n        while(p!=NULL)\n        {\n            Zl *temp=new Zl;\n            temp->x=p->x;\n            temp->y=p->y;\n            temp->next=NULL;\n            ListInsert(templist,temp);\n            p=p->next;\n        }\n        Zl *temp=first;\n        while(temp->next!=NULL)\n            temp=temp->next;\n        temp->next=templist->next;\n    }\n    return first;//返回结果链表的头指针\n}\n\nvoid FreePolyn(Zl *s)//释空间\n{\n    Zl *p=s;\n    while(s!=NULL)//遍历链表一个一个释放空间\n    {\n        s=s->next;\n        free(p);\n        p=s;\n    }\n}\n\nint main()\n{\n    cout<<\"/*注意:系数为浮点类型，指数为整数（可为负）类型\"<<endl;\n    cout<<\"请按指数从小到大的顺序输入多项式。*/\"<<endl;\n    Zl *a;//用来存放多项式1\n    Zl *b;//用来存放多项式2\n    Zl *c;//用来存放结果多项式\n    a=InputData(1);//输入多项式1\n    b=InputData(2);//输入多项式2\n    c=AddPolyn(a,b);//相加\n    cout<<\"多项式之和为：\";\n    PrintPolyn(c);//打印结果\n    FreePolyn(a);//依次释放链表空间\n    FreePolyn(b);\n    FreePolyn(c);\n    return 0;\n}\n```\n运行测试和结果：\n![xxx](1.PNG)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n\n","source":"_posts/一元二次多项式的相加.md","raw":"---\ntitle: 一元二次多项式的相加\ndate: 2019-11-17 21:24:09\ntags:\n---\n\n这次我们话不多说，直接上代码，看代码注释即可\n\n```javascript\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\nusing namespace std;\n\ntypedef struct Zlnb{\n    double x; //系数\n    int y;  //指数\n    struct Zlnb *next; //指针域\n}Zl;//节点名称\n\nvoid PrintPoly(Zl *s)//打印单个项\n{\n    if(s->y==0)//指数等于零时，直接输出系数\n    {\n        cout<<s->x;\n    }\n    else if(s->x==1)//系数为1时，1省略\n    {\n        if(s->y==1)//指数为1时省略不写\n            cout<<\"x\";\n        else\n            cout<<\"x^\"<<s->y;\n    }\n    else if(s->x==-1)//系数为1时，-1省略\n    {\n        if(s->y==1)//指数为1时省略不写\n            cout<<\"-x\";\n        else\n            cout<<\"-x^\"<<s->y;\n    }\n    else\n    {\n        if(s->y==1)//指数为1时省略不写\n            cout<<s->x<<\"x\";\n        else\n            cout<<s->x<<\"x^\"<<s->y;\n    }\n}\n\nvoid PrintPolyn(Zl *first)//利用PrintPoly打印整个多项式\n{\n    Zl *temp=first->next;//表头没有数据，表头的下一个才是多项式的第一个项\n    while(temp->next!=NULL)//遍历，从第一个打印到倒数第二个\n    {\n        PrintPoly(temp);\n        temp=temp->next;\n        if(temp->x>0)\n            cout<<\"+\";//只有一个项时此循环不执行，所以直接打印加号即可\n    }\n    PrintPoly(temp);//打印最后一个\n    cout<<endl;\n}\n\nvoid ListInsert(Zl *first,Zl *s)//插入，将s节点插入到最后\n{\n    Zl *temp=first;\n    while(temp->next!=NULL)//循环找到最后一个节点\n        temp=temp->next;\n    temp->next=s;//插入s\n    s->next=NULL;\n}\n\nZl* InputData(int k)//输入函数，采用先输入系数后输入次数的方法，k代表是第几个多项式\n{\n    Zl *first=new Zl;//创建多项式链表的头指针\n    first->next=NULL;//头指针初始化\n    int a;\n    int com[100];\n    printf(\"请输入第%d个多项式的项数：\",k);\n    cin>>a;//接受多项式的项数\n    if(a<=0)//确保项数大于0\n    {\n        cout<<\"系数输入错误，请关闭程序重新输入\"<<endl;\n        return 0;\n    }\n    for(int i=1;i<=a;i++)//循环接收多项式的每个项\n    {\n        Zl *p=new Zl;//用p存下即将读取的数据\n        p->next=NULL;\n        double m;\n        int n;\n        printf(\"请输入第%d项的系数：\",i);\n        cin>>m;\n        if(!m)//系数不能等于0\n        {\n            cout<<\"系数输入错误，请关闭程序重新输入\"<<endl;\n            return 0;\n        }\n        printf(\"请输入第%d项的次数：\",i);\n        cin>>n;\n        com[i]=n;\n        for(int j=1;j<i;j++)//循环遍历是否有重复项出现\n            if(n==com[j])\n            {\n                cout<<\"次数输入重复，请关闭程序重新输入\"<<endl;\n                return 0;\n            }\n        p->x=m;//赋值\n        p->y=n;\n        ListInsert(first,p);//将p插入多项式中\n        cout<<endl;\n    }\n    printf(\"该多项式可表示为：\");\n    PrintPolyn(first);//打印多项式\n    cout<<endl;\n    return first;//返回多项式的首地址\n}\n\nZl* AddPolyn(Zl *a,Zl*b)//两个多项式相加的函数\n{\n    Zl *first=new Zl;//创建一个新的链表来存两多项式相加得到的结果\n    first->next=NULL;\n    Zl *m=a->next;//注意，这里表头没有存放数据，表头的下一个才存放的是多项式第一个项\n    Zl *n=b->next;\n    while(m!=NULL&&n!=NULL)//有一个表空了就跳出循环\n    {\n        Zl *temp=new Zl;//和上面的p一样，暂存得到的数据\n        temp->next=NULL;\n        int num=m->y-n->y;//判断指数的大小\n        if(num<0)//m的指数小于n\n        {\n            temp->x=m->x;\n            temp->y=m->y;\n            ListInsert(first,temp);//因为m指数小于n，将m的当前项复制过来插入结果链表\n            m=m->next;//指针后移\n        }\n        else if(num>0)//m的指数大于n\n        {\n            temp->x=n->x;\n            temp->y=n->y;\n            ListInsert(first,temp);//因为m指数大于n，将n的当前项复制过来插入结果链表\n            n=n->next;//指针后移\n        }\n        else//m的指数等于n\n        {//\n            double ans=m->x+n->x;\n            if(ans!=0){//系数和不等于0时系数相加作为新的系数插入结果链表中\n                temp->x=ans;\n                temp->y=m->y;\n                ListInsert(first,temp);\n            }//系数和不等于零时直接指针后移即可，由于两种情况都会后移，所以可以合并\n            m=m->next;\n            n=n->next;\n        }\n    }\n    Zl *templist=new Zl;//创建一个临时链表来将存放可能的剩下的项\n    templist->next=NULL;\n    if(m!=NULL)//当m链表还有剩余项时\n    {\n        Zl *p=m;\n        while(p!=NULL)//循环遍历剩下的项\n        {\n            Zl *temp=new Zl;\n            temp->x=p->x;\n            temp->y=p->y;\n            temp->next=NULL;//用temp暂存当前项\n            ListInsert(templist,temp);//插入temp\n            p=p->next;\n        }\n        Zl *temp=first;\n        while(temp->next!=NULL)//循环找到结果链表的最后一项\n            temp=temp->next;\n        temp->next=templist->next;//直接将临时链表接在结果链表后面即可\n    }\n    if(n!=NULL)//当n链表还有剩余项时，步骤与上面的情况一样\n    {\n        Zl *p=n;\n        while(p!=NULL)\n        {\n            Zl *temp=new Zl;\n            temp->x=p->x;\n            temp->y=p->y;\n            temp->next=NULL;\n            ListInsert(templist,temp);\n            p=p->next;\n        }\n        Zl *temp=first;\n        while(temp->next!=NULL)\n            temp=temp->next;\n        temp->next=templist->next;\n    }\n    return first;//返回结果链表的头指针\n}\n\nvoid FreePolyn(Zl *s)//释空间\n{\n    Zl *p=s;\n    while(s!=NULL)//遍历链表一个一个释放空间\n    {\n        s=s->next;\n        free(p);\n        p=s;\n    }\n}\n\nint main()\n{\n    cout<<\"/*注意:系数为浮点类型，指数为整数（可为负）类型\"<<endl;\n    cout<<\"请按指数从小到大的顺序输入多项式。*/\"<<endl;\n    Zl *a;//用来存放多项式1\n    Zl *b;//用来存放多项式2\n    Zl *c;//用来存放结果多项式\n    a=InputData(1);//输入多项式1\n    b=InputData(2);//输入多项式2\n    c=AddPolyn(a,b);//相加\n    cout<<\"多项式之和为：\";\n    PrintPolyn(c);//打印结果\n    FreePolyn(a);//依次释放链表空间\n    FreePolyn(b);\n    FreePolyn(c);\n    return 0;\n}\n```\n运行测试和结果：\n![xxx](1.PNG)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n\n","slug":"一元二次多项式的相加","published":1,"updated":"2020-05-04T08:12:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7u000j7suu3k0g8yex","content":"<p>这次我们话不多说，直接上代码，看代码注释即可</p>\n<pre class=\"highlight\"><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cstdlib&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Zlnb&#123;</span><br><span class=\"line\">    double x; <span class=\"comment\">//系数</span></span><br><span class=\"line\">    int y;  <span class=\"comment\">//指数</span></span><br><span class=\"line\">    struct Zlnb *next; <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;Zl;<span class=\"comment\">//节点名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PrintPoly(Zl *s)<span class=\"comment\">//打印单个项</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">0</span>)<span class=\"comment\">//指数等于零时，直接输出系数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;s-&gt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s-&gt;x==<span class=\"number\">1</span>)<span class=\"comment\">//系数为1时，1省略</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">1</span>)<span class=\"comment\">//指数为1时省略不写</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;x&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;x^&quot;</span>&lt;&lt;s-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s-&gt;x==-<span class=\"number\">1</span>)<span class=\"comment\">//系数为1时，-1省略</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">1</span>)<span class=\"comment\">//指数为1时省略不写</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-x&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-x^&quot;</span>&lt;&lt;s-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">1</span>)<span class=\"comment\">//指数为1时省略不写</span></span><br><span class=\"line\">            cout&lt;&lt;s-&gt;x&lt;&lt;<span class=\"string\">&quot;x&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout&lt;&lt;s-&gt;x&lt;&lt;<span class=\"string\">&quot;x^&quot;</span>&lt;&lt;s-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PrintPolyn(Zl *first)<span class=\"comment\">//利用PrintPoly打印整个多项式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *temp=first-&gt;next;<span class=\"comment\">//表头没有数据，表头的下一个才是多项式的第一个项</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)<span class=\"comment\">//遍历，从第一个打印到倒数第二个</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        PrintPoly(temp);</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp-&gt;x&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;+&quot;</span>;<span class=\"comment\">//只有一个项时此循环不执行，所以直接打印加号即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PrintPoly(temp);<span class=\"comment\">//打印最后一个</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> ListInsert(Zl *first,Zl *s)<span class=\"comment\">//插入，将s节点插入到最后</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *temp=first;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)<span class=\"comment\">//循环找到最后一个节点</span></span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    temp-&gt;next=s;<span class=\"comment\">//插入s</span></span><br><span class=\"line\">    s-&gt;next=NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Zl* InputData(int k)<span class=\"comment\">//输入函数，采用先输入系数后输入次数的方法，k代表是第几个多项式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *first=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//创建多项式链表的头指针</span></span><br><span class=\"line\">    first-&gt;next=NULL;<span class=\"comment\">//头指针初始化</span></span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    int com[<span class=\"number\">100</span>];</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;请输入第%d个多项式的项数：&quot;</span>,k);</span><br><span class=\"line\">    cin&gt;&gt;a;<span class=\"comment\">//接受多项式的项数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&lt;=<span class=\"number\">0</span>)<span class=\"comment\">//确保项数大于0</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;系数输入错误，请关闭程序重新输入&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=<span class=\"number\">1</span>;i&lt;=a;i++)<span class=\"comment\">//循环接收多项式的每个项</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *p=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//用p存下即将读取的数据</span></span><br><span class=\"line\">        p-&gt;next=NULL;</span><br><span class=\"line\">        double m;</span><br><span class=\"line\">        int n;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;请输入第%d项的系数：&quot;</span>,i);</span><br><span class=\"line\">        cin&gt;&gt;m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!m)<span class=\"comment\">//系数不能等于0</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;系数输入错误，请关闭程序重新输入&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;请输入第%d项的次数：&quot;</span>,i);</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        com[i]=n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j=<span class=\"number\">1</span>;j&lt;i;j++)<span class=\"comment\">//循环遍历是否有重复项出现</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n==com[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;次数输入重复，请关闭程序重新输入&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        p-&gt;x=m;<span class=\"comment\">//赋值</span></span><br><span class=\"line\">        p-&gt;y=n;</span><br><span class=\"line\">        ListInsert(first,p);<span class=\"comment\">//将p插入多项式中</span></span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;该多项式可表示为：&quot;</span>);</span><br><span class=\"line\">    PrintPolyn(first);<span class=\"comment\">//打印多项式</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;<span class=\"comment\">//返回多项式的首地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Zl* AddPolyn(Zl *a,Zl*b)<span class=\"comment\">//两个多项式相加的函数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *first=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//创建一个新的链表来存两多项式相加得到的结果</span></span><br><span class=\"line\">    first-&gt;next=NULL;</span><br><span class=\"line\">    Zl *m=a-&gt;next;<span class=\"comment\">//注意，这里表头没有存放数据，表头的下一个才存放的是多项式第一个项</span></span><br><span class=\"line\">    Zl *n=b-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m!=NULL&amp;&amp;n!=NULL)<span class=\"comment\">//有一个表空了就跳出循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *temp=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//和上面的p一样，暂存得到的数据</span></span><br><span class=\"line\">        temp-&gt;next=NULL;</span><br><span class=\"line\">        int num=m-&gt;y-n-&gt;y;<span class=\"comment\">//判断指数的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)<span class=\"comment\">//m的指数小于n</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp-&gt;x=m-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=m-&gt;y;</span><br><span class=\"line\">            ListInsert(first,temp);<span class=\"comment\">//因为m指数小于n，将m的当前项复制过来插入结果链表</span></span><br><span class=\"line\">            m=m-&gt;next;<span class=\"comment\">//指针后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">0</span>)<span class=\"comment\">//m的指数大于n</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp-&gt;x=n-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=n-&gt;y;</span><br><span class=\"line\">            ListInsert(first,temp);<span class=\"comment\">//因为m指数大于n，将n的当前项复制过来插入结果链表</span></span><br><span class=\"line\">            n=n-&gt;next;<span class=\"comment\">//指针后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//m的指数等于n</span></span><br><span class=\"line\">        &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">            double ans=m-&gt;x+n-&gt;x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans!=<span class=\"number\">0</span>)&#123;<span class=\"comment\">//系数和不等于0时系数相加作为新的系数插入结果链表中</span></span><br><span class=\"line\">                temp-&gt;x=ans;</span><br><span class=\"line\">                temp-&gt;y=m-&gt;y;</span><br><span class=\"line\">                ListInsert(first,temp);</span><br><span class=\"line\">            &#125;<span class=\"comment\">//系数和不等于零时直接指针后移即可，由于两种情况都会后移，所以可以合并</span></span><br><span class=\"line\">            m=m-&gt;next;</span><br><span class=\"line\">            n=n-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Zl *templist=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//创建一个临时链表来将存放可能的剩下的项</span></span><br><span class=\"line\">    templist-&gt;next=NULL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m!=NULL)<span class=\"comment\">//当m链表还有剩余项时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *p=m;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=NULL)<span class=\"comment\">//循环遍历剩下的项</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Zl *temp=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">            temp-&gt;x=p-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=p-&gt;y;</span><br><span class=\"line\">            temp-&gt;next=NULL;<span class=\"comment\">//用temp暂存当前项</span></span><br><span class=\"line\">            ListInsert(templist,temp);<span class=\"comment\">//插入temp</span></span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Zl *temp=first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)<span class=\"comment\">//循环找到结果链表的最后一项</span></span><br><span class=\"line\">            temp=temp-&gt;next;</span><br><span class=\"line\">        temp-&gt;next=templist-&gt;next;<span class=\"comment\">//直接将临时链表接在结果链表后面即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n!=NULL)<span class=\"comment\">//当n链表还有剩余项时，步骤与上面的情况一样</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *p=n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Zl *temp=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">            temp-&gt;x=p-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=p-&gt;y;</span><br><span class=\"line\">            temp-&gt;next=NULL;</span><br><span class=\"line\">            ListInsert(templist,temp);</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Zl *temp=first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)</span><br><span class=\"line\">            temp=temp-&gt;next;</span><br><span class=\"line\">        temp-&gt;next=templist-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;<span class=\"comment\">//返回结果链表的头指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> FreePolyn(Zl *s)<span class=\"comment\">//释空间</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *p=s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s!=NULL)<span class=\"comment\">//遍历链表一个一个释放空间</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=s-&gt;next;</span><br><span class=\"line\">        free(p);</span><br><span class=\"line\">        p=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;/*注意:系数为浮点类型，指数为整数（可为负）类型&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请按指数从小到大的顺序输入多项式。*/&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    Zl *a;<span class=\"comment\">//用来存放多项式1</span></span><br><span class=\"line\">    Zl *b;<span class=\"comment\">//用来存放多项式2</span></span><br><span class=\"line\">    Zl *c;<span class=\"comment\">//用来存放结果多项式</span></span><br><span class=\"line\">    a=InputData(<span class=\"number\">1</span>);<span class=\"comment\">//输入多项式1</span></span><br><span class=\"line\">    b=InputData(<span class=\"number\">2</span>);<span class=\"comment\">//输入多项式2</span></span><br><span class=\"line\">    c=AddPolyn(a,b);<span class=\"comment\">//相加</span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;多项式之和为：&quot;</span>;</span><br><span class=\"line\">    PrintPolyn(c);<span class=\"comment\">//打印结果</span></span><br><span class=\"line\">    FreePolyn(a);<span class=\"comment\">//依次释放链表空间</span></span><br><span class=\"line\">    FreePolyn(b);</span><br><span class=\"line\">    FreePolyn(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n<p>运行测试和结果：<br><img src=\"1.PNG\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"1.PNG\" class=\"lozad post-image\"></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这次我们话不多说，直接上代码，看代码注释即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cstdlib&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Zlnb&#123;</span><br><span class=\"line\">    double x; <span class=\"comment\">//系数</span></span><br><span class=\"line\">    int y;  <span class=\"comment\">//指数</span></span><br><span class=\"line\">    struct Zlnb *next; <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;Zl;<span class=\"comment\">//节点名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PrintPoly(Zl *s)<span class=\"comment\">//打印单个项</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">0</span>)<span class=\"comment\">//指数等于零时，直接输出系数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;s-&gt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s-&gt;x==<span class=\"number\">1</span>)<span class=\"comment\">//系数为1时，1省略</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">1</span>)<span class=\"comment\">//指数为1时省略不写</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;x&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;x^&quot;</span>&lt;&lt;s-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s-&gt;x==-<span class=\"number\">1</span>)<span class=\"comment\">//系数为1时，-1省略</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">1</span>)<span class=\"comment\">//指数为1时省略不写</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-x&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-x^&quot;</span>&lt;&lt;s-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;y==<span class=\"number\">1</span>)<span class=\"comment\">//指数为1时省略不写</span></span><br><span class=\"line\">            cout&lt;&lt;s-&gt;x&lt;&lt;<span class=\"string\">&quot;x&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout&lt;&lt;s-&gt;x&lt;&lt;<span class=\"string\">&quot;x^&quot;</span>&lt;&lt;s-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PrintPolyn(Zl *first)<span class=\"comment\">//利用PrintPoly打印整个多项式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *temp=first-&gt;next;<span class=\"comment\">//表头没有数据，表头的下一个才是多项式的第一个项</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)<span class=\"comment\">//遍历，从第一个打印到倒数第二个</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        PrintPoly(temp);</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp-&gt;x&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;+&quot;</span>;<span class=\"comment\">//只有一个项时此循环不执行，所以直接打印加号即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PrintPoly(temp);<span class=\"comment\">//打印最后一个</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> ListInsert(Zl *first,Zl *s)<span class=\"comment\">//插入，将s节点插入到最后</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *temp=first;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)<span class=\"comment\">//循环找到最后一个节点</span></span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    temp-&gt;next=s;<span class=\"comment\">//插入s</span></span><br><span class=\"line\">    s-&gt;next=NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Zl* InputData(int k)<span class=\"comment\">//输入函数，采用先输入系数后输入次数的方法，k代表是第几个多项式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *first=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//创建多项式链表的头指针</span></span><br><span class=\"line\">    first-&gt;next=NULL;<span class=\"comment\">//头指针初始化</span></span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    int com[<span class=\"number\">100</span>];</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;请输入第%d个多项式的项数：&quot;</span>,k);</span><br><span class=\"line\">    cin&gt;&gt;a;<span class=\"comment\">//接受多项式的项数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&lt;=<span class=\"number\">0</span>)<span class=\"comment\">//确保项数大于0</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;系数输入错误，请关闭程序重新输入&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=<span class=\"number\">1</span>;i&lt;=a;i++)<span class=\"comment\">//循环接收多项式的每个项</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *p=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//用p存下即将读取的数据</span></span><br><span class=\"line\">        p-&gt;next=NULL;</span><br><span class=\"line\">        double m;</span><br><span class=\"line\">        int n;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;请输入第%d项的系数：&quot;</span>,i);</span><br><span class=\"line\">        cin&gt;&gt;m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!m)<span class=\"comment\">//系数不能等于0</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;系数输入错误，请关闭程序重新输入&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;请输入第%d项的次数：&quot;</span>,i);</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        com[i]=n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j=<span class=\"number\">1</span>;j&lt;i;j++)<span class=\"comment\">//循环遍历是否有重复项出现</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n==com[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;次数输入重复，请关闭程序重新输入&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        p-&gt;x=m;<span class=\"comment\">//赋值</span></span><br><span class=\"line\">        p-&gt;y=n;</span><br><span class=\"line\">        ListInsert(first,p);<span class=\"comment\">//将p插入多项式中</span></span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;该多项式可表示为：&quot;</span>);</span><br><span class=\"line\">    PrintPolyn(first);<span class=\"comment\">//打印多项式</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;<span class=\"comment\">//返回多项式的首地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Zl* AddPolyn(Zl *a,Zl*b)<span class=\"comment\">//两个多项式相加的函数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *first=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//创建一个新的链表来存两多项式相加得到的结果</span></span><br><span class=\"line\">    first-&gt;next=NULL;</span><br><span class=\"line\">    Zl *m=a-&gt;next;<span class=\"comment\">//注意，这里表头没有存放数据，表头的下一个才存放的是多项式第一个项</span></span><br><span class=\"line\">    Zl *n=b-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m!=NULL&amp;&amp;n!=NULL)<span class=\"comment\">//有一个表空了就跳出循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *temp=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//和上面的p一样，暂存得到的数据</span></span><br><span class=\"line\">        temp-&gt;next=NULL;</span><br><span class=\"line\">        int num=m-&gt;y-n-&gt;y;<span class=\"comment\">//判断指数的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)<span class=\"comment\">//m的指数小于n</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp-&gt;x=m-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=m-&gt;y;</span><br><span class=\"line\">            ListInsert(first,temp);<span class=\"comment\">//因为m指数小于n，将m的当前项复制过来插入结果链表</span></span><br><span class=\"line\">            m=m-&gt;next;<span class=\"comment\">//指针后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">0</span>)<span class=\"comment\">//m的指数大于n</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp-&gt;x=n-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=n-&gt;y;</span><br><span class=\"line\">            ListInsert(first,temp);<span class=\"comment\">//因为m指数大于n，将n的当前项复制过来插入结果链表</span></span><br><span class=\"line\">            n=n-&gt;next;<span class=\"comment\">//指针后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//m的指数等于n</span></span><br><span class=\"line\">        &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">            double ans=m-&gt;x+n-&gt;x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans!=<span class=\"number\">0</span>)&#123;<span class=\"comment\">//系数和不等于0时系数相加作为新的系数插入结果链表中</span></span><br><span class=\"line\">                temp-&gt;x=ans;</span><br><span class=\"line\">                temp-&gt;y=m-&gt;y;</span><br><span class=\"line\">                ListInsert(first,temp);</span><br><span class=\"line\">            &#125;<span class=\"comment\">//系数和不等于零时直接指针后移即可，由于两种情况都会后移，所以可以合并</span></span><br><span class=\"line\">            m=m-&gt;next;</span><br><span class=\"line\">            n=n-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Zl *templist=<span class=\"keyword\">new</span> Zl;<span class=\"comment\">//创建一个临时链表来将存放可能的剩下的项</span></span><br><span class=\"line\">    templist-&gt;next=NULL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m!=NULL)<span class=\"comment\">//当m链表还有剩余项时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *p=m;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=NULL)<span class=\"comment\">//循环遍历剩下的项</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Zl *temp=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">            temp-&gt;x=p-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=p-&gt;y;</span><br><span class=\"line\">            temp-&gt;next=NULL;<span class=\"comment\">//用temp暂存当前项</span></span><br><span class=\"line\">            ListInsert(templist,temp);<span class=\"comment\">//插入temp</span></span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Zl *temp=first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)<span class=\"comment\">//循环找到结果链表的最后一项</span></span><br><span class=\"line\">            temp=temp-&gt;next;</span><br><span class=\"line\">        temp-&gt;next=templist-&gt;next;<span class=\"comment\">//直接将临时链表接在结果链表后面即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n!=NULL)<span class=\"comment\">//当n链表还有剩余项时，步骤与上面的情况一样</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *p=n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Zl *temp=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">            temp-&gt;x=p-&gt;x;</span><br><span class=\"line\">            temp-&gt;y=p-&gt;y;</span><br><span class=\"line\">            temp-&gt;next=NULL;</span><br><span class=\"line\">            ListInsert(templist,temp);</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Zl *temp=first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp-&gt;next!=NULL)</span><br><span class=\"line\">            temp=temp-&gt;next;</span><br><span class=\"line\">        temp-&gt;next=templist-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;<span class=\"comment\">//返回结果链表的头指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> FreePolyn(Zl *s)<span class=\"comment\">//释空间</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *p=s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s!=NULL)<span class=\"comment\">//遍历链表一个一个释放空间</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=s-&gt;next;</span><br><span class=\"line\">        free(p);</span><br><span class=\"line\">        p=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;/*注意:系数为浮点类型，指数为整数（可为负）类型&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请按指数从小到大的顺序输入多项式。*/&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    Zl *a;<span class=\"comment\">//用来存放多项式1</span></span><br><span class=\"line\">    Zl *b;<span class=\"comment\">//用来存放多项式2</span></span><br><span class=\"line\">    Zl *c;<span class=\"comment\">//用来存放结果多项式</span></span><br><span class=\"line\">    a=InputData(<span class=\"number\">1</span>);<span class=\"comment\">//输入多项式1</span></span><br><span class=\"line\">    b=InputData(<span class=\"number\">2</span>);<span class=\"comment\">//输入多项式2</span></span><br><span class=\"line\">    c=AddPolyn(a,b);<span class=\"comment\">//相加</span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;多项式之和为：&quot;</span>;</span><br><span class=\"line\">    PrintPolyn(c);<span class=\"comment\">//打印结果</span></span><br><span class=\"line\">    FreePolyn(a);<span class=\"comment\">//依次释放链表空间</span></span><br><span class=\"line\">    FreePolyn(b);</span><br><span class=\"line\">    FreePolyn(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行测试和结果：<br><img src=\"1.PNG\" alt=\"xxx\"></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n"},{"title":"串的模式匹配算法","date":"2019-10-27T05:46:14.000Z","_content":"# 1.模式匹配简单算法\nIndex(S,T,pos);\n初始条件：串S和T存在，T是非空串，1≤pos≤StrLength(S)。\n操作结果：若主串S中存在和串T值相同的子串返回它在主串S中第pos个字符之后第一次出现的位置；否则函数值为0。                    \n```javascript\nint Index (String S, String T, int pos) {\n // T为非空串。若主串S中第pos个字符之后存在与 T相等的子串，则返回第一个这样的子串在S中的位置，否则返回0\n  if (pos > 0) {\n    n = StrLength(S);  m = StrLength(T);  i = pos;\n    while ( i <= n-m+1) {\n        SubString (sub, S, i, m);//表示在S串中取从第i位置开始的m长度字串并存在sub里\n        if (StrCompare(sub,T) != 0)   ++i ;//比较，不成功则往后移\n        else return i ;\n    } // while\n  } // if\n  return 0;          // S中不存在与T相等的子串\n} // Index\n\n```\n如果我们不采用串的基本操作的话，还可以这样写\n```javascript\nint Index(SString S, SString T, int pos) {\n// 返回子串T在主串S中第pos个字符之后的位置。若不存在，\n// 则函数值为0。其中，T非空，1≤pos≤StrLength(S)。\n　i = pos;   j = 1;\n    while (i <= S[0] && j <= T[0]) {\n      if (S[i] == T[j]) { ++i;  ++j; }   // 继续比较后继字符\n      else { i = i-j+2;   j = 1; }     // 指针后退重新开始匹配\n    }\n   if (j > T[0])  return  i-T[0];\n   else return 0;\n} // Index\n```\n将S串于T串一个字符一个字符的进行比较，一旦不同则将i退到开始上一次开始比较的位置的下一个，j直接退到T串的串首即可\n设上次一比较在S串中的起始位置为x则  x+j-1=i\n所以x=i-j+1则下一个位置为i-j+2，所以是i=i-j+2\n匹配成功，同样返回首位置，否则返回零\n上述算法时间复杂度最坏都达到了O(m*n);\n<!-- more -->\n# 2.模式匹配的改进算法(KMP算法)\nKMP算法的改进在于：\n每当一趟匹配过程中出现字符比较不相等时，不需回溯i指针，而是利用已经得到的“部分匹配”的结果将模式向右“滑动”尽可能远的一段距离后，继续进行比较，i不动，j向前移\n举个例子\n比较s=‘acabaabaabcacaabc’  t=‘abaabc’\n![xxx](1.png)\n第一次比较时比较到第二个发现不同，于是将j指针移回a　　　\n![xxx](2.png)\n\n接着进行比较，比较到t中的c时发现不一样，但此前已经比较过两次ac,无需再比一次，所以将j指针移到t中的第三个a即可\n\n\n\n\n\n\n![xxx](3.png)\n\n\n\n\n\n\n![xxx](4.png)\n这样就比完了，比上一种方法要少比很多次，效率提高了不少\n在用这种方法时，我们需要知道每次比较不一样时j指针需要回到t串中的那个位置，所以我们用next数组来存放回溯的位置，就串t=‘abaabc’来说，next[j]={0,1,1,2,2,3};j从1开始\n即\n![xxx](5.png)\n\n算法实现如下\n由于我们模式串的数据是从第一个开始存放，为了不浪费空间，这里把模式串的长度放在t[0]里面\n```javascript\nint Index_KMP(SString S, SString T, int pos) {\n     //  1≤pos≤StrLength(S)\n     i = pos;   j = 1;\n     while (i <= S[0] && j <= T[0]) {\n         if (j == 0 || S[i] == T[j]) { ++i;  ++j; }\n                                               // 继续比较后继字符\n        else  j = next[j];         // 模式串向右移动\n     }\n    if (j > T[0])  return  i-T[0];    // 匹配成功\n    else return 0;\n} // Index_KMP\n```\nnext函数\n\n```javascript\nvoid get_next(SString &T, int &next[] ) {\n     // 求模式串T的next函数值并存入数组next\n     i = 1;   next[1] = 0;   j = 0;\n      while (i < T[0]) {\n           if (j == 0 || T[i] == T[j])\n                 {++i;  ++j; next[i] = j; }\n           else  j = next[j];\n      }\n    } // get_next\n```\n\n此外，如果不匹配时发现前面已经比较过的，和将要比较的那个是完全一样的话，就没有比下去的必要了，例如模式串为 aaaab时，如果j=3发现不同，按上一种方法，则应移到j=2经行比较，但j=2时也是a，再比较就相当于多比了一次，这样就有了改进的空间。\n代码如下：\n\n```javascript\nvoid get_nextval(SString &T, int &nextval[]) {\n      i = 1;   nextval[1] = 0;   j = 0;\n      while (i < T[0]) {\n          if (j == 0 || T[i] == T[j]) {\n              ++i;  ++j;\n              if (T[i] != T[j])  next[i] = j;\n              else  nextval[i] = nextval[j];\n         }\n        else  j = nextval[j];\n     }\n  } // get_nextval\n```\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n\n\n\n","source":"_posts/串的模式匹配算法.md","raw":"---\ntitle: 串的模式匹配算法\ndate: 2019-10-27 13:46:14\ntags:\n---\n# 1.模式匹配简单算法\nIndex(S,T,pos);\n初始条件：串S和T存在，T是非空串，1≤pos≤StrLength(S)。\n操作结果：若主串S中存在和串T值相同的子串返回它在主串S中第pos个字符之后第一次出现的位置；否则函数值为0。                    \n```javascript\nint Index (String S, String T, int pos) {\n // T为非空串。若主串S中第pos个字符之后存在与 T相等的子串，则返回第一个这样的子串在S中的位置，否则返回0\n  if (pos > 0) {\n    n = StrLength(S);  m = StrLength(T);  i = pos;\n    while ( i <= n-m+1) {\n        SubString (sub, S, i, m);//表示在S串中取从第i位置开始的m长度字串并存在sub里\n        if (StrCompare(sub,T) != 0)   ++i ;//比较，不成功则往后移\n        else return i ;\n    } // while\n  } // if\n  return 0;          // S中不存在与T相等的子串\n} // Index\n\n```\n如果我们不采用串的基本操作的话，还可以这样写\n```javascript\nint Index(SString S, SString T, int pos) {\n// 返回子串T在主串S中第pos个字符之后的位置。若不存在，\n// 则函数值为0。其中，T非空，1≤pos≤StrLength(S)。\n　i = pos;   j = 1;\n    while (i <= S[0] && j <= T[0]) {\n      if (S[i] == T[j]) { ++i;  ++j; }   // 继续比较后继字符\n      else { i = i-j+2;   j = 1; }     // 指针后退重新开始匹配\n    }\n   if (j > T[0])  return  i-T[0];\n   else return 0;\n} // Index\n```\n将S串于T串一个字符一个字符的进行比较，一旦不同则将i退到开始上一次开始比较的位置的下一个，j直接退到T串的串首即可\n设上次一比较在S串中的起始位置为x则  x+j-1=i\n所以x=i-j+1则下一个位置为i-j+2，所以是i=i-j+2\n匹配成功，同样返回首位置，否则返回零\n上述算法时间复杂度最坏都达到了O(m*n);\n<!-- more -->\n# 2.模式匹配的改进算法(KMP算法)\nKMP算法的改进在于：\n每当一趟匹配过程中出现字符比较不相等时，不需回溯i指针，而是利用已经得到的“部分匹配”的结果将模式向右“滑动”尽可能远的一段距离后，继续进行比较，i不动，j向前移\n举个例子\n比较s=‘acabaabaabcacaabc’  t=‘abaabc’\n![xxx](1.png)\n第一次比较时比较到第二个发现不同，于是将j指针移回a　　　\n![xxx](2.png)\n\n接着进行比较，比较到t中的c时发现不一样，但此前已经比较过两次ac,无需再比一次，所以将j指针移到t中的第三个a即可\n\n\n\n\n\n\n![xxx](3.png)\n\n\n\n\n\n\n![xxx](4.png)\n这样就比完了，比上一种方法要少比很多次，效率提高了不少\n在用这种方法时，我们需要知道每次比较不一样时j指针需要回到t串中的那个位置，所以我们用next数组来存放回溯的位置，就串t=‘abaabc’来说，next[j]={0,1,1,2,2,3};j从1开始\n即\n![xxx](5.png)\n\n算法实现如下\n由于我们模式串的数据是从第一个开始存放，为了不浪费空间，这里把模式串的长度放在t[0]里面\n```javascript\nint Index_KMP(SString S, SString T, int pos) {\n     //  1≤pos≤StrLength(S)\n     i = pos;   j = 1;\n     while (i <= S[0] && j <= T[0]) {\n         if (j == 0 || S[i] == T[j]) { ++i;  ++j; }\n                                               // 继续比较后继字符\n        else  j = next[j];         // 模式串向右移动\n     }\n    if (j > T[0])  return  i-T[0];    // 匹配成功\n    else return 0;\n} // Index_KMP\n```\nnext函数\n\n```javascript\nvoid get_next(SString &T, int &next[] ) {\n     // 求模式串T的next函数值并存入数组next\n     i = 1;   next[1] = 0;   j = 0;\n      while (i < T[0]) {\n           if (j == 0 || T[i] == T[j])\n                 {++i;  ++j; next[i] = j; }\n           else  j = next[j];\n      }\n    } // get_next\n```\n\n此外，如果不匹配时发现前面已经比较过的，和将要比较的那个是完全一样的话，就没有比下去的必要了，例如模式串为 aaaab时，如果j=3发现不同，按上一种方法，则应移到j=2经行比较，但j=2时也是a，再比较就相当于多比了一次，这样就有了改进的空间。\n代码如下：\n\n```javascript\nvoid get_nextval(SString &T, int &nextval[]) {\n      i = 1;   nextval[1] = 0;   j = 0;\n      while (i < T[0]) {\n          if (j == 0 || T[i] == T[j]) {\n              ++i;  ++j;\n              if (T[i] != T[j])  next[i] = j;\n              else  nextval[i] = nextval[j];\n         }\n        else  j = nextval[j];\n     }\n  } // get_nextval\n```\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n\n\n\n","slug":"串的模式匹配算法","published":1,"updated":"2020-05-04T08:11:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7v000l7suugqcvdsph","content":"<h1><span id=\"1模式匹配简单算法\">1.模式匹配简单算法</span></h1><p>Index(S,T,pos);<br>初始条件：串S和T存在，T是非空串，1≤pos≤StrLength(S)。<br>操作结果：若主串S中存在和串T值相同的子串返回它在主串S中第pos个字符之后第一次出现的位置；否则函数值为0。<br><pre class=\"highlight\"><span class=\"line\">int Index (<span class=\"built_in\">String</span> S, <span class=\"built_in\">String</span> T, int pos) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// T为非空串。若主串S中第pos个字符之后存在与 T相等的子串，则返回第一个这样的子串在S中的位置，否则返回0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    n = StrLength(S);  m = StrLength(T);  i = pos;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( i &lt;= n-m+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        SubString (sub, S, i, m);<span class=\"comment\">//表示在S串中取从第i位置开始的m长度字串并存在sub里</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StrCompare(sub,T) != <span class=\"number\">0</span>)   ++i ;<span class=\"comment\">//比较，不成功则往后移</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i ;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// while</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">// if</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;          <span class=\"comment\">// S中不存在与T相等的子串</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// Index</span></span><br><span class=\"line\"></span><br></pre><br>如果我们不采用串的基本操作的话，还可以这样写<br><pre class=\"highlight\"><span class=\"line\">int <span class=\"function\"><span class=\"title\">Index</span>(<span class=\"params\">SString S, SString T, int pos</span>)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 返回子串T在主串S中第pos个字符之后的位置。若不存在，</span></span><br><span class=\"line\"><span class=\"comment\">// 则函数值为0。其中，T非空，1≤pos≤StrLength(S)。</span></span><br><span class=\"line\">　i = pos;   j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= S[<span class=\"number\">0</span>] &amp;&amp; j &lt;= T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (S[i] == T[j]) &#123; ++i;  ++j; &#125;   <span class=\"comment\">// 继续比较后继字符</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123; i = i-j+<span class=\"number\">2</span>;   j = <span class=\"number\">1</span>; &#125;     <span class=\"comment\">// 指针后退重新开始匹配</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (j &gt; T[<span class=\"number\">0</span>])  <span class=\"keyword\">return</span>  i-T[<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// Index</span></span><br></pre><br>将S串于T串一个字符一个字符的进行比较，一旦不同则将i退到开始上一次开始比较的位置的下一个，j直接退到T串的串首即可<br>设上次一比较在S串中的起始位置为x则  x+j-1=i<br>所以x=i-j+1则下一个位置为i-j+2，所以是i=i-j+2<br>匹配成功，同样返回首位置，否则返回零<br>上述算法时间复杂度最坏都达到了O(m*n);<br><span id=\"more\"></span></p>\n<h1><span id=\"2模式匹配的改进算法kmp算法\">2.模式匹配的改进算法(KMP算法)</span></h1><p>KMP算法的改进在于：<br>每当一趟匹配过程中出现字符比较不相等时，不需回溯i指针，而是利用已经得到的“部分匹配”的结果将模式向右“滑动”尽可能远的一段距离后，继续进行比较，i不动，j向前移<br>举个例子<br>比较s=‘acabaabaabcacaabc’  t=‘abaabc’<br><img src=\"1.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"1.png\" class=\"lozad post-image\"><br>第一次比较时比较到第二个发现不同，于是将j指针移回a　　　<br><img src=\"2.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"2.png\" class=\"lozad post-image\"></p>\n<p>接着进行比较，比较到t中的c时发现不一样，但此前已经比较过两次ac,无需再比一次，所以将j指针移到t中的第三个a即可</p>\n<p><img src=\"3.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"3.png\" class=\"lozad post-image\"></p>\n<p><img src=\"4.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"4.png\" class=\"lozad post-image\"><br>这样就比完了，比上一种方法要少比很多次，效率提高了不少<br>在用这种方法时，我们需要知道每次比较不一样时j指针需要回到t串中的那个位置，所以我们用next数组来存放回溯的位置，就串t=‘abaabc’来说，next[j]={0,1,1,2,2,3};j从1开始<br>即<br><img src=\"5.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"5.png\" class=\"lozad post-image\"></p>\n<p>算法实现如下<br>由于我们模式串的数据是从第一个开始存放，为了不浪费空间，这里把模式串的长度放在t[0]里面<br><pre class=\"highlight\"><span class=\"line\">int <span class=\"function\"><span class=\"title\">Index_KMP</span>(<span class=\"params\">SString S, SString T, int pos</span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//  1≤pos≤StrLength(S)</span></span><br><span class=\"line\">     i = pos;   j = <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (i &lt;= S[<span class=\"number\">0</span>] &amp;&amp; j &lt;= T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || S[i] == T[j]) &#123; ++i;  ++j; &#125;</span><br><span class=\"line\">                                               <span class=\"comment\">// 继续比较后继字符</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  j = next[j];         <span class=\"comment\">// 模式串向右移动</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &gt; T[<span class=\"number\">0</span>])  <span class=\"keyword\">return</span>  i-T[<span class=\"number\">0</span>];    <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// Index_KMP</span></span><br></pre><br>next函数</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">get_next</span>(<span class=\"params\">SString &amp;T, int &amp;next[] </span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 求模式串T的next函数值并存入数组next</span></span><br><span class=\"line\">     i = <span class=\"number\">1</span>;   next[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;   j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || T[i] == T[j])</span><br><span class=\"line\">                 &#123;++i;  ++j; next[i] = j; &#125;</span><br><span class=\"line\">           <span class=\"keyword\">else</span>  j = next[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// get_next</span></span><br></pre>\n<p>此外，如果不匹配时发现前面已经比较过的，和将要比较的那个是完全一样的话，就没有比下去的必要了，例如模式串为 aaaab时，如果j=3发现不同，按上一种方法，则应移到j=2经行比较，但j=2时也是a，再比较就相当于多比了一次，这样就有了改进的空间。<br>代码如下：</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">get_nextval</span>(<span class=\"params\">SString &amp;T, int &amp;nextval[]</span>)</span> &#123;</span><br><span class=\"line\">      i = <span class=\"number\">1</span>;   nextval[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;   j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || T[i] == T[j]) &#123;</span><br><span class=\"line\">              ++i;  ++j;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (T[i] != T[j])  next[i] = j;</span><br><span class=\"line\">              <span class=\"keyword\">else</span>  nextval[i] = nextval[j];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  j = nextval[j];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125; <span class=\"comment\">// get_nextval</span></span><br></pre>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-模式匹配简单算法\"><a href=\"#1-模式匹配简单算法\" class=\"headerlink\" title=\"1.模式匹配简单算法\"></a>1.模式匹配简单算法</h1><p>Index(S,T,pos);<br>初始条件：串S和T存在，T是非空串，1≤pos≤StrLength(S)。<br>操作结果：若主串S中存在和串T值相同的子串返回它在主串S中第pos个字符之后第一次出现的位置；否则函数值为0。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int Index (<span class=\"built_in\">String</span> S, <span class=\"built_in\">String</span> T, int pos) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// T为非空串。若主串S中第pos个字符之后存在与 T相等的子串，则返回第一个这样的子串在S中的位置，否则返回0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    n = StrLength(S);  m = StrLength(T);  i = pos;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( i &lt;= n-m+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        SubString (sub, S, i, m);<span class=\"comment\">//表示在S串中取从第i位置开始的m长度字串并存在sub里</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StrCompare(sub,T) != <span class=\"number\">0</span>)   ++i ;<span class=\"comment\">//比较，不成功则往后移</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i ;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// while</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">// if</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;          <span class=\"comment\">// S中不存在与T相等的子串</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// Index</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>如果我们不采用串的基本操作的话，还可以这样写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">Index</span>(<span class=\"params\">SString S, SString T, int pos</span>)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 返回子串T在主串S中第pos个字符之后的位置。若不存在，</span></span><br><span class=\"line\"><span class=\"comment\">// 则函数值为0。其中，T非空，1≤pos≤StrLength(S)。</span></span><br><span class=\"line\">　i = pos;   j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= S[<span class=\"number\">0</span>] &amp;&amp; j &lt;= T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (S[i] == T[j]) &#123; ++i;  ++j; &#125;   <span class=\"comment\">// 继续比较后继字符</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123; i = i-j+<span class=\"number\">2</span>;   j = <span class=\"number\">1</span>; &#125;     <span class=\"comment\">// 指针后退重新开始匹配</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (j &gt; T[<span class=\"number\">0</span>])  <span class=\"keyword\">return</span>  i-T[<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// Index</span></span><br></pre></td></tr></table></figure><br>将S串于T串一个字符一个字符的进行比较，一旦不同则将i退到开始上一次开始比较的位置的下一个，j直接退到T串的串首即可<br>设上次一比较在S串中的起始位置为x则  x+j-1=i<br>所以x=i-j+1则下一个位置为i-j+2，所以是i=i-j+2<br>匹配成功，同样返回首位置，否则返回零<br>上述算法时间复杂度最坏都达到了O(m*n);<br>","more":"</p>\n<h1 id=\"2-模式匹配的改进算法-KMP算法\"><a href=\"#2-模式匹配的改进算法-KMP算法\" class=\"headerlink\" title=\"2.模式匹配的改进算法(KMP算法)\"></a>2.模式匹配的改进算法(KMP算法)</h1><p>KMP算法的改进在于：<br>每当一趟匹配过程中出现字符比较不相等时，不需回溯i指针，而是利用已经得到的“部分匹配”的结果将模式向右“滑动”尽可能远的一段距离后，继续进行比较，i不动，j向前移<br>举个例子<br>比较s=‘acabaabaabcacaabc’  t=‘abaabc’<br><img src=\"1.png\" alt=\"xxx\"><br>第一次比较时比较到第二个发现不同，于是将j指针移回a　　　<br><img src=\"2.png\" alt=\"xxx\"></p>\n<p>接着进行比较，比较到t中的c时发现不一样，但此前已经比较过两次ac,无需再比一次，所以将j指针移到t中的第三个a即可</p>\n<p><img src=\"3.png\" alt=\"xxx\"></p>\n<p><img src=\"4.png\" alt=\"xxx\"><br>这样就比完了，比上一种方法要少比很多次，效率提高了不少<br>在用这种方法时，我们需要知道每次比较不一样时j指针需要回到t串中的那个位置，所以我们用next数组来存放回溯的位置，就串t=‘abaabc’来说，next[j]={0,1,1,2,2,3};j从1开始<br>即<br><img src=\"5.png\" alt=\"xxx\"></p>\n<p>算法实现如下<br>由于我们模式串的数据是从第一个开始存放，为了不浪费空间，这里把模式串的长度放在t[0]里面<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">Index_KMP</span>(<span class=\"params\">SString S, SString T, int pos</span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//  1≤pos≤StrLength(S)</span></span><br><span class=\"line\">     i = pos;   j = <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (i &lt;= S[<span class=\"number\">0</span>] &amp;&amp; j &lt;= T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || S[i] == T[j]) &#123; ++i;  ++j; &#125;</span><br><span class=\"line\">                                               <span class=\"comment\">// 继续比较后继字符</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  j = next[j];         <span class=\"comment\">// 模式串向右移动</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &gt; T[<span class=\"number\">0</span>])  <span class=\"keyword\">return</span>  i-T[<span class=\"number\">0</span>];    <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// Index_KMP</span></span><br></pre></td></tr></table></figure><br>next函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">get_next</span>(<span class=\"params\">SString &amp;T, int &amp;next[] </span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 求模式串T的next函数值并存入数组next</span></span><br><span class=\"line\">     i = <span class=\"number\">1</span>;   next[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;   j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || T[i] == T[j])</span><br><span class=\"line\">                 &#123;++i;  ++j; next[i] = j; &#125;</span><br><span class=\"line\">           <span class=\"keyword\">else</span>  j = next[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// get_next</span></span><br></pre></td></tr></table></figure>\n<p>此外，如果不匹配时发现前面已经比较过的，和将要比较的那个是完全一样的话，就没有比下去的必要了，例如模式串为 aaaab时，如果j=3发现不同，按上一种方法，则应移到j=2经行比较，但j=2时也是a，再比较就相当于多比了一次，这样就有了改进的空间。<br>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">get_nextval</span>(<span class=\"params\">SString &amp;T, int &amp;nextval[]</span>)</span> &#123;</span><br><span class=\"line\">      i = <span class=\"number\">1</span>;   nextval[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;   j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; T[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || T[i] == T[j]) &#123;</span><br><span class=\"line\">              ++i;  ++j;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (T[i] != T[j])  next[i] = j;</span><br><span class=\"line\">              <span class=\"keyword\">else</span>  nextval[i] = nextval[j];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  j = nextval[j];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125; <span class=\"comment\">// get_nextval</span></span><br></pre></td></tr></table></figure>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>"},{"title":"二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构","date":"2019-12-01T13:58:19.000Z","_content":"直接上代码（有注释）：\n```javascript\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\n\nint x=1;//节点编号\n\ntypedef struct Zl//二叉树的节点\n{\n    char data;//数据域\n    struct Zl *lchild,*rchild;//指向左子树和右子树的指针\n    int index;//每个节点的编号\n}Zl;\n\ntypedef struct Static//静态链表的结点\n{\n\tchar data;\t//数据域\n\tint lchild;  //指向左子树的指针域\n\tint rchild;  //指向右子树的指针域\n}Static;\n\nZl* PreOrderInitBTree()//先序建立二叉树\n{\n\tZl *T;\n\tchar temp;\n\tcin>>temp;//由键盘输入结点数据域的值\n\tif(temp =='0')  //若某一节点为叶子结点，则其左右子树均为NULL，0表示建空树\n\t    T=NULL; \n\telse\n\t{\n\t\tT=new Zl;\n\t\tT->data=temp;\n\t\tT->index=x++;\n\t\tT->lchild=PreOrderInitBTree();//递归创建其左子树\n\t\tT->rchild=PreOrderInitBTree();//递归创建其右子树\n\t}\n\treturn T;                              //返回根节点\n}\n\nvoid PreOrderTraverse(Zl *first)//先序遍历及输出二叉树\n{\n    if(first!=NULL)\n    {\n        cout<<first->data;//先输出结点值\n        PreOrderTraverse(first->lchild);\n        PreOrderTraverse(first->rchild);\n    }\n}\n\nvoid MidOrderTraverse(Zl *first)//中序遍历并输出二叉树\n{\n    if(first!=NULL)\n    {\n        MidOrderTraverse(first->lchild);\n        cout<<first->data;//先遍历完左子树再输出结点值\n        MidOrderTraverse(first->rchild);\n    }\n}\n\nvoid cengciTraverse(Zl *p)//层次遍历二叉树\n{\n    queue<Zl> qe;//用队列来存放结点\n    qe.push(*p);\n    while(qe.empty()==false)//只要结点不为空就继续\n    {\n        Zl temp=qe.front();//将将要出队的结点值储存在temp中\n        qe.pop();\n        if(temp.lchild!=NULL)\n            qe.push(*temp.lchild);//左孩子入队\n        if(temp.rchild!=NULL)\n            qe.push(*temp.rchild);//右孩子入队，按照先左后右的顺序入队，确保出队顺序\n        cout<<temp.data;//输出结点值\n    }\n}\n\nvoid Scopy(Static *s,Zl *p)//将动态二叉链表转化为静态链表\n{\n    s[p->index].data=p->data;//数据同步过来\n    if(p->lchild==NULL)//左孩子为空时\n        s[p->index].lchild=0;\n    else\n    {\n        s[p->index].lchild=p->lchild->index;//同步左孩子信息\n        Scopy(s,p->lchild);//递归同步左子树\n    }\n    if(p->rchild==NULL)//左孩子为空时\n        s[p->index].rchild=0;\n    else\n    {\n        s[p->index].rchild=p->rchild->index;//同步右孩子信息\n        Scopy(s,p->rchild);//递归同步右子树\n    }\n}\n\nvoid Destory(Zl *p)//删除单个结点\n{\n    free(p);\n}\n\nvoid Clean(Zl *first)//整表删除\n{\n    if(first!=NULL)\n    {\n        Clean(first->lchild);\n        Clean(first->rchild);\n    }\n    free(first);\n}\n\nint main()\n{\n    Zl *first;\n    cout<<\"请按先序顺序输入二叉树序列，0代表空\"<<endl;\n    first=PreOrderInitBTree();\n    cout<<\"先序输出：\"<<endl;\n    PreOrderTraverse(first);//先序遍历输出\n    cout<<endl;\n    cout<<\"中序输出\"<<endl;\n    MidOrderTraverse(first);//中序遍历输出\n    cout<<endl;\n    cout<<\"层次遍历输出\"<<endl;\n    cengciTraverse(first);//层次遍历输出\n    cout<<endl;\n    Static s[20];\n    Scopy(s,first);\n    cout<<\"静态链表输出：\"<<endl;\n    for(int i=1;i<x;i++)//输出静态链表\n    {\n        cout<<\"下标为:\"<<i<<\" 数据:\"<<s[i].data<<\" 左孩子下标:\"<<s[i].lchild<<\" 右孩子下标:\"<<s[i].rchild<<endl;//依次输出结点值及左子树编号和右子树编号\n    }\n    Clean(first);\n    return 0;\n}\n```\n<!-- more -->\n这棵二叉树的逻辑结构为：\n![xxx](2.png)\n程序运行结果：\n![xxx](1.PNG)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","source":"_posts/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构.md","raw":"---\ntitle: 二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构\ndate: 2019-12-01 21:58:19\ntags:\n---\n直接上代码（有注释）：\n```javascript\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\n\nint x=1;//节点编号\n\ntypedef struct Zl//二叉树的节点\n{\n    char data;//数据域\n    struct Zl *lchild,*rchild;//指向左子树和右子树的指针\n    int index;//每个节点的编号\n}Zl;\n\ntypedef struct Static//静态链表的结点\n{\n\tchar data;\t//数据域\n\tint lchild;  //指向左子树的指针域\n\tint rchild;  //指向右子树的指针域\n}Static;\n\nZl* PreOrderInitBTree()//先序建立二叉树\n{\n\tZl *T;\n\tchar temp;\n\tcin>>temp;//由键盘输入结点数据域的值\n\tif(temp =='0')  //若某一节点为叶子结点，则其左右子树均为NULL，0表示建空树\n\t    T=NULL; \n\telse\n\t{\n\t\tT=new Zl;\n\t\tT->data=temp;\n\t\tT->index=x++;\n\t\tT->lchild=PreOrderInitBTree();//递归创建其左子树\n\t\tT->rchild=PreOrderInitBTree();//递归创建其右子树\n\t}\n\treturn T;                              //返回根节点\n}\n\nvoid PreOrderTraverse(Zl *first)//先序遍历及输出二叉树\n{\n    if(first!=NULL)\n    {\n        cout<<first->data;//先输出结点值\n        PreOrderTraverse(first->lchild);\n        PreOrderTraverse(first->rchild);\n    }\n}\n\nvoid MidOrderTraverse(Zl *first)//中序遍历并输出二叉树\n{\n    if(first!=NULL)\n    {\n        MidOrderTraverse(first->lchild);\n        cout<<first->data;//先遍历完左子树再输出结点值\n        MidOrderTraverse(first->rchild);\n    }\n}\n\nvoid cengciTraverse(Zl *p)//层次遍历二叉树\n{\n    queue<Zl> qe;//用队列来存放结点\n    qe.push(*p);\n    while(qe.empty()==false)//只要结点不为空就继续\n    {\n        Zl temp=qe.front();//将将要出队的结点值储存在temp中\n        qe.pop();\n        if(temp.lchild!=NULL)\n            qe.push(*temp.lchild);//左孩子入队\n        if(temp.rchild!=NULL)\n            qe.push(*temp.rchild);//右孩子入队，按照先左后右的顺序入队，确保出队顺序\n        cout<<temp.data;//输出结点值\n    }\n}\n\nvoid Scopy(Static *s,Zl *p)//将动态二叉链表转化为静态链表\n{\n    s[p->index].data=p->data;//数据同步过来\n    if(p->lchild==NULL)//左孩子为空时\n        s[p->index].lchild=0;\n    else\n    {\n        s[p->index].lchild=p->lchild->index;//同步左孩子信息\n        Scopy(s,p->lchild);//递归同步左子树\n    }\n    if(p->rchild==NULL)//左孩子为空时\n        s[p->index].rchild=0;\n    else\n    {\n        s[p->index].rchild=p->rchild->index;//同步右孩子信息\n        Scopy(s,p->rchild);//递归同步右子树\n    }\n}\n\nvoid Destory(Zl *p)//删除单个结点\n{\n    free(p);\n}\n\nvoid Clean(Zl *first)//整表删除\n{\n    if(first!=NULL)\n    {\n        Clean(first->lchild);\n        Clean(first->rchild);\n    }\n    free(first);\n}\n\nint main()\n{\n    Zl *first;\n    cout<<\"请按先序顺序输入二叉树序列，0代表空\"<<endl;\n    first=PreOrderInitBTree();\n    cout<<\"先序输出：\"<<endl;\n    PreOrderTraverse(first);//先序遍历输出\n    cout<<endl;\n    cout<<\"中序输出\"<<endl;\n    MidOrderTraverse(first);//中序遍历输出\n    cout<<endl;\n    cout<<\"层次遍历输出\"<<endl;\n    cengciTraverse(first);//层次遍历输出\n    cout<<endl;\n    Static s[20];\n    Scopy(s,first);\n    cout<<\"静态链表输出：\"<<endl;\n    for(int i=1;i<x;i++)//输出静态链表\n    {\n        cout<<\"下标为:\"<<i<<\" 数据:\"<<s[i].data<<\" 左孩子下标:\"<<s[i].lchild<<\" 右孩子下标:\"<<s[i].rchild<<endl;//依次输出结点值及左子树编号和右子树编号\n    }\n    Clean(first);\n    return 0;\n}\n```\n<!-- more -->\n这棵二叉树的逻辑结构为：\n![xxx](2.png)\n程序运行结果：\n![xxx](1.PNG)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","slug":"二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构","published":1,"updated":"2020-05-04T08:11:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7w000n7suuf7wg6xw4","content":"<p>直接上代码（有注释）：<br><pre class=\"highlight\"><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdlib&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int x=<span class=\"number\">1</span>;<span class=\"comment\">//节点编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Zl<span class=\"comment\">//二叉树的节点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    struct Zl *lchild,*rchild;<span class=\"comment\">//指向左子树和右子树的指针</span></span><br><span class=\"line\">    int index;<span class=\"comment\">//每个节点的编号</span></span><br><span class=\"line\">&#125;Zl;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Static<span class=\"comment\">//静态链表的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar data;\t<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\tint lchild;  <span class=\"comment\">//指向左子树的指针域</span></span><br><span class=\"line\">\tint rchild;  <span class=\"comment\">//指向右子树的指针域</span></span><br><span class=\"line\">&#125;Static;</span><br><span class=\"line\"></span><br><span class=\"line\">Zl* PreOrderInitBTree()<span class=\"comment\">//先序建立二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tZl *T;</span><br><span class=\"line\">\tchar temp;</span><br><span class=\"line\">\tcin&gt;&gt;temp;<span class=\"comment\">//由键盘输入结点数据域的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(temp ==<span class=\"string\">&#x27;0&#x27;</span>)  <span class=\"comment\">//若某一节点为叶子结点，则其左右子树均为NULL，0表示建空树</span></span><br><span class=\"line\">\t    T=NULL; </span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tT=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">\t\tT-&gt;data=temp;</span><br><span class=\"line\">\t\tT-&gt;index=x++;</span><br><span class=\"line\">\t\tT-&gt;lchild=PreOrderInitBTree();<span class=\"comment\">//递归创建其左子树</span></span><br><span class=\"line\">\t\tT-&gt;rchild=PreOrderInitBTree();<span class=\"comment\">//递归创建其右子树</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> T;                              <span class=\"comment\">//返回根节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PreOrderTraverse(Zl *first)<span class=\"comment\">//先序遍历及输出二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;first-&gt;data;<span class=\"comment\">//先输出结点值</span></span><br><span class=\"line\">        PreOrderTraverse(first-&gt;lchild);</span><br><span class=\"line\">        PreOrderTraverse(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MidOrderTraverse(Zl *first)<span class=\"comment\">//中序遍历并输出二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MidOrderTraverse(first-&gt;lchild);</span><br><span class=\"line\">        cout&lt;&lt;first-&gt;data;<span class=\"comment\">//先遍历完左子树再输出结点值</span></span><br><span class=\"line\">        MidOrderTraverse(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> cengciTraverse(Zl *p)<span class=\"comment\">//层次遍历二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Zl&gt; qe;<span class=\"comment\">//用队列来存放结点</span></span><br><span class=\"line\">    qe.push(*p);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(qe.empty()==<span class=\"literal\">false</span>)<span class=\"comment\">//只要结点不为空就继续</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl temp=qe.front();<span class=\"comment\">//将将要出队的结点值储存在temp中</span></span><br><span class=\"line\">        qe.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.lchild!=NULL)</span><br><span class=\"line\">            qe.push(*temp.lchild);<span class=\"comment\">//左孩子入队</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.rchild!=NULL)</span><br><span class=\"line\">            qe.push(*temp.rchild);<span class=\"comment\">//右孩子入队，按照先左后右的顺序入队，确保出队顺序</span></span><br><span class=\"line\">        cout&lt;&lt;temp.data;<span class=\"comment\">//输出结点值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Scopy(Static *s,Zl *p)<span class=\"comment\">//将动态二叉链表转化为静态链表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    s[p-&gt;index].data=p-&gt;data;<span class=\"comment\">//数据同步过来</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;lchild==NULL)<span class=\"comment\">//左孩子为空时</span></span><br><span class=\"line\">        s[p-&gt;index].lchild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p-&gt;index].lchild=p-&gt;lchild-&gt;index;<span class=\"comment\">//同步左孩子信息</span></span><br><span class=\"line\">        Scopy(s,p-&gt;lchild);<span class=\"comment\">//递归同步左子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;rchild==NULL)<span class=\"comment\">//左孩子为空时</span></span><br><span class=\"line\">        s[p-&gt;index].rchild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p-&gt;index].rchild=p-&gt;rchild-&gt;index;<span class=\"comment\">//同步右孩子信息</span></span><br><span class=\"line\">        Scopy(s,p-&gt;rchild);<span class=\"comment\">//递归同步右子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Destory(Zl *p)<span class=\"comment\">//删除单个结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Clean(Zl *first)<span class=\"comment\">//整表删除</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Clean(first-&gt;lchild);</span><br><span class=\"line\">        Clean(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    free(first);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *first;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请按先序顺序输入二叉树序列，0代表空&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    first=PreOrderInitBTree();</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;先序输出：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    PreOrderTraverse(first);<span class=\"comment\">//先序遍历输出</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;中序输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    MidOrderTraverse(first);<span class=\"comment\">//中序遍历输出</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;层次遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cengciTraverse(first);<span class=\"comment\">//层次遍历输出</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    Static s[<span class=\"number\">20</span>];</span><br><span class=\"line\">    Scopy(s,first);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;静态链表输出：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=<span class=\"number\">1</span>;i&lt;x;i++)<span class=\"comment\">//输出静态链表</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;下标为:&quot;</span>&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; 数据:&quot;</span>&lt;&lt;s[i].data&lt;&lt;<span class=\"string\">&quot; 左孩子下标:&quot;</span>&lt;&lt;s[i].lchild&lt;&lt;<span class=\"string\">&quot; 右孩子下标:&quot;</span>&lt;&lt;s[i].rchild&lt;&lt;endl;<span class=\"comment\">//依次输出结点值及左子树编号和右子树编号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Clean(first);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre><br><span id=\"more\"></span><br>这棵二叉树的逻辑结构为：<br><img src=\"2.png\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"2.png\" class=\"lozad post-image\"><br>程序运行结果：<br><img src=\"1.PNG\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"1.PNG\" class=\"lozad post-image\"></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"<p>直接上代码（有注释）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdlib&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int x=<span class=\"number\">1</span>;<span class=\"comment\">//节点编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Zl<span class=\"comment\">//二叉树的节点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    struct Zl *lchild,*rchild;<span class=\"comment\">//指向左子树和右子树的指针</span></span><br><span class=\"line\">    int index;<span class=\"comment\">//每个节点的编号</span></span><br><span class=\"line\">&#125;Zl;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Static<span class=\"comment\">//静态链表的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar data;\t<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\tint lchild;  <span class=\"comment\">//指向左子树的指针域</span></span><br><span class=\"line\">\tint rchild;  <span class=\"comment\">//指向右子树的指针域</span></span><br><span class=\"line\">&#125;Static;</span><br><span class=\"line\"></span><br><span class=\"line\">Zl* PreOrderInitBTree()<span class=\"comment\">//先序建立二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tZl *T;</span><br><span class=\"line\">\tchar temp;</span><br><span class=\"line\">\tcin&gt;&gt;temp;<span class=\"comment\">//由键盘输入结点数据域的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(temp ==<span class=\"string\">&#x27;0&#x27;</span>)  <span class=\"comment\">//若某一节点为叶子结点，则其左右子树均为NULL，0表示建空树</span></span><br><span class=\"line\">\t    T=NULL; </span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tT=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">\t\tT-&gt;data=temp;</span><br><span class=\"line\">\t\tT-&gt;index=x++;</span><br><span class=\"line\">\t\tT-&gt;lchild=PreOrderInitBTree();<span class=\"comment\">//递归创建其左子树</span></span><br><span class=\"line\">\t\tT-&gt;rchild=PreOrderInitBTree();<span class=\"comment\">//递归创建其右子树</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> T;                              <span class=\"comment\">//返回根节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PreOrderTraverse(Zl *first)<span class=\"comment\">//先序遍历及输出二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;first-&gt;data;<span class=\"comment\">//先输出结点值</span></span><br><span class=\"line\">        PreOrderTraverse(first-&gt;lchild);</span><br><span class=\"line\">        PreOrderTraverse(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MidOrderTraverse(Zl *first)<span class=\"comment\">//中序遍历并输出二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MidOrderTraverse(first-&gt;lchild);</span><br><span class=\"line\">        cout&lt;&lt;first-&gt;data;<span class=\"comment\">//先遍历完左子树再输出结点值</span></span><br><span class=\"line\">        MidOrderTraverse(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> cengciTraverse(Zl *p)<span class=\"comment\">//层次遍历二叉树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Zl&gt; qe;<span class=\"comment\">//用队列来存放结点</span></span><br><span class=\"line\">    qe.push(*p);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(qe.empty()==<span class=\"literal\">false</span>)<span class=\"comment\">//只要结点不为空就继续</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl temp=qe.front();<span class=\"comment\">//将将要出队的结点值储存在temp中</span></span><br><span class=\"line\">        qe.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.lchild!=NULL)</span><br><span class=\"line\">            qe.push(*temp.lchild);<span class=\"comment\">//左孩子入队</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.rchild!=NULL)</span><br><span class=\"line\">            qe.push(*temp.rchild);<span class=\"comment\">//右孩子入队，按照先左后右的顺序入队，确保出队顺序</span></span><br><span class=\"line\">        cout&lt;&lt;temp.data;<span class=\"comment\">//输出结点值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Scopy(Static *s,Zl *p)<span class=\"comment\">//将动态二叉链表转化为静态链表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    s[p-&gt;index].data=p-&gt;data;<span class=\"comment\">//数据同步过来</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;lchild==NULL)<span class=\"comment\">//左孩子为空时</span></span><br><span class=\"line\">        s[p-&gt;index].lchild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p-&gt;index].lchild=p-&gt;lchild-&gt;index;<span class=\"comment\">//同步左孩子信息</span></span><br><span class=\"line\">        Scopy(s,p-&gt;lchild);<span class=\"comment\">//递归同步左子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;rchild==NULL)<span class=\"comment\">//左孩子为空时</span></span><br><span class=\"line\">        s[p-&gt;index].rchild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p-&gt;index].rchild=p-&gt;rchild-&gt;index;<span class=\"comment\">//同步右孩子信息</span></span><br><span class=\"line\">        Scopy(s,p-&gt;rchild);<span class=\"comment\">//递归同步右子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Destory(Zl *p)<span class=\"comment\">//删除单个结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Clean(Zl *first)<span class=\"comment\">//整表删除</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Clean(first-&gt;lchild);</span><br><span class=\"line\">        Clean(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    free(first);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *first;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请按先序顺序输入二叉树序列，0代表空&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    first=PreOrderInitBTree();</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;先序输出：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    PreOrderTraverse(first);<span class=\"comment\">//先序遍历输出</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;中序输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    MidOrderTraverse(first);<span class=\"comment\">//中序遍历输出</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;层次遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cengciTraverse(first);<span class=\"comment\">//层次遍历输出</span></span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    Static s[<span class=\"number\">20</span>];</span><br><span class=\"line\">    Scopy(s,first);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;静态链表输出：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=<span class=\"number\">1</span>;i&lt;x;i++)<span class=\"comment\">//输出静态链表</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;下标为:&quot;</span>&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; 数据:&quot;</span>&lt;&lt;s[i].data&lt;&lt;<span class=\"string\">&quot; 左孩子下标:&quot;</span>&lt;&lt;s[i].lchild&lt;&lt;<span class=\"string\">&quot; 右孩子下标:&quot;</span>&lt;&lt;s[i].rchild&lt;&lt;endl;<span class=\"comment\">//依次输出结点值及左子树编号和右子树编号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Clean(first);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>","more":"<br>这棵二叉树的逻辑结构为：<br><img src=\"2.png\" alt=\"xxx\"><br>程序运行结果：<br><img src=\"1.PNG\" alt=\"xxx\"></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>"},{"title":"人的三个20岁","date":"2021-04-25T10:42:23.000Z","_content":"\n# 随便写写\n\n这是我在被室友的键盘声吵醒时的突发奇想，便想着第二天写个博客，哈哈\n\n前情提要:自己其实也就20出头，没那没多的人生阅历，写着玩玩，不喜勿喷 \n\n\n\n人生大抵也就3个20多岁\n\n​        第一个20多岁是从你呱呱落地到你有了自己的第一个孩子，对于大多数人来讲，这20多岁是最安全最舒服的20多岁，也是最没有主见的20多岁。一直活在父母的庇护之下，无需为生活操心，也无需为自己的言行负责。在这20多年当中，学习是主旋律，从小学到初中，从高中到大学，多数人还会选择考研，但最开始其实我们也不知道为什么要学习，也没有想过，只知道，学习就对了，事实也是如此，在毕业后展现得尤为清楚。\n\n​        第二个20多岁是从你第一个孩子出生到你的孩子的孩子出生，对于大多数人来讲，这20多岁是压力骤增的20多岁，也是最有机会成功的20多岁，在这20多年，你要考虑买房，买车，照顾父母，养育孩子，总的来说，就是赚钱加教育，你身上扛着3代人的压力，为此你必须努力，虽然不一定成功，但也必须努力，你已经不止是你自己，努力过后，有一小部分人会变成别人眼里的成功人士，月入百万，豪车别墅，但真的算不算成功呢，其实只有他自己知道。\n\n​        第三个20多岁是你的孙子出生到你的生命结束，这可能是你最舒适的20多岁，也可能是你最痛苦的20多岁。你此时就快到了退休的年龄，或者已经退休，只等着安享晚年，子女已经长大成人，无需过多操心，每天跟老伴过好自己就行，虽然年事已高，但只要是你想做的事，努努力还是能做到的毕竟，此时不做，更待何时呢。同时你也会遭受病痛的折磨，年轻时留下的病根子接二连三的暴露出来，这时你会意识到，留给你的时间可能已经不多了，尽量做完想做的事情，就可以安享晚年了，盼望着儿女不时的看望，平时就看看电视，打打游戏，等待着人生的结束。\n\n","source":"_posts/人的三个20岁.md","raw":"---\ntitle: 人的三个20岁\ndate: 2021-04-25 18:42:23\ntags: 随笔\n---\n\n# 随便写写\n\n这是我在被室友的键盘声吵醒时的突发奇想，便想着第二天写个博客，哈哈\n\n前情提要:自己其实也就20出头，没那没多的人生阅历，写着玩玩，不喜勿喷 \n\n\n\n人生大抵也就3个20多岁\n\n​        第一个20多岁是从你呱呱落地到你有了自己的第一个孩子，对于大多数人来讲，这20多岁是最安全最舒服的20多岁，也是最没有主见的20多岁。一直活在父母的庇护之下，无需为生活操心，也无需为自己的言行负责。在这20多年当中，学习是主旋律，从小学到初中，从高中到大学，多数人还会选择考研，但最开始其实我们也不知道为什么要学习，也没有想过，只知道，学习就对了，事实也是如此，在毕业后展现得尤为清楚。\n\n​        第二个20多岁是从你第一个孩子出生到你的孩子的孩子出生，对于大多数人来讲，这20多岁是压力骤增的20多岁，也是最有机会成功的20多岁，在这20多年，你要考虑买房，买车，照顾父母，养育孩子，总的来说，就是赚钱加教育，你身上扛着3代人的压力，为此你必须努力，虽然不一定成功，但也必须努力，你已经不止是你自己，努力过后，有一小部分人会变成别人眼里的成功人士，月入百万，豪车别墅，但真的算不算成功呢，其实只有他自己知道。\n\n​        第三个20多岁是你的孙子出生到你的生命结束，这可能是你最舒适的20多岁，也可能是你最痛苦的20多岁。你此时就快到了退休的年龄，或者已经退休，只等着安享晚年，子女已经长大成人，无需过多操心，每天跟老伴过好自己就行，虽然年事已高，但只要是你想做的事，努努力还是能做到的毕竟，此时不做，更待何时呢。同时你也会遭受病痛的折磨，年轻时留下的病根子接二连三的暴露出来，这时你会意识到，留给你的时间可能已经不多了，尽量做完想做的事情，就可以安享晚年了，盼望着儿女不时的看望，平时就看看电视，打打游戏，等待着人生的结束。\n\n","slug":"人的三个20岁","published":1,"updated":"2021-04-25T11:37:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7y000p7suug3nf9ex3","content":"<h1><span id=\"随便写写\">随便写写</span></h1><p>这是我在被室友的键盘声吵醒时的突发奇想，便想着第二天写个博客，哈哈</p>\n<p>前情提要:自己其实也就20出头，没那没多的人生阅历，写着玩玩，不喜勿喷 </p>\n<p>人生大抵也就3个20多岁</p>\n<p>​        第一个20多岁是从你呱呱落地到你有了自己的第一个孩子，对于大多数人来讲，这20多岁是最安全最舒服的20多岁，也是最没有主见的20多岁。一直活在父母的庇护之下，无需为生活操心，也无需为自己的言行负责。在这20多年当中，学习是主旋律，从小学到初中，从高中到大学，多数人还会选择考研，但最开始其实我们也不知道为什么要学习，也没有想过，只知道，学习就对了，事实也是如此，在毕业后展现得尤为清楚。</p>\n<p>​        第二个20多岁是从你第一个孩子出生到你的孩子的孩子出生，对于大多数人来讲，这20多岁是压力骤增的20多岁，也是最有机会成功的20多岁，在这20多年，你要考虑买房，买车，照顾父母，养育孩子，总的来说，就是赚钱加教育，你身上扛着3代人的压力，为此你必须努力，虽然不一定成功，但也必须努力，你已经不止是你自己，努力过后，有一小部分人会变成别人眼里的成功人士，月入百万，豪车别墅，但真的算不算成功呢，其实只有他自己知道。</p>\n<p>​        第三个20多岁是你的孙子出生到你的生命结束，这可能是你最舒适的20多岁，也可能是你最痛苦的20多岁。你此时就快到了退休的年龄，或者已经退休，只等着安享晚年，子女已经长大成人，无需过多操心，每天跟老伴过好自己就行，虽然年事已高，但只要是你想做的事，努努力还是能做到的毕竟，此时不做，更待何时呢。同时你也会遭受病痛的折磨，年轻时留下的病根子接二连三的暴露出来，这时你会意识到，留给你的时间可能已经不多了，尽量做完想做的事情，就可以安享晚年了，盼望着儿女不时的看望，平时就看看电视，打打游戏，等待着人生的结束。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"随便写写\"><a href=\"#随便写写\" class=\"headerlink\" title=\"随便写写\"></a>随便写写</h1><p>这是我在被室友的键盘声吵醒时的突发奇想，便想着第二天写个博客，哈哈</p>\n<p>前情提要:自己其实也就20出头，没那没多的人生阅历，写着玩玩，不喜勿喷 </p>\n<p>人生大抵也就3个20多岁</p>\n<p>​        第一个20多岁是从你呱呱落地到你有了自己的第一个孩子，对于大多数人来讲，这20多岁是最安全最舒服的20多岁，也是最没有主见的20多岁。一直活在父母的庇护之下，无需为生活操心，也无需为自己的言行负责。在这20多年当中，学习是主旋律，从小学到初中，从高中到大学，多数人还会选择考研，但最开始其实我们也不知道为什么要学习，也没有想过，只知道，学习就对了，事实也是如此，在毕业后展现得尤为清楚。</p>\n<p>​        第二个20多岁是从你第一个孩子出生到你的孩子的孩子出生，对于大多数人来讲，这20多岁是压力骤增的20多岁，也是最有机会成功的20多岁，在这20多年，你要考虑买房，买车，照顾父母，养育孩子，总的来说，就是赚钱加教育，你身上扛着3代人的压力，为此你必须努力，虽然不一定成功，但也必须努力，你已经不止是你自己，努力过后，有一小部分人会变成别人眼里的成功人士，月入百万，豪车别墅，但真的算不算成功呢，其实只有他自己知道。</p>\n<p>​        第三个20多岁是你的孙子出生到你的生命结束，这可能是你最舒适的20多岁，也可能是你最痛苦的20多岁。你此时就快到了退休的年龄，或者已经退休，只等着安享晚年，子女已经长大成人，无需过多操心，每天跟老伴过好自己就行，虽然年事已高，但只要是你想做的事，努努力还是能做到的毕竟，此时不做，更待何时呢。同时你也会遭受病痛的折磨，年轻时留下的病根子接二连三的暴露出来，这时你会意识到，留给你的时间可能已经不多了，尽量做完想做的事情，就可以安享晚年了，盼望着儿女不时的看望，平时就看看电视，打打游戏，等待着人生的结束。</p>\n"},{"title":"关于自己考研以来的一些思考","date":"2021-09-17T14:00:39.000Z","_content":"\n# 1，保研\n\n这个其实是最近才有一个很真实的感受，我多么希望有人在大一就告诉我这些（虽然我大概率也不会听），本人成绩算是在上游，没挂过科（体育考了一次63哈哈），这次保研","source":"_posts/关于自己考研以来的一些思考.md","raw":"---\ntitle: 关于自己考研以来的一些思考\ndate: 2021-09-17 22:00:39\ntags: 随笔\n---\n\n# 1，保研\n\n这个其实是最近才有一个很真实的感受，我多么希望有人在大一就告诉我这些（虽然我大概率也不会听），本人成绩算是在上游，没挂过科（体育考了一次63哈哈），这次保研","slug":"关于自己考研以来的一些思考","published":1,"updated":"2021-09-17T14:03:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn7z000q7suu98jq9ou4","content":"<h1><span id=\"1保研\">1，保研</span></h1><p>这个其实是最近才有一个很真实的感受，我多么希望有人在大一就告诉我这些（虽然我大概率也不会听），本人成绩算是在上游，没挂过科（体育考了一次63哈哈），这次保研</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1，保研\"><a href=\"#1，保研\" class=\"headerlink\" title=\"1，保研\"></a>1，保研</h1><p>这个其实是最近才有一个很真实的感受，我多么希望有人在大一就告诉我这些（虽然我大概率也不会听），本人成绩算是在上游，没挂过科（体育考了一次63哈哈），这次保研</p>\n"},{"title":"动态查找（查找，插入及删除）","date":"2019-12-12T10:59:31.000Z","_content":"\n看代码啦\n```javascript\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\ntypedef struct Zl//二叉查找表的结点\n{\n    char data;//结点的值\n    int count;//结点出现的次数\n    Zl *lchild,*rchild;//左右孩子\n}Zl;\n\nbool Search(Zl *T,char key,Zl *f,Zl* &p)//查找操作\n{\n    if(T==NULL)//此时找不到\n    {\n        p=f;//记住最后访问的结点\n        return false;\n    }\n    else if(T->data==key)//找到了\n    {\n        p=T;//记录找到的结点\n        return true;\n    }\n    else if(T->data>key)//如果目标值小于当前值则到左子树进行查找\n    {\n        return Search(T->lchild,key,T,p);\n    }\n    else//大于则到右子树进行查找\n    {\n        return Search(T->rchild,key,T,p);\n    }\n}\n\nbool Insert(Zl* &T,char elem)//插入操作，也是建立二叉查找树的操作\n{\n    Zl *p,*f;//p用来记住要找的结点，f指向当前节点的双亲结点\n    p=NULL;\n    f=NULL;\n    if(Search(T,elem,f,p)==true)//找到了\n    {\n        p->count++;//个数加一\n        return false;\n    }\n    else//没找到则插入\n    {\n        Zl *temp;\n        temp=new Zl;\n        temp->data=elem;\n        temp->lchild=temp->rchild=NULL;\n        temp->count=1;\n        if(!p) T=temp;//数为空时直接将值赋给根节点\n        else if(elem<p->data)//小于时则插入到左子树\n        {\n            p->lchild=temp;\n        }\n        else//大于时则插入到右子树\n        {\n            p->rchild=temp;\n        }\n        return true;\n    }\n}\n\nbool Delete(Zl* &p)//删除p指针指向的结点\n{\n    Zl* q;\n    if(p->lchild==NULL&&p->rchild==NULL)//既没有左子树也没有右子树时\n    {\n        q=p;\n        p=NULL;\n        free(q);\n    }\n    else if(p->lchild==NULL)//只有右子树时\n    {\n        q=p;\n        p=p->rchild;//直接将p结点的右子树接到p结点的位置\n        free(q);\n    }\n    else if(p->rchild==NULL)//只有左子树时\n    {\n        q=p;\n        p=p->lchild;//直接将p结点的左子树接到p结点的位置\n        free(q);\n    }\n    else//既有左子树也有右子树时\n    {\n        q=p;\n        Zl *temp;\n        temp=p->lchild;\n        while(temp->rchild)//找到左子树中最右的结点，即中序遍历序列中上一个访问的结点\n        {\n            q=temp;\n            temp=temp->rchild;\n        }\n        p->data=temp->data;//将根节点置为找到的结点，然后删除找到的结点，该节点一定没有右子树\n        if(p!=q)\n            q->rchild=temp->lchild;//将删除结点的左子树接到他的双亲结点的右子树上\n        else//p=q时，说明p的左子树无右孩子，直接接上即可\n            p->lchild=temp->lchild;\n        free(temp);\n    }\n    return true;\n}\n\nbool DeleteBST(Zl* &T,char key)//删除树中所有等于key的结点\n{\n    if(!T) return false;\n    else\n    {\n        if(T->data==key) return Delete(T);\n        else if(T->data>key) return DeleteBST(T->lchild,key);\n        else return DeleteBST(T->rchild,key);\n    }\n}\n\n\n\nvoid MidOrderTraverse(Zl *p)//中序遍历输出\n{\n    if(p!=NULL)\n    {\n        MidOrderTraverse(p->lchild);\n        cout<<'['<<p->data<<':'<<p->count<<']'<<endl;\n        MidOrderTraverse(p->rchild);\n    }\n}\n\nvoid XainOrderTraverse(Zl *p)//先序遍历输出\n{\n    if(p!=NULL)\n    {\n        cout<<'['<<p->data<<':'<<p->count<<']'<<endl;\n        MidOrderTraverse(p->lchild);\n        MidOrderTraverse(p->rchild);\n    }\n}\n\nvoid HouOrderTraverse(Zl *p)//后序遍历输出\n{\n    if(p!=NULL)\n    {\n        MidOrderTraverse(p->lchild);\n        MidOrderTraverse(p->rchild);\n        cout<<'['<<p->data<<':'<<p->count<<']'<<endl;\n    }\n}\n\nvoid Clean(Zl *first)//释放二叉查找树\n{\n    if(first!=NULL)\n    {\n        free(first);\n        Clean(first->lchild);\n        Clean(first->rchild);\n    }\n}\n\nint main()\n{\n    Zl *T;\n    T=NULL;\n    char s[100];\n    cout<<\"请输入待统计的内容\"<<endl;\n    gets(s);//用gets接收来接收空格\n    for(int i=0;i<strlen(s);i++)\n    {\n        Insert(T,s[i]);\n    }\n    DeleteBST(T,' ');\n    cout<<\"1.前序遍历输出\"<<endl;\n    cout<<\"2.中序遍历输出\"<<endl;\n    cout<<\"3.后序遍历输出\"<<endl;\n    cout<<\"0.退出\"<<endl;\n    cout<<\"请选择菜单项：\"<<endl;\n    int a;\n    while(1)\n    {\n        cin>>a;\n        if(a==1)\n            XainOrderTraverse(T);\n        else if(a==2)\n            MidOrderTraverse(T);\n        else if(a==3)\n            HouOrderTraverse(T);\n        else\n            break;\n    }\n\n    Clean(T);\n    return 0;\n}\n```\n测试数据：\n```javascript\nEvery man loves what he is good at.\n```\n运行结果:\n![xxx](1.PNG)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","source":"_posts/动态查找（查找，插入及删除）.md","raw":"---\ntitle: 动态查找（查找，插入及删除）\ndate: 2019-12-12 18:59:31\ntags:\n---\n\n看代码啦\n```javascript\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\ntypedef struct Zl//二叉查找表的结点\n{\n    char data;//结点的值\n    int count;//结点出现的次数\n    Zl *lchild,*rchild;//左右孩子\n}Zl;\n\nbool Search(Zl *T,char key,Zl *f,Zl* &p)//查找操作\n{\n    if(T==NULL)//此时找不到\n    {\n        p=f;//记住最后访问的结点\n        return false;\n    }\n    else if(T->data==key)//找到了\n    {\n        p=T;//记录找到的结点\n        return true;\n    }\n    else if(T->data>key)//如果目标值小于当前值则到左子树进行查找\n    {\n        return Search(T->lchild,key,T,p);\n    }\n    else//大于则到右子树进行查找\n    {\n        return Search(T->rchild,key,T,p);\n    }\n}\n\nbool Insert(Zl* &T,char elem)//插入操作，也是建立二叉查找树的操作\n{\n    Zl *p,*f;//p用来记住要找的结点，f指向当前节点的双亲结点\n    p=NULL;\n    f=NULL;\n    if(Search(T,elem,f,p)==true)//找到了\n    {\n        p->count++;//个数加一\n        return false;\n    }\n    else//没找到则插入\n    {\n        Zl *temp;\n        temp=new Zl;\n        temp->data=elem;\n        temp->lchild=temp->rchild=NULL;\n        temp->count=1;\n        if(!p) T=temp;//数为空时直接将值赋给根节点\n        else if(elem<p->data)//小于时则插入到左子树\n        {\n            p->lchild=temp;\n        }\n        else//大于时则插入到右子树\n        {\n            p->rchild=temp;\n        }\n        return true;\n    }\n}\n\nbool Delete(Zl* &p)//删除p指针指向的结点\n{\n    Zl* q;\n    if(p->lchild==NULL&&p->rchild==NULL)//既没有左子树也没有右子树时\n    {\n        q=p;\n        p=NULL;\n        free(q);\n    }\n    else if(p->lchild==NULL)//只有右子树时\n    {\n        q=p;\n        p=p->rchild;//直接将p结点的右子树接到p结点的位置\n        free(q);\n    }\n    else if(p->rchild==NULL)//只有左子树时\n    {\n        q=p;\n        p=p->lchild;//直接将p结点的左子树接到p结点的位置\n        free(q);\n    }\n    else//既有左子树也有右子树时\n    {\n        q=p;\n        Zl *temp;\n        temp=p->lchild;\n        while(temp->rchild)//找到左子树中最右的结点，即中序遍历序列中上一个访问的结点\n        {\n            q=temp;\n            temp=temp->rchild;\n        }\n        p->data=temp->data;//将根节点置为找到的结点，然后删除找到的结点，该节点一定没有右子树\n        if(p!=q)\n            q->rchild=temp->lchild;//将删除结点的左子树接到他的双亲结点的右子树上\n        else//p=q时，说明p的左子树无右孩子，直接接上即可\n            p->lchild=temp->lchild;\n        free(temp);\n    }\n    return true;\n}\n\nbool DeleteBST(Zl* &T,char key)//删除树中所有等于key的结点\n{\n    if(!T) return false;\n    else\n    {\n        if(T->data==key) return Delete(T);\n        else if(T->data>key) return DeleteBST(T->lchild,key);\n        else return DeleteBST(T->rchild,key);\n    }\n}\n\n\n\nvoid MidOrderTraverse(Zl *p)//中序遍历输出\n{\n    if(p!=NULL)\n    {\n        MidOrderTraverse(p->lchild);\n        cout<<'['<<p->data<<':'<<p->count<<']'<<endl;\n        MidOrderTraverse(p->rchild);\n    }\n}\n\nvoid XainOrderTraverse(Zl *p)//先序遍历输出\n{\n    if(p!=NULL)\n    {\n        cout<<'['<<p->data<<':'<<p->count<<']'<<endl;\n        MidOrderTraverse(p->lchild);\n        MidOrderTraverse(p->rchild);\n    }\n}\n\nvoid HouOrderTraverse(Zl *p)//后序遍历输出\n{\n    if(p!=NULL)\n    {\n        MidOrderTraverse(p->lchild);\n        MidOrderTraverse(p->rchild);\n        cout<<'['<<p->data<<':'<<p->count<<']'<<endl;\n    }\n}\n\nvoid Clean(Zl *first)//释放二叉查找树\n{\n    if(first!=NULL)\n    {\n        free(first);\n        Clean(first->lchild);\n        Clean(first->rchild);\n    }\n}\n\nint main()\n{\n    Zl *T;\n    T=NULL;\n    char s[100];\n    cout<<\"请输入待统计的内容\"<<endl;\n    gets(s);//用gets接收来接收空格\n    for(int i=0;i<strlen(s);i++)\n    {\n        Insert(T,s[i]);\n    }\n    DeleteBST(T,' ');\n    cout<<\"1.前序遍历输出\"<<endl;\n    cout<<\"2.中序遍历输出\"<<endl;\n    cout<<\"3.后序遍历输出\"<<endl;\n    cout<<\"0.退出\"<<endl;\n    cout<<\"请选择菜单项：\"<<endl;\n    int a;\n    while(1)\n    {\n        cin>>a;\n        if(a==1)\n            XainOrderTraverse(T);\n        else if(a==2)\n            MidOrderTraverse(T);\n        else if(a==3)\n            HouOrderTraverse(T);\n        else\n            break;\n    }\n\n    Clean(T);\n    return 0;\n}\n```\n测试数据：\n```javascript\nEvery man loves what he is good at.\n```\n运行结果:\n![xxx](1.PNG)\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","slug":"动态查找（查找，插入及删除）","published":1,"updated":"2020-05-04T08:11:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn80000t7suug5hk52sk","content":"<p>看代码啦<br><pre class=\"highlight\"><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdlib&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Zl<span class=\"comment\">//二叉查找表的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char data;<span class=\"comment\">//结点的值</span></span><br><span class=\"line\">    int count;<span class=\"comment\">//结点出现的次数</span></span><br><span class=\"line\">    Zl *lchild,*rchild;<span class=\"comment\">//左右孩子</span></span><br><span class=\"line\">&#125;Zl;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Search(Zl *T,char key,Zl *f,Zl* &amp;p)<span class=\"comment\">//查找操作</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T==NULL)<span class=\"comment\">//此时找不到</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=f;<span class=\"comment\">//记住最后访问的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;data==key)<span class=\"comment\">//找到了</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=T;<span class=\"comment\">//记录找到的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;data&gt;key)<span class=\"comment\">//如果目标值小于当前值则到左子树进行查找</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Search(T-&gt;lchild,key,T,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//大于则到右子树进行查找</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Search(T-&gt;rchild,key,T,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Insert(Zl* &amp;T,char elem)<span class=\"comment\">//插入操作，也是建立二叉查找树的操作</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *p,*f;<span class=\"comment\">//p用来记住要找的结点，f指向当前节点的双亲结点</span></span><br><span class=\"line\">    p=NULL;</span><br><span class=\"line\">    f=NULL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Search(T,elem,f,p)==<span class=\"literal\">true</span>)<span class=\"comment\">//找到了</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p-&gt;count++;<span class=\"comment\">//个数加一</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//没找到则插入</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *temp;</span><br><span class=\"line\">        temp=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">        temp-&gt;data=elem;</span><br><span class=\"line\">        temp-&gt;lchild=temp-&gt;rchild=NULL;</span><br><span class=\"line\">        temp-&gt;count=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p) T=temp;<span class=\"comment\">//数为空时直接将值赋给根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(elem&lt;p-&gt;data)<span class=\"comment\">//小于时则插入到左子树</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p-&gt;lchild=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//大于时则插入到右子树</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p-&gt;rchild=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Delete(Zl* &amp;p)<span class=\"comment\">//删除p指针指向的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl* q;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;lchild==NULL&amp;&amp;p-&gt;rchild==NULL)<span class=\"comment\">//既没有左子树也没有右子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=NULL;</span><br><span class=\"line\">        free(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p-&gt;lchild==NULL)<span class=\"comment\">//只有右子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=p-&gt;rchild;<span class=\"comment\">//直接将p结点的右子树接到p结点的位置</span></span><br><span class=\"line\">        free(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p-&gt;rchild==NULL)<span class=\"comment\">//只有左子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=p-&gt;lchild;<span class=\"comment\">//直接将p结点的左子树接到p结点的位置</span></span><br><span class=\"line\">        free(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//既有左子树也有右子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        Zl *temp;</span><br><span class=\"line\">        temp=p-&gt;lchild;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp-&gt;rchild)<span class=\"comment\">//找到左子树中最右的结点，即中序遍历序列中上一个访问的结点</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q=temp;</span><br><span class=\"line\">            temp=temp-&gt;rchild;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;data=temp-&gt;data;<span class=\"comment\">//将根节点置为找到的结点，然后删除找到的结点，该节点一定没有右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p!=q)</span><br><span class=\"line\">            q-&gt;rchild=temp-&gt;lchild;<span class=\"comment\">//将删除结点的左子树接到他的双亲结点的右子树上</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//p=q时，说明p的左子树无右孩子，直接接上即可</span></span><br><span class=\"line\">            p-&gt;lchild=temp-&gt;lchild;</span><br><span class=\"line\">        free(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool DeleteBST(Zl* &amp;T,char key)<span class=\"comment\">//删除树中所有等于key的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!T) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T-&gt;data==key) <span class=\"keyword\">return</span> Delete(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;data&gt;key) <span class=\"keyword\">return</span> DeleteBST(T-&gt;lchild,key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> DeleteBST(T-&gt;rchild,key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MidOrderTraverse(Zl *p)<span class=\"comment\">//中序遍历输出</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;lchild);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;[&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class=\"string\">&#x27;:&#x27;</span>&lt;&lt;p-&gt;count&lt;&lt;<span class=\"string\">&#x27;]&#x27;</span>&lt;&lt;endl;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> XainOrderTraverse(Zl *p)<span class=\"comment\">//先序遍历输出</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;[&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class=\"string\">&#x27;:&#x27;</span>&lt;&lt;p-&gt;count&lt;&lt;<span class=\"string\">&#x27;]&#x27;</span>&lt;&lt;endl;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;lchild);</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> HouOrderTraverse(Zl *p)<span class=\"comment\">//后序遍历输出</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;lchild);</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;rchild);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;[&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class=\"string\">&#x27;:&#x27;</span>&lt;&lt;p-&gt;count&lt;&lt;<span class=\"string\">&#x27;]&#x27;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Clean(Zl *first)<span class=\"comment\">//释放二叉查找树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        free(first);</span><br><span class=\"line\">        Clean(first-&gt;lchild);</span><br><span class=\"line\">        Clean(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *T;</span><br><span class=\"line\">    T=NULL;</span><br><span class=\"line\">    char s[<span class=\"number\">100</span>];</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请输入待统计的内容&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    gets(s);<span class=\"comment\">//用gets接收来接收空格</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=<span class=\"number\">0</span>;i&lt;strlen(s);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert(T,s[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DeleteBST(T,<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;1.前序遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;2.中序遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;3.后序遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;0.退出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请选择菜单项：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)</span><br><span class=\"line\">            XainOrderTraverse(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==<span class=\"number\">2</span>)</span><br><span class=\"line\">            MidOrderTraverse(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==<span class=\"number\">3</span>)</span><br><span class=\"line\">            HouOrderTraverse(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Clean(T);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre><br>测试数据：<br><pre class=\"highlight\"><span class=\"line\">Every man loves what he is good at.</span><br></pre><br>运行结果:<br><img src=\"1.PNG\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"1.PNG\" class=\"lozad post-image\"></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>看代码啦<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdlib&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct Zl<span class=\"comment\">//二叉查找表的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char data;<span class=\"comment\">//结点的值</span></span><br><span class=\"line\">    int count;<span class=\"comment\">//结点出现的次数</span></span><br><span class=\"line\">    Zl *lchild,*rchild;<span class=\"comment\">//左右孩子</span></span><br><span class=\"line\">&#125;Zl;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Search(Zl *T,char key,Zl *f,Zl* &amp;p)<span class=\"comment\">//查找操作</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T==NULL)<span class=\"comment\">//此时找不到</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=f;<span class=\"comment\">//记住最后访问的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;data==key)<span class=\"comment\">//找到了</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=T;<span class=\"comment\">//记录找到的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;data&gt;key)<span class=\"comment\">//如果目标值小于当前值则到左子树进行查找</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Search(T-&gt;lchild,key,T,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//大于则到右子树进行查找</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Search(T-&gt;rchild,key,T,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Insert(Zl* &amp;T,char elem)<span class=\"comment\">//插入操作，也是建立二叉查找树的操作</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *p,*f;<span class=\"comment\">//p用来记住要找的结点，f指向当前节点的双亲结点</span></span><br><span class=\"line\">    p=NULL;</span><br><span class=\"line\">    f=NULL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Search(T,elem,f,p)==<span class=\"literal\">true</span>)<span class=\"comment\">//找到了</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p-&gt;count++;<span class=\"comment\">//个数加一</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//没找到则插入</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Zl *temp;</span><br><span class=\"line\">        temp=<span class=\"keyword\">new</span> Zl;</span><br><span class=\"line\">        temp-&gt;data=elem;</span><br><span class=\"line\">        temp-&gt;lchild=temp-&gt;rchild=NULL;</span><br><span class=\"line\">        temp-&gt;count=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p) T=temp;<span class=\"comment\">//数为空时直接将值赋给根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(elem&lt;p-&gt;data)<span class=\"comment\">//小于时则插入到左子树</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p-&gt;lchild=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//大于时则插入到右子树</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p-&gt;rchild=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Delete(Zl* &amp;p)<span class=\"comment\">//删除p指针指向的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl* q;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;lchild==NULL&amp;&amp;p-&gt;rchild==NULL)<span class=\"comment\">//既没有左子树也没有右子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=NULL;</span><br><span class=\"line\">        free(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p-&gt;lchild==NULL)<span class=\"comment\">//只有右子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=p-&gt;rchild;<span class=\"comment\">//直接将p结点的右子树接到p结点的位置</span></span><br><span class=\"line\">        free(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p-&gt;rchild==NULL)<span class=\"comment\">//只有左子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=p-&gt;lchild;<span class=\"comment\">//直接将p结点的左子树接到p结点的位置</span></span><br><span class=\"line\">        free(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//既有左子树也有右子树时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        Zl *temp;</span><br><span class=\"line\">        temp=p-&gt;lchild;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp-&gt;rchild)<span class=\"comment\">//找到左子树中最右的结点，即中序遍历序列中上一个访问的结点</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q=temp;</span><br><span class=\"line\">            temp=temp-&gt;rchild;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;data=temp-&gt;data;<span class=\"comment\">//将根节点置为找到的结点，然后删除找到的结点，该节点一定没有右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p!=q)</span><br><span class=\"line\">            q-&gt;rchild=temp-&gt;lchild;<span class=\"comment\">//将删除结点的左子树接到他的双亲结点的右子树上</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//p=q时，说明p的左子树无右孩子，直接接上即可</span></span><br><span class=\"line\">            p-&gt;lchild=temp-&gt;lchild;</span><br><span class=\"line\">        free(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool DeleteBST(Zl* &amp;T,char key)<span class=\"comment\">//删除树中所有等于key的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!T) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T-&gt;data==key) <span class=\"keyword\">return</span> Delete(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;data&gt;key) <span class=\"keyword\">return</span> DeleteBST(T-&gt;lchild,key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> DeleteBST(T-&gt;rchild,key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MidOrderTraverse(Zl *p)<span class=\"comment\">//中序遍历输出</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;lchild);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;[&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class=\"string\">&#x27;:&#x27;</span>&lt;&lt;p-&gt;count&lt;&lt;<span class=\"string\">&#x27;]&#x27;</span>&lt;&lt;endl;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> XainOrderTraverse(Zl *p)<span class=\"comment\">//先序遍历输出</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;[&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class=\"string\">&#x27;:&#x27;</span>&lt;&lt;p-&gt;count&lt;&lt;<span class=\"string\">&#x27;]&#x27;</span>&lt;&lt;endl;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;lchild);</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> HouOrderTraverse(Zl *p)<span class=\"comment\">//后序遍历输出</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;lchild);</span><br><span class=\"line\">        MidOrderTraverse(p-&gt;rchild);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;[&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class=\"string\">&#x27;:&#x27;</span>&lt;&lt;p-&gt;count&lt;&lt;<span class=\"string\">&#x27;]&#x27;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Clean(Zl *first)<span class=\"comment\">//释放二叉查找树</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        free(first);</span><br><span class=\"line\">        Clean(first-&gt;lchild);</span><br><span class=\"line\">        Clean(first-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zl *T;</span><br><span class=\"line\">    T=NULL;</span><br><span class=\"line\">    char s[<span class=\"number\">100</span>];</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请输入待统计的内容&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    gets(s);<span class=\"comment\">//用gets接收来接收空格</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=<span class=\"number\">0</span>;i&lt;strlen(s);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert(T,s[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DeleteBST(T,<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;1.前序遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;2.中序遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;3.后序遍历输出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;0.退出&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;请选择菜单项：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)</span><br><span class=\"line\">            XainOrderTraverse(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==<span class=\"number\">2</span>)</span><br><span class=\"line\">            MidOrderTraverse(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==<span class=\"number\">3</span>)</span><br><span class=\"line\">            HouOrderTraverse(T);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Clean(T);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Every man loves what he is good at.</span><br></pre></td></tr></table></figure><br>运行结果:<br><img src=\"1.PNG\" alt=\"xxx\"></p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n"},{"title":"基本JAVA_WEB项目","date":"2020-07-29T07:42:33.000Z","_content":"# Javaweb实训学习\n\n由于疫情原因只能呆在家，但也阻止不了学校的实习呀，本次实习采用网上教学的方式,老师讲的东西有点多，在这里总结一下。\n\n## 1，准备工作\n\n安装好JDK,Mysql,eclipse或idea,navicat,tomcat（最基础的版本，没有用到框架）\n\n## 2,大致流程\n\n1,需求分析\n\n对你的目标项目做一个大致分析，找出需要可能需要实现的功能。\t\t\n\n2,页面设计\n\n设计出最终项目的所有静态页面，在实际项目中一般用于做展示。\n\n3，数据库设计\n\n根据你要实现的功能设计出对应的数据库表结构\n\n4，实际代码编写\n\n将代码部署到tomcat上，在本地进行查看与调试\n\n## 3，详细流程（以KFC网页端点餐为例）\n\n1，需求分析\n\n要点餐，首先要登陆，然后要将要点的东西加入购物车，最后进行结算。\n\n想要快速的找到商品，分类与搜索是必须要的，同时需要能够查看到商品详情。\n\n对于购物车中的货物可以经行勾选，勾中才会结算，同时在购物车页面实现商品数量的加减\n\n对于之前的订单可以在历史订单中找到，在历史订单详情页中找到自己之前买了啥\n\n2，页面设计\n\n包含登陆页面，主页面，商品页，商品详情页，购物车页面，历史订单页，订单详情页\n\n在设计这些页面时会用到jstl以及er表达式，需要添加依赖包以及在jsp文件开始加上一段说明\n\n3，数据库设计\n\n要能登陆，需要user表经行登陆判断\n\n显示商品，需要一个food表，以及foodtype商品分类表\n\n显示订单需要order表，以及orderdetail订单详情表\n\n这里在实际中对于外键并没有直接设置，而是在创建一个键，用0，1表示这个数据是否存在，便于数据的删除，但在这里为了简便，没有经行类似的设置。\n\n4，实际代码编写\n\n在eclipse创建一个JAVA项目\n\n首先是与数据库建立连接,即JDBC,需要提前导入JDBC对应的的依赖包，在properties中配置好信息后，创建一个工具类来封装JDBC的方法来建立连接，然后创建实体层entity来与数据库中的表相对应，DAO层写入对应的方法（这里的方法只能是直接用sql语句就能完成的方法），然后在DAOImpl中实现这些方法，正常流程是再创建service层来封装更高级的方法，由于这个项目的方法需求比较简单，所以直接调用DAO层方法来实现就行。在conroller层中编写servlet与用户的需求经行对接，正常时是调用service层方法，这里为了简单直接调用DAO层方法。\n\n![xxx](1.PNG)\n\n[代码下载](https://pan.baidu.com/s/1Oa_UYstTzfb2cQwVSRa_Og) 提取码adsi\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","source":"_posts/基本JAVA-WEB项目.md","raw":"---\ntitle: 基本JAVA_WEB项目\ndate: 2020-07-29 15:42:33\ntags:\n\n---\n# Javaweb实训学习\n\n由于疫情原因只能呆在家，但也阻止不了学校的实习呀，本次实习采用网上教学的方式,老师讲的东西有点多，在这里总结一下。\n\n## 1，准备工作\n\n安装好JDK,Mysql,eclipse或idea,navicat,tomcat（最基础的版本，没有用到框架）\n\n## 2,大致流程\n\n1,需求分析\n\n对你的目标项目做一个大致分析，找出需要可能需要实现的功能。\t\t\n\n2,页面设计\n\n设计出最终项目的所有静态页面，在实际项目中一般用于做展示。\n\n3，数据库设计\n\n根据你要实现的功能设计出对应的数据库表结构\n\n4，实际代码编写\n\n将代码部署到tomcat上，在本地进行查看与调试\n\n## 3，详细流程（以KFC网页端点餐为例）\n\n1，需求分析\n\n要点餐，首先要登陆，然后要将要点的东西加入购物车，最后进行结算。\n\n想要快速的找到商品，分类与搜索是必须要的，同时需要能够查看到商品详情。\n\n对于购物车中的货物可以经行勾选，勾中才会结算，同时在购物车页面实现商品数量的加减\n\n对于之前的订单可以在历史订单中找到，在历史订单详情页中找到自己之前买了啥\n\n2，页面设计\n\n包含登陆页面，主页面，商品页，商品详情页，购物车页面，历史订单页，订单详情页\n\n在设计这些页面时会用到jstl以及er表达式，需要添加依赖包以及在jsp文件开始加上一段说明\n\n3，数据库设计\n\n要能登陆，需要user表经行登陆判断\n\n显示商品，需要一个food表，以及foodtype商品分类表\n\n显示订单需要order表，以及orderdetail订单详情表\n\n这里在实际中对于外键并没有直接设置，而是在创建一个键，用0，1表示这个数据是否存在，便于数据的删除，但在这里为了简便，没有经行类似的设置。\n\n4，实际代码编写\n\n在eclipse创建一个JAVA项目\n\n首先是与数据库建立连接,即JDBC,需要提前导入JDBC对应的的依赖包，在properties中配置好信息后，创建一个工具类来封装JDBC的方法来建立连接，然后创建实体层entity来与数据库中的表相对应，DAO层写入对应的方法（这里的方法只能是直接用sql语句就能完成的方法），然后在DAOImpl中实现这些方法，正常流程是再创建service层来封装更高级的方法，由于这个项目的方法需求比较简单，所以直接调用DAO层方法来实现就行。在conroller层中编写servlet与用户的需求经行对接，正常时是调用service层方法，这里为了简单直接调用DAO层方法。\n\n![xxx](1.PNG)\n\n[代码下载](https://pan.baidu.com/s/1Oa_UYstTzfb2cQwVSRa_Og) 提取码adsi\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","slug":"基本JAVA-WEB项目","published":1,"updated":"2020-07-29T07:50:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn81000u7suu8a476qqj","content":"<h1><span id=\"javaweb实训学习\">Javaweb实训学习</span></h1><p>由于疫情原因只能呆在家，但也阻止不了学校的实习呀，本次实习采用网上教学的方式,老师讲的东西有点多，在这里总结一下。</p>\n<h2><span id=\"1准备工作\">1，准备工作</span></h2><p>安装好JDK,Mysql,eclipse或idea,navicat,tomcat（最基础的版本，没有用到框架）</p>\n<h2><span id=\"2大致流程\">2,大致流程</span></h2><p>1,需求分析</p>\n<p>对你的目标项目做一个大致分析，找出需要可能需要实现的功能。        </p>\n<p>2,页面设计</p>\n<p>设计出最终项目的所有静态页面，在实际项目中一般用于做展示。</p>\n<p>3，数据库设计</p>\n<p>根据你要实现的功能设计出对应的数据库表结构</p>\n<p>4，实际代码编写</p>\n<p>将代码部署到tomcat上，在本地进行查看与调试</p>\n<h2><span id=\"3详细流程以kfc网页端点餐为例\">3，详细流程（以KFC网页端点餐为例）</span></h2><p>1，需求分析</p>\n<p>要点餐，首先要登陆，然后要将要点的东西加入购物车，最后进行结算。</p>\n<p>想要快速的找到商品，分类与搜索是必须要的，同时需要能够查看到商品详情。</p>\n<p>对于购物车中的货物可以经行勾选，勾中才会结算，同时在购物车页面实现商品数量的加减</p>\n<p>对于之前的订单可以在历史订单中找到，在历史订单详情页中找到自己之前买了啥</p>\n<p>2，页面设计</p>\n<p>包含登陆页面，主页面，商品页，商品详情页，购物车页面，历史订单页，订单详情页</p>\n<p>在设计这些页面时会用到jstl以及er表达式，需要添加依赖包以及在jsp文件开始加上一段说明</p>\n<p>3，数据库设计</p>\n<p>要能登陆，需要user表经行登陆判断</p>\n<p>显示商品，需要一个food表，以及foodtype商品分类表</p>\n<p>显示订单需要order表，以及orderdetail订单详情表</p>\n<p>这里在实际中对于外键并没有直接设置，而是在创建一个键，用0，1表示这个数据是否存在，便于数据的删除，但在这里为了简便，没有经行类似的设置。</p>\n<p>4，实际代码编写</p>\n<p>在eclipse创建一个JAVA项目</p>\n<p>首先是与数据库建立连接,即JDBC,需要提前导入JDBC对应的的依赖包，在properties中配置好信息后，创建一个工具类来封装JDBC的方法来建立连接，然后创建实体层entity来与数据库中的表相对应，DAO层写入对应的方法（这里的方法只能是直接用sql语句就能完成的方法），然后在DAOImpl中实现这些方法，正常流程是再创建service层来封装更高级的方法，由于这个项目的方法需求比较简单，所以直接调用DAO层方法来实现就行。在conroller层中编写servlet与用户的需求经行对接，正常时是调用service层方法，这里为了简单直接调用DAO层方法。</p>\n<p><img src=\"1.PNG\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"1.PNG\" class=\"lozad post-image\"></p>\n<p><a href=\"https://pan.baidu.com/s/1Oa_UYstTzfb2cQwVSRa_Og\">代码下载</a> 提取码adsi</p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Javaweb实训学习\"><a href=\"#Javaweb实训学习\" class=\"headerlink\" title=\"Javaweb实训学习\"></a>Javaweb实训学习</h1><p>由于疫情原因只能呆在家，但也阻止不了学校的实习呀，本次实习采用网上教学的方式,老师讲的东西有点多，在这里总结一下。</p>\n<h2 id=\"1，准备工作\"><a href=\"#1，准备工作\" class=\"headerlink\" title=\"1，准备工作\"></a>1，准备工作</h2><p>安装好JDK,Mysql,eclipse或idea,navicat,tomcat（最基础的版本，没有用到框架）</p>\n<h2 id=\"2-大致流程\"><a href=\"#2-大致流程\" class=\"headerlink\" title=\"2,大致流程\"></a>2,大致流程</h2><p>1,需求分析</p>\n<p>对你的目标项目做一个大致分析，找出需要可能需要实现的功能。        </p>\n<p>2,页面设计</p>\n<p>设计出最终项目的所有静态页面，在实际项目中一般用于做展示。</p>\n<p>3，数据库设计</p>\n<p>根据你要实现的功能设计出对应的数据库表结构</p>\n<p>4，实际代码编写</p>\n<p>将代码部署到tomcat上，在本地进行查看与调试</p>\n<h2 id=\"3，详细流程（以KFC网页端点餐为例）\"><a href=\"#3，详细流程（以KFC网页端点餐为例）\" class=\"headerlink\" title=\"3，详细流程（以KFC网页端点餐为例）\"></a>3，详细流程（以KFC网页端点餐为例）</h2><p>1，需求分析</p>\n<p>要点餐，首先要登陆，然后要将要点的东西加入购物车，最后进行结算。</p>\n<p>想要快速的找到商品，分类与搜索是必须要的，同时需要能够查看到商品详情。</p>\n<p>对于购物车中的货物可以经行勾选，勾中才会结算，同时在购物车页面实现商品数量的加减</p>\n<p>对于之前的订单可以在历史订单中找到，在历史订单详情页中找到自己之前买了啥</p>\n<p>2，页面设计</p>\n<p>包含登陆页面，主页面，商品页，商品详情页，购物车页面，历史订单页，订单详情页</p>\n<p>在设计这些页面时会用到jstl以及er表达式，需要添加依赖包以及在jsp文件开始加上一段说明</p>\n<p>3，数据库设计</p>\n<p>要能登陆，需要user表经行登陆判断</p>\n<p>显示商品，需要一个food表，以及foodtype商品分类表</p>\n<p>显示订单需要order表，以及orderdetail订单详情表</p>\n<p>这里在实际中对于外键并没有直接设置，而是在创建一个键，用0，1表示这个数据是否存在，便于数据的删除，但在这里为了简便，没有经行类似的设置。</p>\n<p>4，实际代码编写</p>\n<p>在eclipse创建一个JAVA项目</p>\n<p>首先是与数据库建立连接,即JDBC,需要提前导入JDBC对应的的依赖包，在properties中配置好信息后，创建一个工具类来封装JDBC的方法来建立连接，然后创建实体层entity来与数据库中的表相对应，DAO层写入对应的方法（这里的方法只能是直接用sql语句就能完成的方法），然后在DAOImpl中实现这些方法，正常流程是再创建service层来封装更高级的方法，由于这个项目的方法需求比较简单，所以直接调用DAO层方法来实现就行。在conroller层中编写servlet与用户的需求经行对接，正常时是调用service层方法，这里为了简单直接调用DAO层方法。</p>\n<p><img src=\"1.PNG\" alt=\"xxx\"></p>\n<p><a href=\"https://pan.baidu.com/s/1Oa_UYstTzfb2cQwVSRa_Og\">代码下载</a> 提取码adsi</p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n"},{"title":"填写运算符问题","date":"2020-05-04T07:11:26.000Z","_content":"\n# 填写运算符问题\n\n## 问题描述：\n\n输入任意五个数x1,x2,x3,x4,x5每两个相邻数之间填上一个运算符。在填入4个运算符“+，-，*，/”后，使得表达式为一个指定值y（y由键盘键入），求出所有满足条件的表达式。\n\n这里我采用书上的穷举法来解决，用for循环遍历所有情况，因为有4个运算符，所以有4层for循环，因为有4种运算符，所以每一个循环循环4次。\n\n在每次处理运算符时，如果是+，-号就将该符号前的运算结果存在p中，如果是*，/号就将乘法和除法的部分得到的结果存在q中，以此来进行符号之间的优先级判断。\n\n## 代码\n\n```c++\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nint main()\n{\n    int i[5];\n    double n[6];\n    int p, q, f, k;\n    int total = 0;\n    char c[5] = {' ', '+', '-', '*', '/'};\n    cout << \"请输入参与运算的五个数：\" << endl;\n    for(int j = 1; j <= 5; j++){\n        cin >> n[j];\n    }\n    cout << \"请输入运算的结果：\" << endl;\n    cin >> n[0];\n    for(i[1] = 1; i[1] <= 4; i[1]++){\n        if(!(i[1] == 4 && n[2] == 0))//考虑当当前符号为'/'且该符号后面为零时则不可取，下同\n\n            for(i[2] = 1; i[2] <= 4; i[2]++){\n                if(!(i[2] == 4 && n[3] == 0))\n\n                    for(i[3] = 1; i[3] <= 4; i[3]++){\n                        if(!(i[3] == 4 && n[4] == 0))\n\n                            for(i[4] = 1; i[4] <= 4; i[4]++){\n                                if(!(i[4] == 4 && n[5] == 0)){\n\n                                    p = 0;//用p存储+ -运算得到的结果\n                                    q = n[1];//用p存储* /运算得到的结果\n                                    f = 1;//用来表示是加法运算还是减法运算\n                                    for(k = 1; k <= 4; k++){\n                                        if(i[k] == 1){//为+号时\n                                            p += f * q;\n                                            f = 1;\n                                            q = n[k + 1];\n                                        }\n                                        else if(i[k] == 2){//为-号时\n                                            p += f * q;\n                                            f = -1;\n                                            q = n[k + 1];\n                                        }\n                                        else if(i[k] == 3){//为*号时\n                                            q = q * n[k + 1];\n                                        }\n                                        else if(i[k] == 4){//为/号时\n                                            q = q / n[k + 1];\n                                        }\n                                    }\n                                    if(p + f * q == n[0]){ //处理最后一个出现的+号或-号，处理之后得到的就是最终的结果，然后经行比较\n                                        total++;\n                                        cout << total << ':';\n                                        for(int j = 1; j <= 4; j++){\n                                            cout << n[j] << c[i[j]];\n                                        }\n                                        cout << n[5] << '=' << n[0] << endl;\n                                    }\n\n                                }\n                            }\n                    }\n            }\n    }\n    cout << \"共有\" << total << \"种方法\" << endl;\n    return 0;\n}\n\n```\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","source":"_posts/填写运算符问题.md","raw":"---\ntitle: 填写运算符问题\ndate: 2020-05-04 15:11:26\ntags:\n---\n\n# 填写运算符问题\n\n## 问题描述：\n\n输入任意五个数x1,x2,x3,x4,x5每两个相邻数之间填上一个运算符。在填入4个运算符“+，-，*，/”后，使得表达式为一个指定值y（y由键盘键入），求出所有满足条件的表达式。\n\n这里我采用书上的穷举法来解决，用for循环遍历所有情况，因为有4个运算符，所以有4层for循环，因为有4种运算符，所以每一个循环循环4次。\n\n在每次处理运算符时，如果是+，-号就将该符号前的运算结果存在p中，如果是*，/号就将乘法和除法的部分得到的结果存在q中，以此来进行符号之间的优先级判断。\n\n## 代码\n\n```c++\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nint main()\n{\n    int i[5];\n    double n[6];\n    int p, q, f, k;\n    int total = 0;\n    char c[5] = {' ', '+', '-', '*', '/'};\n    cout << \"请输入参与运算的五个数：\" << endl;\n    for(int j = 1; j <= 5; j++){\n        cin >> n[j];\n    }\n    cout << \"请输入运算的结果：\" << endl;\n    cin >> n[0];\n    for(i[1] = 1; i[1] <= 4; i[1]++){\n        if(!(i[1] == 4 && n[2] == 0))//考虑当当前符号为'/'且该符号后面为零时则不可取，下同\n\n            for(i[2] = 1; i[2] <= 4; i[2]++){\n                if(!(i[2] == 4 && n[3] == 0))\n\n                    for(i[3] = 1; i[3] <= 4; i[3]++){\n                        if(!(i[3] == 4 && n[4] == 0))\n\n                            for(i[4] = 1; i[4] <= 4; i[4]++){\n                                if(!(i[4] == 4 && n[5] == 0)){\n\n                                    p = 0;//用p存储+ -运算得到的结果\n                                    q = n[1];//用p存储* /运算得到的结果\n                                    f = 1;//用来表示是加法运算还是减法运算\n                                    for(k = 1; k <= 4; k++){\n                                        if(i[k] == 1){//为+号时\n                                            p += f * q;\n                                            f = 1;\n                                            q = n[k + 1];\n                                        }\n                                        else if(i[k] == 2){//为-号时\n                                            p += f * q;\n                                            f = -1;\n                                            q = n[k + 1];\n                                        }\n                                        else if(i[k] == 3){//为*号时\n                                            q = q * n[k + 1];\n                                        }\n                                        else if(i[k] == 4){//为/号时\n                                            q = q / n[k + 1];\n                                        }\n                                    }\n                                    if(p + f * q == n[0]){ //处理最后一个出现的+号或-号，处理之后得到的就是最终的结果，然后经行比较\n                                        total++;\n                                        cout << total << ':';\n                                        for(int j = 1; j <= 4; j++){\n                                            cout << n[j] << c[i[j]];\n                                        }\n                                        cout << n[5] << '=' << n[0] << endl;\n                                    }\n\n                                }\n                            }\n                    }\n            }\n    }\n    cout << \"共有\" << total << \"种方法\" << endl;\n    return 0;\n}\n\n```\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories","slug":"填写运算符问题","published":1,"updated":"2020-05-04T08:12:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn82000v7suu5ban7n0m","content":"<h1><span id=\"填写运算符问题\">填写运算符问题</span></h1><h2><span id=\"问题描述\">问题描述：</span></h2><p>输入任意五个数x1,x2,x3,x4,x5每两个相邻数之间填上一个运算符。在填入4个运算符“+，-，*，/”后，使得表达式为一个指定值y（y由键盘键入），求出所有满足条件的表达式。</p>\n<p>这里我采用书上的穷举法来解决，用for循环遍历所有情况，因为有4个运算符，所以有4层for循环，因为有4种运算符，所以每一个循环循环4次。</p>\n<p>在每次处理运算符时，如果是+，-号就将该符号前的运算结果存在p中，如果是*，/号就将乘法和除法的部分得到的结果存在q中，以此来进行符号之间的优先级判断。</p>\n<h2><span id=\"代码\">代码</span></h2><pre class=\"highlight\"><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> n[<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p, q, f, k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c[<span class=\"number\">5</span>] = &#123;<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;请输入参与运算的五个数：&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;请输入运算的结果：&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i[<span class=\"number\">1</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">1</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">1</span>]++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(i[<span class=\"number\">1</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">2</span>] == <span class=\"number\">0</span>))<span class=\"comment\">//考虑当当前符号为&#x27;/&#x27;且该符号后面为零时则不可取，下同</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i[<span class=\"number\">2</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">2</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">2</span>]++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(i[<span class=\"number\">2</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">3</span>] == <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(i[<span class=\"number\">3</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">3</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">3</span>]++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!(i[<span class=\"number\">3</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">4</span>] == <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">for</span>(i[<span class=\"number\">4</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">4</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">4</span>]++)&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(!(i[<span class=\"number\">4</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">5</span>] == <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    p = <span class=\"number\">0</span>;<span class=\"comment\">//用p存储+ -运算得到的结果</span></span><br><span class=\"line\">                                    q = n[<span class=\"number\">1</span>];<span class=\"comment\">//用p存储* /运算得到的结果</span></span><br><span class=\"line\">                                    f = <span class=\"number\">1</span>;<span class=\"comment\">//用来表示是加法运算还是减法运算</span></span><br><span class=\"line\">                                    <span class=\"keyword\">for</span>(k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">4</span>; k++)&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">1</span>)&#123;<span class=\"comment\">//为+号时</span></span><br><span class=\"line\">                                            p += f * q;</span><br><span class=\"line\">                                            f = <span class=\"number\">1</span>;</span><br><span class=\"line\">                                            q = n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">2</span>)&#123;<span class=\"comment\">//为-号时</span></span><br><span class=\"line\">                                            p += f * q;</span><br><span class=\"line\">                                            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                                            q = n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">3</span>)&#123;<span class=\"comment\">//为*号时</span></span><br><span class=\"line\">                                            q = q * n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">4</span>)&#123;<span class=\"comment\">//为/号时</span></span><br><span class=\"line\">                                            q = q / n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(p + f * q == n[<span class=\"number\">0</span>])&#123; <span class=\"comment\">//处理最后一个出现的+号或-号，处理之后得到的就是最终的结果，然后经行比较</span></span><br><span class=\"line\">                                        total++;</span><br><span class=\"line\">                                        <span class=\"built_in\">cout</span> &lt;&lt; total &lt;&lt; <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">                                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">4</span>; j++)&#123;</span><br><span class=\"line\">                                            <span class=\"built_in\">cout</span> &lt;&lt; n[j] &lt;&lt; c[i[j]];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"built_in\">cout</span> &lt;&lt; n[<span class=\"number\">5</span>] &lt;&lt; <span class=\"string\">&#x27;=&#x27;</span> &lt;&lt; n[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;共有&quot;</span> &lt;&lt; total &lt;&lt; <span class=\"string\">&quot;种方法&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"填写运算符问题\"><a href=\"#填写运算符问题\" class=\"headerlink\" title=\"填写运算符问题\"></a>填写运算符问题</h1><h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>输入任意五个数x1,x2,x3,x4,x5每两个相邻数之间填上一个运算符。在填入4个运算符“+，-，*，/”后，使得表达式为一个指定值y（y由键盘键入），求出所有满足条件的表达式。</p>\n<p>这里我采用书上的穷举法来解决，用for循环遍历所有情况，因为有4个运算符，所以有4层for循环，因为有4种运算符，所以每一个循环循环4次。</p>\n<p>在每次处理运算符时，如果是+，-号就将该符号前的运算结果存在p中，如果是*，/号就将乘法和除法的部分得到的结果存在q中，以此来进行符号之间的优先级判断。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> n[<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p, q, f, k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c[<span class=\"number\">5</span>] = &#123;<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;请输入参与运算的五个数：&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;请输入运算的结果：&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i[<span class=\"number\">1</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">1</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">1</span>]++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(i[<span class=\"number\">1</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">2</span>] == <span class=\"number\">0</span>))<span class=\"comment\">//考虑当当前符号为&#x27;/&#x27;且该符号后面为零时则不可取，下同</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i[<span class=\"number\">2</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">2</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">2</span>]++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(i[<span class=\"number\">2</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">3</span>] == <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(i[<span class=\"number\">3</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">3</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">3</span>]++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!(i[<span class=\"number\">3</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">4</span>] == <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">for</span>(i[<span class=\"number\">4</span>] = <span class=\"number\">1</span>; i[<span class=\"number\">4</span>] &lt;= <span class=\"number\">4</span>; i[<span class=\"number\">4</span>]++)&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(!(i[<span class=\"number\">4</span>] == <span class=\"number\">4</span> &amp;&amp; n[<span class=\"number\">5</span>] == <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    p = <span class=\"number\">0</span>;<span class=\"comment\">//用p存储+ -运算得到的结果</span></span><br><span class=\"line\">                                    q = n[<span class=\"number\">1</span>];<span class=\"comment\">//用p存储* /运算得到的结果</span></span><br><span class=\"line\">                                    f = <span class=\"number\">1</span>;<span class=\"comment\">//用来表示是加法运算还是减法运算</span></span><br><span class=\"line\">                                    <span class=\"keyword\">for</span>(k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">4</span>; k++)&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">1</span>)&#123;<span class=\"comment\">//为+号时</span></span><br><span class=\"line\">                                            p += f * q;</span><br><span class=\"line\">                                            f = <span class=\"number\">1</span>;</span><br><span class=\"line\">                                            q = n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">2</span>)&#123;<span class=\"comment\">//为-号时</span></span><br><span class=\"line\">                                            p += f * q;</span><br><span class=\"line\">                                            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                                            q = n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">3</span>)&#123;<span class=\"comment\">//为*号时</span></span><br><span class=\"line\">                                            q = q * n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i[k] == <span class=\"number\">4</span>)&#123;<span class=\"comment\">//为/号时</span></span><br><span class=\"line\">                                            q = q / n[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(p + f * q == n[<span class=\"number\">0</span>])&#123; <span class=\"comment\">//处理最后一个出现的+号或-号，处理之后得到的就是最终的结果，然后经行比较</span></span><br><span class=\"line\">                                        total++;</span><br><span class=\"line\">                                        <span class=\"built_in\">cout</span> &lt;&lt; total &lt;&lt; <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">                                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">4</span>; j++)&#123;</span><br><span class=\"line\">                                            <span class=\"built_in\">cout</span> &lt;&lt; n[j] &lt;&lt; c[i[j]];</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        <span class=\"built_in\">cout</span> &lt;&lt; n[<span class=\"number\">5</span>] &lt;&lt; <span class=\"string\">&#x27;=&#x27;</span> &lt;&lt; n[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;共有&quot;</span> &lt;&lt; total &lt;&lt; <span class=\"string\">&quot;种方法&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n"},{"title":"差分隐私之组合定理","date":"2023-03-27T07:08:04.000Z","latex":true,"_content":"\n# 差分隐私之组合定理\n\n  在了解组合定理前，先要知道差分隐私的三个基本属性，这些是组合定理的基础\n\n## 顺序组合(Sequential Composition)\n\n   差别隐私的第一个主要属性是顺序组合，它限定了在同一输入数据上释放差别隐私机制的多个结果的总隐私成本。形式上，差分隐私的顺序组合定义如下：\n\n- 如果$F_1(x)$ 满足$(\\epsilon_1,0)-dp$\n- 并且$F_2(x)$ 满足$(\\epsilon_2,0)-dp$\n-  那么对于机制$G(x)=(F_1(x),F_2(x))$，它满足$(\\epsilon_1+\\epsilon_2,0)-dp$\n\n    顺序组合是差分隐私的一个重要属性，因为它是能够多次查询数据的基础。当对单一数据集进行多个独立分析时，顺序组合也很重要，因为它允许个人约束他们参与所有这些分析所产生的总隐私成本。顺序组合给出的隐私成本约束是一个上限，多个特定的不同的隐私方法的实际隐私成本可能小于此，但绝不会大于此。\n\n## 平行组合(Parallel Composition)\n\n​    差分隐私的第二个重要属性被称为平行组合。并行组合可以被看作是顺序组合的替代品，它是计算多个数据发布的总隐私成本的第二种方式。并行组合是基于将你的数据集分割成不相干的块，并在每个块上分别运行不同的隐私机制的想法。由于这些块是不相连的，每个人的数据正好出现在一个块中，因此，即使总共有k个块（因此有k个机制的运行），该机制对每个人的数据正好运行一次。从形式上看。\n\n- 如果$F(x)$ 满足$(\\epsilon,0)-dp$\n\n- 如果我们将一个数据集$X$分为$k$个不相关的子块，即$x_1\\cup...\\cup x_k=X$\n\n- 那么对于所有分开的机制$F(x_1),...,F(x_k)$满足$(\\epsilon,0)-dp$\n\n    从效果上看，这是一个比顺序组合要好得多的约束。由于我们运行$F k$次，顺序组合会说这个程序满足$(\\epsilon,0)-dp$差分隐私。也就是说，总的隐私成本只有ϵ。\n    \n    形式上的定义与我们的直觉相吻合，如果数据集中的每个参与者都为$X$贡献了一行，那么这一行将正好出现在$x_1,...,x_k$的一个块中。这意味着$F$只会 \"看到 \"这个参与者的数据一次，这意味着$ϵ$的隐私成本对该个体是合适的。由于这一属性对所有个人都适用,所以每部分的隐私成本都是$ϵ$。\n\n## 后处理(Post-processing)\n\n   我们在这里要讨论的差异化隐私的第三个属性称为后处理。这个想法很简单：通过以某种方式对数据进行后处理，对于处理后的数据来讲，差分隐私对于数据的隐私保护效果依然存在，即\n\n- 如果$F(x)$ 满足$(\\epsilon,0)-dp$\n- 那么对于任何（确定的或随机的）函数$g$，$g(F(X))$满足$(\\epsilon,0)-dp$\n\n    后处理属性意味着无论对不同隐私机制的输出进行什么计算，它都是安全的，不存在因此带来的隐私保护的危险，特别是，在机制的输出中进行可能减少噪音或改善信号的后处理是没有问题的（例如，对于不应该返回负面结果的查询，用零替换负面结果）。事实上，许多复杂的差分隐私算法都利用后处理来减少噪音并提高其结果的准确性。        \n    \n    后处理属性的另一个含义是，差分隐私提供了对基于辅助信息的隐私攻击的抵抗。例如，函数g可能包含关于数据集元素的辅助信息，并试图利用这些信息进行链接攻击，此时后处理属性就能够保证，这种攻击的有效性受到隐私参数ϵ的限制，而不考虑g中包含的辅助信息。\n\n## 组合定理（Composition Theorem）\n\n之前的文章说的都是对于单个函数而言，而在实际情况中，往往不是只有单个的查询的，所以就有了组合定理，即Composition Theorem，它探讨的就是在多个函数时，要满足什么样的隐私呢？\n\n如果我们已知一个随机函数的隐私损失，则k 个随机函数总的隐私损失是多少呢？通过上面的叙述，我们地发现，在每一个随机函数所加的噪声（noise）相互独立时，隐私损失是可以累加的，即简单组合定理（Simple Composition）。\n\n### 简单组合定理\n\n简单组合定理定义如下：\n\n如果$M_i$是$(\\epsilon,0)-dp$ 的随机函数，那么一个组合 (M1,M2,...,Mk) 满足$(\\sum_{i=1}^k\\epsilon,0)-dp$.\n\n如果$M_i$是$(\\epsilon_i,\\delta_i)-dp$ 的随机函数，那么一个组合 (M1,M2,...,Mk) 满足$(\\sum_{i=1}^k\\epsilon_i,\\sum_{i=1}^k\\delta_i)-dp$.\n\n 上述方法可以得到一个简单的上界，但是显然这是不够的，因为隐私损失是一个随机变量，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。注意到**随机变量除了本身的值有一个范围，他的期望也有一个范围**。**如果同时考虑这两个范围，那么就很可能得到一个更紧的上界**。\n\n### 进阶组合定理（Advanced Composition）\n\n它的定义如下\n\n对于$\\forall\\epsilon,\\delta,\\delta^\\prime\\geq0$,如果$M_i$是$(\\epsilon,\\delta)-dp$ 的随机函数，那么$(M_1,M_2...,M_k)$满足$(\\epsilon^\\prime,k\\delta+\\delta^\\prime)-dp$ ，其中$\\epsilon^\\prime=\\sqrt{2kln({1\\over\\epsilon^\\prime})}\\epsilon+k\\epsilon(e^\\epsilon-1)$\n\n可以看到，总的$\\epsilon$不再像Simple Composition一样随着随机函数的数量$k$线性增长，而是随着$\\sqrt{k}$线性增长，因此Advanced Composition在$k$较大时显著好于Simple Composition。\n\n## Moments Accountant\n\n但是对于差分隐私组合来讲，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。随机变量除了本身的值有一个范围，他的期望也有一个范围。如果同时考虑这两个范围，那么就很可能得到一个更紧的上界。\n\n于是Abadi等人提出了具有更紧上界的Moments Accountant，为了证明这个上界，首先需要证明每一个随机函数的矩生成函数的上界。Abadi et al.针对高斯分布的特例，使用了二项展开的方法，证明了前三项远大于其他的项和前三项的上界。之后他们又证明了矩生成函数的上界可以像隐私损失一样累加（在噪声独立的情况下）。最终，他们导出了一个更紧的composition隐私损失的上界。由于他们的研究着重于深度学习，因此给出的定理是以SGD为基础的。\n\nMoments Accountant定义如下：\n\n假设SGD的随机选择概率为 q ，训练轮数为 T ，那么存在常数 c1,c2 使得 ∀ε<c1  ,∀δ>0 ，若Gaussian Mechanism的标准差 σ 满足\n\n$$\\sigma\\geq c_2q \\sqrt {Tlog({1\\over\\delta})}$$\n\n则这一系列 T 个 Gaussian Mechanism Mi 所构成的composition满足 $(\\epsilon_i,\\delta_i)-dp$ \n\n这个方法也是目前最先进的差分隐私核算方法。\n\n参考文献\n\n[Properties of Differential Privacy — Programming Differential Privacy (programming-dp.com)](https://programming-dp.com/notebooks/ch4.html#post-processing)\n\n[差分隐私之Composition Theorem（一） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/264779199)\n","source":"_posts/差分隐私之组合定理.md","raw":"---\ntitle: 差分隐私之组合定理\ndate: 2023-03-27 15:08:04\ntags: 差分隐私\nlatex: true\n---\n\n# 差分隐私之组合定理\n\n  在了解组合定理前，先要知道差分隐私的三个基本属性，这些是组合定理的基础\n\n## 顺序组合(Sequential Composition)\n\n   差别隐私的第一个主要属性是顺序组合，它限定了在同一输入数据上释放差别隐私机制的多个结果的总隐私成本。形式上，差分隐私的顺序组合定义如下：\n\n- 如果$F_1(x)$ 满足$(\\epsilon_1,0)-dp$\n- 并且$F_2(x)$ 满足$(\\epsilon_2,0)-dp$\n-  那么对于机制$G(x)=(F_1(x),F_2(x))$，它满足$(\\epsilon_1+\\epsilon_2,0)-dp$\n\n    顺序组合是差分隐私的一个重要属性，因为它是能够多次查询数据的基础。当对单一数据集进行多个独立分析时，顺序组合也很重要，因为它允许个人约束他们参与所有这些分析所产生的总隐私成本。顺序组合给出的隐私成本约束是一个上限，多个特定的不同的隐私方法的实际隐私成本可能小于此，但绝不会大于此。\n\n## 平行组合(Parallel Composition)\n\n​    差分隐私的第二个重要属性被称为平行组合。并行组合可以被看作是顺序组合的替代品，它是计算多个数据发布的总隐私成本的第二种方式。并行组合是基于将你的数据集分割成不相干的块，并在每个块上分别运行不同的隐私机制的想法。由于这些块是不相连的，每个人的数据正好出现在一个块中，因此，即使总共有k个块（因此有k个机制的运行），该机制对每个人的数据正好运行一次。从形式上看。\n\n- 如果$F(x)$ 满足$(\\epsilon,0)-dp$\n\n- 如果我们将一个数据集$X$分为$k$个不相关的子块，即$x_1\\cup...\\cup x_k=X$\n\n- 那么对于所有分开的机制$F(x_1),...,F(x_k)$满足$(\\epsilon,0)-dp$\n\n    从效果上看，这是一个比顺序组合要好得多的约束。由于我们运行$F k$次，顺序组合会说这个程序满足$(\\epsilon,0)-dp$差分隐私。也就是说，总的隐私成本只有ϵ。\n    \n    形式上的定义与我们的直觉相吻合，如果数据集中的每个参与者都为$X$贡献了一行，那么这一行将正好出现在$x_1,...,x_k$的一个块中。这意味着$F$只会 \"看到 \"这个参与者的数据一次，这意味着$ϵ$的隐私成本对该个体是合适的。由于这一属性对所有个人都适用,所以每部分的隐私成本都是$ϵ$。\n\n## 后处理(Post-processing)\n\n   我们在这里要讨论的差异化隐私的第三个属性称为后处理。这个想法很简单：通过以某种方式对数据进行后处理，对于处理后的数据来讲，差分隐私对于数据的隐私保护效果依然存在，即\n\n- 如果$F(x)$ 满足$(\\epsilon,0)-dp$\n- 那么对于任何（确定的或随机的）函数$g$，$g(F(X))$满足$(\\epsilon,0)-dp$\n\n    后处理属性意味着无论对不同隐私机制的输出进行什么计算，它都是安全的，不存在因此带来的隐私保护的危险，特别是，在机制的输出中进行可能减少噪音或改善信号的后处理是没有问题的（例如，对于不应该返回负面结果的查询，用零替换负面结果）。事实上，许多复杂的差分隐私算法都利用后处理来减少噪音并提高其结果的准确性。        \n    \n    后处理属性的另一个含义是，差分隐私提供了对基于辅助信息的隐私攻击的抵抗。例如，函数g可能包含关于数据集元素的辅助信息，并试图利用这些信息进行链接攻击，此时后处理属性就能够保证，这种攻击的有效性受到隐私参数ϵ的限制，而不考虑g中包含的辅助信息。\n\n## 组合定理（Composition Theorem）\n\n之前的文章说的都是对于单个函数而言，而在实际情况中，往往不是只有单个的查询的，所以就有了组合定理，即Composition Theorem，它探讨的就是在多个函数时，要满足什么样的隐私呢？\n\n如果我们已知一个随机函数的隐私损失，则k 个随机函数总的隐私损失是多少呢？通过上面的叙述，我们地发现，在每一个随机函数所加的噪声（noise）相互独立时，隐私损失是可以累加的，即简单组合定理（Simple Composition）。\n\n### 简单组合定理\n\n简单组合定理定义如下：\n\n如果$M_i$是$(\\epsilon,0)-dp$ 的随机函数，那么一个组合 (M1,M2,...,Mk) 满足$(\\sum_{i=1}^k\\epsilon,0)-dp$.\n\n如果$M_i$是$(\\epsilon_i,\\delta_i)-dp$ 的随机函数，那么一个组合 (M1,M2,...,Mk) 满足$(\\sum_{i=1}^k\\epsilon_i,\\sum_{i=1}^k\\delta_i)-dp$.\n\n 上述方法可以得到一个简单的上界，但是显然这是不够的，因为隐私损失是一个随机变量，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。注意到**随机变量除了本身的值有一个范围，他的期望也有一个范围**。**如果同时考虑这两个范围，那么就很可能得到一个更紧的上界**。\n\n### 进阶组合定理（Advanced Composition）\n\n它的定义如下\n\n对于$\\forall\\epsilon,\\delta,\\delta^\\prime\\geq0$,如果$M_i$是$(\\epsilon,\\delta)-dp$ 的随机函数，那么$(M_1,M_2...,M_k)$满足$(\\epsilon^\\prime,k\\delta+\\delta^\\prime)-dp$ ，其中$\\epsilon^\\prime=\\sqrt{2kln({1\\over\\epsilon^\\prime})}\\epsilon+k\\epsilon(e^\\epsilon-1)$\n\n可以看到，总的$\\epsilon$不再像Simple Composition一样随着随机函数的数量$k$线性增长，而是随着$\\sqrt{k}$线性增长，因此Advanced Composition在$k$较大时显著好于Simple Composition。\n\n## Moments Accountant\n\n但是对于差分隐私组合来讲，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。随机变量除了本身的值有一个范围，他的期望也有一个范围。如果同时考虑这两个范围，那么就很可能得到一个更紧的上界。\n\n于是Abadi等人提出了具有更紧上界的Moments Accountant，为了证明这个上界，首先需要证明每一个随机函数的矩生成函数的上界。Abadi et al.针对高斯分布的特例，使用了二项展开的方法，证明了前三项远大于其他的项和前三项的上界。之后他们又证明了矩生成函数的上界可以像隐私损失一样累加（在噪声独立的情况下）。最终，他们导出了一个更紧的composition隐私损失的上界。由于他们的研究着重于深度学习，因此给出的定理是以SGD为基础的。\n\nMoments Accountant定义如下：\n\n假设SGD的随机选择概率为 q ，训练轮数为 T ，那么存在常数 c1,c2 使得 ∀ε<c1  ,∀δ>0 ，若Gaussian Mechanism的标准差 σ 满足\n\n$$\\sigma\\geq c_2q \\sqrt {Tlog({1\\over\\delta})}$$\n\n则这一系列 T 个 Gaussian Mechanism Mi 所构成的composition满足 $(\\epsilon_i,\\delta_i)-dp$ \n\n这个方法也是目前最先进的差分隐私核算方法。\n\n参考文献\n\n[Properties of Differential Privacy — Programming Differential Privacy (programming-dp.com)](https://programming-dp.com/notebooks/ch4.html#post-processing)\n\n[差分隐私之Composition Theorem（一） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/264779199)\n","slug":"差分隐私之组合定理","published":1,"updated":"2023-03-27T08:40:23.994Z","_id":"clfqktn83000y7suuftw5daj8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"差分隐私之组合定理\">差分隐私之组合定理</span></h1><p>  在了解组合定理前，先要知道差分隐私的三个基本属性，这些是组合定理的基础</p>\n<h2><span id=\"顺序组合sequential-composition\">顺序组合(Sequential Composition)</span></h2><p>   差别隐私的第一个主要属性是顺序组合，它限定了在同一输入数据上释放差别隐私机制的多个结果的总隐私成本。形式上，差分隐私的顺序组合定义如下：</p>\n<ul>\n<li>如果$F_1(x)$ 满足$(\\epsilon_1,0)-dp$</li>\n<li>并且$F_2(x)$ 满足$(\\epsilon_2,0)-dp$</li>\n<li><p>那么对于机制$G(x)=(F_1(x),F_2(x))$，它满足$(\\epsilon_1+\\epsilon_2,0)-dp$</p>\n<p> 顺序组合是差分隐私的一个重要属性，因为它是能够多次查询数据的基础。当对单一数据集进行多个独立分析时，顺序组合也很重要，因为它允许个人约束他们参与所有这些分析所产生的总隐私成本。顺序组合给出的隐私成本约束是一个上限，多个特定的不同的隐私方法的实际隐私成本可能小于此，但绝不会大于此。</p>\n</li>\n</ul>\n<h2><span id=\"平行组合parallel-composition\">平行组合(Parallel Composition)</span></h2><p>​    差分隐私的第二个重要属性被称为平行组合。并行组合可以被看作是顺序组合的替代品，它是计算多个数据发布的总隐私成本的第二种方式。并行组合是基于将你的数据集分割成不相干的块，并在每个块上分别运行不同的隐私机制的想法。由于这些块是不相连的，每个人的数据正好出现在一个块中，因此，即使总共有k个块（因此有k个机制的运行），该机制对每个人的数据正好运行一次。从形式上看。</p>\n<ul>\n<li><p>如果$F(x)$ 满足$(\\epsilon,0)-dp$</p>\n</li>\n<li><p>如果我们将一个数据集$X$分为$k$个不相关的子块，即$x_1\\cup…\\cup x_k=X$</p>\n</li>\n<li><p>那么对于所有分开的机制$F(x_1),…,F(x_k)$满足$(\\epsilon,0)-dp$</p>\n<p>  从效果上看，这是一个比顺序组合要好得多的约束。由于我们运行$F k$次，顺序组合会说这个程序满足$(\\epsilon,0)-dp$差分隐私。也就是说，总的隐私成本只有ϵ。</p>\n<p>  形式上的定义与我们的直觉相吻合，如果数据集中的每个参与者都为$X$贡献了一行，那么这一行将正好出现在$x_1,…,x_k$的一个块中。这意味着$F$只会 “看到 “这个参与者的数据一次，这意味着$ϵ$的隐私成本对该个体是合适的。由于这一属性对所有个人都适用,所以每部分的隐私成本都是$ϵ$。</p>\n</li>\n</ul>\n<h2><span id=\"后处理post-processing\">后处理(Post-processing)</span></h2><p>   我们在这里要讨论的差异化隐私的第三个属性称为后处理。这个想法很简单：通过以某种方式对数据进行后处理，对于处理后的数据来讲，差分隐私对于数据的隐私保护效果依然存在，即</p>\n<ul>\n<li>如果$F(x)$ 满足$(\\epsilon,0)-dp$</li>\n<li><p>那么对于任何（确定的或随机的）函数$g$，$g(F(X))$满足$(\\epsilon,0)-dp$</p>\n<p>  后处理属性意味着无论对不同隐私机制的输出进行什么计算，它都是安全的，不存在因此带来的隐私保护的危险，特别是，在机制的输出中进行可能减少噪音或改善信号的后处理是没有问题的（例如，对于不应该返回负面结果的查询，用零替换负面结果）。事实上，许多复杂的差分隐私算法都利用后处理来减少噪音并提高其结果的准确性。        </p>\n<p>  后处理属性的另一个含义是，差分隐私提供了对基于辅助信息的隐私攻击的抵抗。例如，函数g可能包含关于数据集元素的辅助信息，并试图利用这些信息进行链接攻击，此时后处理属性就能够保证，这种攻击的有效性受到隐私参数ϵ的限制，而不考虑g中包含的辅助信息。</p>\n</li>\n</ul>\n<h2><span id=\"组合定理composition-theorem\">组合定理（Composition Theorem）</span></h2><p>之前的文章说的都是对于单个函数而言，而在实际情况中，往往不是只有单个的查询的，所以就有了组合定理，即Composition Theorem，它探讨的就是在多个函数时，要满足什么样的隐私呢？</p>\n<p>如果我们已知一个随机函数的隐私损失，则k 个随机函数总的隐私损失是多少呢？通过上面的叙述，我们地发现，在每一个随机函数所加的噪声（noise）相互独立时，隐私损失是可以累加的，即简单组合定理（Simple Composition）。</p>\n<h3><span id=\"简单组合定理\">简单组合定理</span></h3><p>简单组合定理定义如下：</p>\n<p>如果$M_i$是$(\\epsilon,0)-dp$ 的随机函数，那么一个组合 (M1,M2,…,Mk) 满足$(\\sum_{i=1}^k\\epsilon,0)-dp$.</p>\n<p>如果$M_i$是$(\\epsilon_i,\\delta_i)-dp$ 的随机函数，那么一个组合 (M1,M2,…,Mk) 满足$(\\sum_{i=1}^k\\epsilon_i,\\sum_{i=1}^k\\delta_i)-dp$.</p>\n<p> 上述方法可以得到一个简单的上界，但是显然这是不够的，因为隐私损失是一个随机变量，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。注意到<strong>随机变量除了本身的值有一个范围，他的期望也有一个范围</strong>。<strong>如果同时考虑这两个范围，那么就很可能得到一个更紧的上界</strong>。</p>\n<h3><span id=\"进阶组合定理advanced-composition\">进阶组合定理（Advanced Composition）</span></h3><p>它的定义如下</p>\n<p>对于$\\forall\\epsilon,\\delta,\\delta^\\prime\\geq0$,如果$M_i$是$(\\epsilon,\\delta)-dp$ 的随机函数，那么$(M_1,M_2…,M_k)$满足$(\\epsilon^\\prime,k\\delta+\\delta^\\prime)-dp$ ，其中$\\epsilon^\\prime=\\sqrt{2kln({1\\over\\epsilon^\\prime})}\\epsilon+k\\epsilon(e^\\epsilon-1)$</p>\n<p>可以看到，总的$\\epsilon$不再像Simple Composition一样随着随机函数的数量$k$线性增长，而是随着$\\sqrt{k}$线性增长，因此Advanced Composition在$k$较大时显著好于Simple Composition。</p>\n<h2><span id=\"moments-accountant\">Moments Accountant</span></h2><p>但是对于差分隐私组合来讲，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。随机变量除了本身的值有一个范围，他的期望也有一个范围。如果同时考虑这两个范围，那么就很可能得到一个更紧的上界。</p>\n<p>于是Abadi等人提出了具有更紧上界的Moments Accountant，为了证明这个上界，首先需要证明每一个随机函数的矩生成函数的上界。Abadi et al.针对高斯分布的特例，使用了二项展开的方法，证明了前三项远大于其他的项和前三项的上界。之后他们又证明了矩生成函数的上界可以像隐私损失一样累加（在噪声独立的情况下）。最终，他们导出了一个更紧的composition隐私损失的上界。由于他们的研究着重于深度学习，因此给出的定理是以SGD为基础的。</p>\n<p>Moments Accountant定义如下：</p>\n<p>假设SGD的随机选择概率为 q ，训练轮数为 T ，那么存在常数 c1,c2 使得 ∀ε<c1 ,∀δ>0 ，若Gaussian Mechanism的标准差 σ 满足</c1></p>\n<script type=\"math/tex; mode=display\">\\sigma\\geq c_2q \\sqrt {Tlog({1\\over\\delta})}</script><p>则这一系列 T 个 Gaussian Mechanism Mi 所构成的composition满足 $(\\epsilon_i,\\delta_i)-dp$ </p>\n<p>这个方法也是目前最先进的差分隐私核算方法。</p>\n<p>参考文献</p>\n<p><a href=\"https://programming-dp.com/notebooks/ch4.html#post-processing\">Properties of Differential Privacy — Programming Differential Privacy (programming-dp.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/264779199\">差分隐私之Composition Theorem（一） - 知乎 (zhihu.com)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1><span id=\"差分隐私之组合定理\">差分隐私之组合定理</span></h1><p>  在了解组合定理前，先要知道差分隐私的三个基本属性，这些是组合定理的基础</p>\n<h2><span id=\"顺序组合sequential-composition\">顺序组合(Sequential Composition)</span></h2><p>   差别隐私的第一个主要属性是顺序组合，它限定了在同一输入数据上释放差别隐私机制的多个结果的总隐私成本。形式上，差分隐私的顺序组合定义如下：</p>\n<ul>\n<li>如果$F_1(x)$ 满足$(\\epsilon_1,0)-dp$</li>\n<li>并且$F_2(x)$ 满足$(\\epsilon_2,0)-dp$</li>\n<li><p>那么对于机制$G(x)=(F_1(x),F_2(x))$，它满足$(\\epsilon_1+\\epsilon_2,0)-dp$</p>\n<p> 顺序组合是差分隐私的一个重要属性，因为它是能够多次查询数据的基础。当对单一数据集进行多个独立分析时，顺序组合也很重要，因为它允许个人约束他们参与所有这些分析所产生的总隐私成本。顺序组合给出的隐私成本约束是一个上限，多个特定的不同的隐私方法的实际隐私成本可能小于此，但绝不会大于此。</p>\n</li>\n</ul>\n<h2><span id=\"平行组合parallel-composition\">平行组合(Parallel Composition)</span></h2><p>​    差分隐私的第二个重要属性被称为平行组合。并行组合可以被看作是顺序组合的替代品，它是计算多个数据发布的总隐私成本的第二种方式。并行组合是基于将你的数据集分割成不相干的块，并在每个块上分别运行不同的隐私机制的想法。由于这些块是不相连的，每个人的数据正好出现在一个块中，因此，即使总共有k个块（因此有k个机制的运行），该机制对每个人的数据正好运行一次。从形式上看。</p>\n<ul>\n<li><p>如果$F(x)$ 满足$(\\epsilon,0)-dp$</p>\n</li>\n<li><p>如果我们将一个数据集$X$分为$k$个不相关的子块，即$x_1\\cup…\\cup x_k=X$</p>\n</li>\n<li><p>那么对于所有分开的机制$F(x_1),…,F(x_k)$满足$(\\epsilon,0)-dp$</p>\n<p>  从效果上看，这是一个比顺序组合要好得多的约束。由于我们运行$F k$次，顺序组合会说这个程序满足$(\\epsilon,0)-dp$差分隐私。也就是说，总的隐私成本只有ϵ。</p>\n<p>  形式上的定义与我们的直觉相吻合，如果数据集中的每个参与者都为$X$贡献了一行，那么这一行将正好出现在$x_1,…,x_k$的一个块中。这意味着$F$只会 “看到 “这个参与者的数据一次，这意味着$ϵ$的隐私成本对该个体是合适的。由于这一属性对所有个人都适用,所以每部分的隐私成本都是$ϵ$。</p>\n</li>\n</ul>\n<h2><span id=\"后处理post-processing\">后处理(Post-processing)</span></h2><p>   我们在这里要讨论的差异化隐私的第三个属性称为后处理。这个想法很简单：通过以某种方式对数据进行后处理，对于处理后的数据来讲，差分隐私对于数据的隐私保护效果依然存在，即</p>\n<ul>\n<li>如果$F(x)$ 满足$(\\epsilon,0)-dp$</li>\n<li><p>那么对于任何（确定的或随机的）函数$g$，$g(F(X))$满足$(\\epsilon,0)-dp$</p>\n<p>  后处理属性意味着无论对不同隐私机制的输出进行什么计算，它都是安全的，不存在因此带来的隐私保护的危险，特别是，在机制的输出中进行可能减少噪音或改善信号的后处理是没有问题的（例如，对于不应该返回负面结果的查询，用零替换负面结果）。事实上，许多复杂的差分隐私算法都利用后处理来减少噪音并提高其结果的准确性。        </p>\n<p>  后处理属性的另一个含义是，差分隐私提供了对基于辅助信息的隐私攻击的抵抗。例如，函数g可能包含关于数据集元素的辅助信息，并试图利用这些信息进行链接攻击，此时后处理属性就能够保证，这种攻击的有效性受到隐私参数ϵ的限制，而不考虑g中包含的辅助信息。</p>\n</li>\n</ul>\n<h2><span id=\"组合定理composition-theorem\">组合定理（Composition Theorem）</span></h2><p>之前的文章说的都是对于单个函数而言，而在实际情况中，往往不是只有单个的查询的，所以就有了组合定理，即Composition Theorem，它探讨的就是在多个函数时，要满足什么样的隐私呢？</p>\n<p>如果我们已知一个随机函数的隐私损失，则k 个随机函数总的隐私损失是多少呢？通过上面的叙述，我们地发现，在每一个随机函数所加的噪声（noise）相互独立时，隐私损失是可以累加的，即简单组合定理（Simple Composition）。</p>\n<h3><span id=\"简单组合定理\">简单组合定理</span></h3><p>简单组合定理定义如下：</p>\n<p>如果$M_i$是$(\\epsilon,0)-dp$ 的随机函数，那么一个组合 (M1,M2,…,Mk) 满足$(\\sum_{i=1}^k\\epsilon,0)-dp$.</p>\n<p>如果$M_i$是$(\\epsilon_i,\\delta_i)-dp$ 的随机函数，那么一个组合 (M1,M2,…,Mk) 满足$(\\sum_{i=1}^k\\epsilon_i,\\sum_{i=1}^k\\delta_i)-dp$.</p>\n<p> 上述方法可以得到一个简单的上界，但是显然这是不够的，因为隐私损失是一个随机变量，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。注意到<strong>随机变量除了本身的值有一个范围，他的期望也有一个范围</strong>。<strong>如果同时考虑这两个范围，那么就很可能得到一个更紧的上界</strong>。</p>\n<h3><span id=\"进阶组合定理advanced-composition\">进阶组合定理（Advanced Composition）</span></h3><p>它的定义如下</p>\n<p>对于$\\forall\\epsilon,\\delta,\\delta^\\prime\\geq0$,如果$M_i$是$(\\epsilon,\\delta)-dp$ 的随机函数，那么$(M_1,M_2…,M_k)$满足$(\\epsilon^\\prime,k\\delta+\\delta^\\prime)-dp$ ，其中$\\epsilon^\\prime=\\sqrt{2kln({1\\over\\epsilon^\\prime})}\\epsilon+k\\epsilon(e^\\epsilon-1)$</p>\n<p>可以看到，总的$\\epsilon$不再像Simple Composition一样随着随机函数的数量$k$线性增长，而是随着$\\sqrt{k}$线性增长，因此Advanced Composition在$k$较大时显著好于Simple Composition。</p>\n<h2><span id=\"moments-accountant\">Moments Accountant</span></h2><p>但是对于差分隐私组合来讲，要获得多个随机变量累加的上界，绝对不是简单的把每一个随机变量的上界累加就可以得到的。随机变量除了本身的值有一个范围，他的期望也有一个范围。如果同时考虑这两个范围，那么就很可能得到一个更紧的上界。</p>\n<p>于是Abadi等人提出了具有更紧上界的Moments Accountant，为了证明这个上界，首先需要证明每一个随机函数的矩生成函数的上界。Abadi et al.针对高斯分布的特例，使用了二项展开的方法，证明了前三项远大于其他的项和前三项的上界。之后他们又证明了矩生成函数的上界可以像隐私损失一样累加（在噪声独立的情况下）。最终，他们导出了一个更紧的composition隐私损失的上界。由于他们的研究着重于深度学习，因此给出的定理是以SGD为基础的。</p>\n<p>Moments Accountant定义如下：</p>\n<p>假设SGD的随机选择概率为 q ，训练轮数为 T ，那么存在常数 c1,c2 使得 ∀ε<c1 ,∀δ>0 ，若Gaussian Mechanism的标准差 σ 满足</c1></p>\n<script type=\"math/tex; mode=display\">\\sigma\\geq c_2q \\sqrt {Tlog({1\\over\\delta})}</script><p>则这一系列 T 个 Gaussian Mechanism Mi 所构成的composition满足 $(\\epsilon_i,\\delta_i)-dp$ </p>\n<p>这个方法也是目前最先进的差分隐私核算方法。</p>\n<p>参考文献</p>\n<p><a href=\"https://programming-dp.com/notebooks/ch4.html#post-processing\">Properties of Differential Privacy — Programming Differential Privacy (programming-dp.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/264779199\">差分隐私之Composition Theorem（一） - 知乎 (zhihu.com)</a></p>\n"},{"title":"平衡二叉树节点的删除","date":"2021-10-10T14:06:31.000Z","_content":"\n# 关于平衡二叉树节点的删除\n\n前几天做到了一个平衡二叉树删除节点的题目，看了看王道，没有找到，我就默认跟二叉排序树一样，没右子树直接删除，左子树接上，有右子树就找右子树中序第一个节点接上，结果做错了，然后就去网上查找，找到了正确的方法，这里记录一下。\n\n","source":"_posts/平衡二叉树节点的删除.md","raw":"---\ntitle: 平衡二叉树节点的删除\ndate: 2021-10-10 22:06:31\ntags: 数据结构\n---\n\n# 关于平衡二叉树节点的删除\n\n前几天做到了一个平衡二叉树删除节点的题目，看了看王道，没有找到，我就默认跟二叉排序树一样，没右子树直接删除，左子树接上，有右子树就找右子树中序第一个节点接上，结果做错了，然后就去网上查找，找到了正确的方法，这里记录一下。\n\n","slug":"平衡二叉树节点的删除","published":1,"updated":"2021-10-10T14:57:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn84000z7suu82pq4rxa","content":"<h1><span id=\"关于平衡二叉树节点的删除\">关于平衡二叉树节点的删除</span></h1><p>前几天做到了一个平衡二叉树删除节点的题目，看了看王道，没有找到，我就默认跟二叉排序树一样，没右子树直接删除，左子树接上，有右子树就找右子树中序第一个节点接上，结果做错了，然后就去网上查找，找到了正确的方法，这里记录一下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于平衡二叉树节点的删除\"><a href=\"#关于平衡二叉树节点的删除\" class=\"headerlink\" title=\"关于平衡二叉树节点的删除\"></a>关于平衡二叉树节点的删除</h1><p>前几天做到了一个平衡二叉树删除节点的题目，看了看王道，没有找到，我就默认跟二叉排序树一样，没右子树直接删除，左子树接上，有右子树就找右子树中序第一个节点接上，结果做错了，然后就去网上查找，找到了正确的方法，这里记录一下。</p>\n"},{"title":"树莓派小车基本功能的实现","date":"2019-08-05T09:40:00.000Z","_content":"\n\n在2019年暑假，大一的我参加了学校组织的为期15天的实训，实训内容就是树莓派小车的基本功能的实现，包括移动，拍照，录像等。\n下面我将对本次实训经行一个简单的回顾\n\n\n# 1.小车的组装\n首先我们需要一下材料\n树莓派，小车零件，杜邦线，电池盒，L298N电机驱动模块，TF卡/SD卡\n然后按照电路图将小车的零部件一个一个组装起来即可\n唯一需要注意的是引脚的对应\n![xxx](111.jpg)\n如图所示，程序里的引脚的标号为黄色框里的编号，横向对应红色框里的物理接口\n\n\n下图为组装好的小车\n\n\n![xxx](3426615-a8a227ec96464665.jpg)\n\n\n# 2.SOCKET编程\n那么要如何实现电脑端与小车的通信呢，这时候就需要用到socket编程了，它可以通过IP地址实现两地之间的通信\n>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合\n\n首先我们要实现最基本的本地通信\n下面附上最基本的本地通信的代码\n<!-- more --> \n客户端：\n```javascript\n#include <iostream>\n#include<cstdio>\n#include<string.h>\n#include<WINSOCK2.H>\n#pragma comment(lib,\"ws2_32.lib\")\nusing namespace std;\nint initser(int port,char*ip,int* psockFd)\n{\n    WORD sockVersion = MAKEWORD(2, 2);\n    WSADATA wsaData;\n    if (WSAStartup(sockVersion, &wsaData) != 0)\n    {\n        return 0;\n    }\n    int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockFd < 0)\n    {\n        printf(\"socket error\\n\");\n        return -1;\n    }\n    else\n    printf(\"create socket success\\n\");\n    struct sockaddr_in serAddr;\n    memset(&serAddr, 0, sizeof(serAddr));\n    serAddr.sin_family = AF_INET;\n    serAddr.sin_port = htons(port);\n    serAddr.sin_addr.S_un.S_addr = inet_addr(ip);\n    int res = connect(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n    if (sockFd < 0)\n    {\n        printf(\"connect error\\n\");\n        return -1;\n    }\n    else\n    printf(\"connect success\\n\");\n    *psockFd = sockFd;\n}\nint main()\n{\n    int sockFd = 0;\n    char ip[100] = { \"192.168.101.63\" };//这里填自己本机所使用的IP地址\n    initser(5000, ip, &sockFd);//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大\n    char buf[100] = { 0 };\n    gets_s(buf);\n    int res = send(sockFd, buf, sizeof(buf), 0);//发送信息\n    if (res < 0)\n    {\n        printf(\"send err\\n\");\n       return -1;\n    }\n    printf(\"send data success [%s]\\n\", buf);\n    closesocket(sockFd);\n    return 0;\n}\n```\n\n服务器：\n```javascript\n#include <iostream>\n#include <stdio.h>\n#include <WinSock2.h>\nusing namespace std;\n//使用ws2_32.lib静态库\n#pragma comment(lib,\"ws2_32.lib\")\nint initSer(int port, int* psockFd)\n{\n    WORD sockVersion = MAKEWORD(2, 2);\n    WSADATA wsadata;\n    if (WSAStartup(sockVersion, &wsadata) != 0)\n    {\n        return 0;\n    }\n    int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockFd < 0)\n    {\n        cout << \"socket fail!\" << endl;\n        return -1;\n    }\n    else\n    cout << \"socket success!\" << endl;\n    struct sockaddr_in serAddr;\n    memset(&serAddr, 0, sizeof(serAddr));\n    serAddr.sin_family = AF_INET;\n    serAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);//让操作系统指派IP，即目前使用的IP\n    serAddr.sin_port = htons(port);\n    int res = bind(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n    if (res < 0)\n    {\n        cout << \"bind fail!\" << endl;\n        return -1;\n    }\n    else\n        cout << \"bind success!\" << endl;\n    res = listen(sockFd, 10);\n    if (res < 0)\n    {\n        cout << \"listen fail!\" << endl;\n        return -1;\n    }\n    else\n    cout << \"listen success!\" << endl;\n    int newsockFd = accept(sockFd, NULL, NULL);\n    if (sockFd < 0)\n    {\n        cout << \"accept fail!\" << endl;\n    return -1;\n    }\n    else\n    cout << \"accept success!\" << endl;\n    *psockFd = newsockFd;\n    return 0;\n}\nint main()\n{\n    int sockFd = 0;\n    initSer(5000, &sockFd);//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大\n    char buf[100] = { 0 };\n    int res = recv(sockFd, buf, sizeof(buf), 0);//接收信息\n    if (res < 0)\n    {\n        printf(\"recv err\\n\");\n        return -1;\n    }\n    printf(\"recv data success [%s]\\n\", buf);\n    closesocket(sockFd);\n    return 0;\n}\n```\n上面的代码虽然能实现通信，但是只能通信一次，就算加了while也只能按照一定的规律来通信，所以我们这里为了实现随发随收，就需要加上多线程\n只需将发送与接收写在两个不同的线程中即可\n下面附上代码\n\n客户端：\n```javascript\n#include <iostream>\n#include<cstdio>\n#include<string.h>\n#include<WINSOCK2.H>\n#pragma comment(lib,\"ws2_32.lib\")\n#define PORT 5000\nusing namespace std;\nHANDLE hMutex = NULL;\n\nDWORD WINAPI Fun1(LPVOID lpparamter)\n{\n\tint newsockFd = *(int*)lpparamter;\n\twhile (1)\n\t{\n\t\tchar buf[100] = { 0 };\n\t\tmemset(buf, '\\0', sizeof(buf));\n\t\tint res = recv(newsockFd, buf, 100, 0);//接收\n\t\tif (res < 0)\n\t\t{\n\t\t\tcout << \"recv fail!\" << endl;\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t\tprintf(\"receive message[%s]\\n\", buf);\n\n\t}\n\treturn 0L;\n}\n\nDWORD WINAPI Fun2(LPVOID lpparamter)\n{\n\tint newsockFd = *(int *)lpparamter;\n\twhile (1)\n\t{\n\n\t\tchar buf[100] = { 0 };\n\t\tgets_s(buf);\n\t\tint res = send(newsockFd, buf, sizeof(buf), 0);//发送\n\t\tif (res < 0)\n\t\t{\n\t\t\tprintf(\"send err\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tprintf(\"send success [%s]\\n\", buf);\n\n\t}\n\treturn 0L;\n}\n\n\n\nint main()\n{\n\tWORD sockVersion = MAKEWORD(2, 2);\n\tWSADATA wsaData;\n\tif (WSAStartup(sockVersion, &wsaData) != 0)\n\t{\n\t\treturn 0;\n\t}\n\tint sockFd = socket(AF_INET, SOCK_STREAM, 0);\n\tif (sockFd < 0)\n\t{\n\t\tprintf(\"socket error\\n\");\n\t\treturn -1;\n\t}\n\telse\n\t    printf(\"create socket success\\n\");\n\n\tstruct sockaddr_in serAddr;\n\tmemset(&serAddr, 0, sizeof(serAddr));\n\tserAddr.sin_family = AF_INET;\n\tserAddr.sin_port = htons(PORT);\n\tserAddr.sin_addr.S_un.S_addr = inet_addr(\"172.16.13.62\");\n\n\tint res = connect(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n\tif (sockFd < 0)\n\t{\n\t\tprintf(\"connect error\\n\");\n\t\treturn -1;\n\t}\n\telse \n\t    printf(\"connect success\\n\");\n\t//创建线程\n\tHANDLE hand1 = CreateThread(NULL, 0, Fun2, &sockFd , 0, NULL);\n\tHANDLE hand2 = CreateThread(NULL, 0, Fun1, &sockFd , 0, NULL);\n\n\tWaitForSingleObject(hand1, INFINITE);\n\n        closesocket(sockFd);\n\treturn 0;\n}\n```\n\n服务器：\n\n```javascript\n#include <iostream>\n#include <WinSock2.h>\nusing namespace std;\n#define PORT 5000\n//使用ws2_32.lib静态库\n#pragma comment(lib,\"ws2_32.lib\")\n\nHANDLE hMutex = NULL;\n\nDWORD WINAPI Fun1(LPVOID lpparamter)\n{\n\tint newsockFd = *(int*)lpparamter;\n\twhile(1)\n\t{\n\t\tchar buf[100] = { 0 };\n\t\tmemset(buf, '\\0', sizeof(buf));\n\t\tint res = recv(newsockFd, buf, 100, 0);//接收\n\t\tif (res < 0)\n\t\t{\n\t\t\tcout << \"recv fail!\" << endl;\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t\tprintf(\"receive message[%s]\\n\", buf);\n\n\t}\n\treturn 0L;\n}\n\nDWORD WINAPI Fun2(LPVOID lpparamter)\n{\n\tint newsockFd = *(int*)lpparamter;\n\twhile(1)\n\t{\n\n\t\tchar buf[100] = { 0 };\n\t\tgets_s(buf);\n\t\tint res = send(newsockFd, buf, sizeof(buf), 0);//发送\n\t\tif (res < 0)\n\t\t{\n\t\t\tprintf(\"send err\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tprintf(\"send success [%s]\\n\", buf);\n\t}\n\treturn 0L;\n}\n\n\n\nint main()\n{\n\t//windows下需要加载的SOCKET库\n\tWORD sockVersion = MAKEWORD(2, 2);\n\tWSADATA wsadata;\n\tif (WSAStartup(sockVersion, &wsadata) != 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tint sockFd = socket(AF_INET, SOCK_STREAM, 0);\n\tif (sockFd < 0)\n\t{\n\t\tcout << \"socket fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"socket success!\" << endl;\n\n\tstruct sockaddr_in serAddr;\n\tmemset(&serAddr, 0, sizeof(serAddr));\n\tserAddr.sin_family = AF_INET;\n\tserAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\n\tserAddr.sin_port = htons(PORT);\n\n\tint rec = bind(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n\tif (rec < 0)\n\t{\n\t\tcout << \"bind fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"bind success!\" << endl;\n\n\trec = listen(sockFd, 10);\n\tif (rec < 0)\n\t{\n\t\tcout << \"listen fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"listen success!\" << endl;\n\n\tint newsockFd = accept(sockFd, NULL, NULL);\n\tif (sockFd < 0)\n\t{\n\t\tcout << \"accept fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"accept success!\" << endl;\n\t//创建线程\n\tHANDLE hand1 = CreateThread(NULL, 0, Fun1, &newsockFd, 0, NULL);\n\tHANDLE hand2 = CreateThread(NULL, 0, Fun2, &newsockFd, 0, NULL);\n\n\tWaitForSingleObject(hand1, INFINITE);\n\tclosesocket(newsockFd);\n\tclosesocket(sockFd);\n\treturn 0;\n}\n```\n至此就实现了实时的发送接收\n然后我们就可以尝试与小车进行通信了\n<!--more-->\n# 3.与小车连接\n我们首先需要与小车建立连接来将服务器端的代码送进去（这里也可以把小车作为客户端，一样可行，有兴趣的话可以自己去尝试）\n这里我们需要下面两个工具来连接小车\nhttps://pan.baidu.com/s/1f7WXga7jDd45v9jeusdQuA  提取码2w7m\n首先打开树莓派，连上WIFI\n然后打开下载好的Putty在hostname框输入自己本机的IP地址\n接着点击OPEN即可\n接着输入自己的登陆用户名及密码\n也可以在下面的 Saved Sessions里面保存自己的IP地址，方便使用\n到这里其实就连上树莓派了\n然后可以用FileZilla来经行数据传输\n在文件->站点管理器一栏输入自己的IP以及用户名密码然后连接即可\n这时就可以对树莓派的内的文件经行操作了\n接下来就可以尝试将服务器文件放到树莓派之中\n需要注意的是小车内部是linux环境\n所以需要做一些修改\n首先把下面这段删掉，因为这是WINDOWS下需要加载的库\n\n```javescript\n        WORD sockVersion = MAKEWORD(2, 2);\n\tWSADATA wsadata;\n```\n还有就是\n```javescript\nserAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\n```\n改成\n```javescript\nserAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n```\n\n然后就是头文件的修改\n直接百度找到对应的替换的头文件即可\n或者直接用这个\n```javescript\n#include<sys/types.h>\n#include<sys/socket.h>\n#include<stdio.h>\n#include<arpa/inet.h>\n#include<string.h>\n#include<unistd.h>\n#include<netinet/in.h>\n#include <wiringPi.h>\n#include <stdio.h>\n#include <termios.h>\n#include <fcntl.h>\n#include <iostream>\n#include <cstring>\n#include <opencv2/opencv.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n#include <opencv2/core/core.hpp>\n#include <pthread.h>\nusing namespace cv;\nusing namespace std;\n```\n至此就可以与小车通信了\n\n# 4.控制小车\n首先需要在小车里配好WiringPi库和OPENCV库，我的小车是提前装好的，具体操作可以自行百度，同时电脑上也需配好OPENCV库以方便调试\n为了方便操作，客户端建议直接用MFC来写\n代码我就直接放网盘了\nhttps://pan.baidu.com/s/1wYwt1_OyDaCdooHXbyMfzw 提取码y5y0\n其中的OPENCV部分是我同学写的，所以我就不详细展开了。。。\n还有在Linux下编译时编译的指令后面还要加上WiringPi来加载WiringPi库\n至此就可以控制小车啦\n这可以说是我第一次对失误经行操作，以前都是干巴巴的写代码，这也让我再一次找到了编程的乐趣，这样的实训多我来说还是收获颇丰\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/树莓派小车基本功能的实现.md","raw":"---\ntitle: 树莓派小车基本功能的实现 \ndate: 2019-08-5 17:40:00\ntags: 树莓派\n---\n\n\n在2019年暑假，大一的我参加了学校组织的为期15天的实训，实训内容就是树莓派小车的基本功能的实现，包括移动，拍照，录像等。\n下面我将对本次实训经行一个简单的回顾\n\n\n# 1.小车的组装\n首先我们需要一下材料\n树莓派，小车零件，杜邦线，电池盒，L298N电机驱动模块，TF卡/SD卡\n然后按照电路图将小车的零部件一个一个组装起来即可\n唯一需要注意的是引脚的对应\n![xxx](111.jpg)\n如图所示，程序里的引脚的标号为黄色框里的编号，横向对应红色框里的物理接口\n\n\n下图为组装好的小车\n\n\n![xxx](3426615-a8a227ec96464665.jpg)\n\n\n# 2.SOCKET编程\n那么要如何实现电脑端与小车的通信呢，这时候就需要用到socket编程了，它可以通过IP地址实现两地之间的通信\n>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合\n\n首先我们要实现最基本的本地通信\n下面附上最基本的本地通信的代码\n<!-- more --> \n客户端：\n```javascript\n#include <iostream>\n#include<cstdio>\n#include<string.h>\n#include<WINSOCK2.H>\n#pragma comment(lib,\"ws2_32.lib\")\nusing namespace std;\nint initser(int port,char*ip,int* psockFd)\n{\n    WORD sockVersion = MAKEWORD(2, 2);\n    WSADATA wsaData;\n    if (WSAStartup(sockVersion, &wsaData) != 0)\n    {\n        return 0;\n    }\n    int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockFd < 0)\n    {\n        printf(\"socket error\\n\");\n        return -1;\n    }\n    else\n    printf(\"create socket success\\n\");\n    struct sockaddr_in serAddr;\n    memset(&serAddr, 0, sizeof(serAddr));\n    serAddr.sin_family = AF_INET;\n    serAddr.sin_port = htons(port);\n    serAddr.sin_addr.S_un.S_addr = inet_addr(ip);\n    int res = connect(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n    if (sockFd < 0)\n    {\n        printf(\"connect error\\n\");\n        return -1;\n    }\n    else\n    printf(\"connect success\\n\");\n    *psockFd = sockFd;\n}\nint main()\n{\n    int sockFd = 0;\n    char ip[100] = { \"192.168.101.63\" };//这里填自己本机所使用的IP地址\n    initser(5000, ip, &sockFd);//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大\n    char buf[100] = { 0 };\n    gets_s(buf);\n    int res = send(sockFd, buf, sizeof(buf), 0);//发送信息\n    if (res < 0)\n    {\n        printf(\"send err\\n\");\n       return -1;\n    }\n    printf(\"send data success [%s]\\n\", buf);\n    closesocket(sockFd);\n    return 0;\n}\n```\n\n服务器：\n```javascript\n#include <iostream>\n#include <stdio.h>\n#include <WinSock2.h>\nusing namespace std;\n//使用ws2_32.lib静态库\n#pragma comment(lib,\"ws2_32.lib\")\nint initSer(int port, int* psockFd)\n{\n    WORD sockVersion = MAKEWORD(2, 2);\n    WSADATA wsadata;\n    if (WSAStartup(sockVersion, &wsadata) != 0)\n    {\n        return 0;\n    }\n    int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockFd < 0)\n    {\n        cout << \"socket fail!\" << endl;\n        return -1;\n    }\n    else\n    cout << \"socket success!\" << endl;\n    struct sockaddr_in serAddr;\n    memset(&serAddr, 0, sizeof(serAddr));\n    serAddr.sin_family = AF_INET;\n    serAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);//让操作系统指派IP，即目前使用的IP\n    serAddr.sin_port = htons(port);\n    int res = bind(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n    if (res < 0)\n    {\n        cout << \"bind fail!\" << endl;\n        return -1;\n    }\n    else\n        cout << \"bind success!\" << endl;\n    res = listen(sockFd, 10);\n    if (res < 0)\n    {\n        cout << \"listen fail!\" << endl;\n        return -1;\n    }\n    else\n    cout << \"listen success!\" << endl;\n    int newsockFd = accept(sockFd, NULL, NULL);\n    if (sockFd < 0)\n    {\n        cout << \"accept fail!\" << endl;\n    return -1;\n    }\n    else\n    cout << \"accept success!\" << endl;\n    *psockFd = newsockFd;\n    return 0;\n}\nint main()\n{\n    int sockFd = 0;\n    initSer(5000, &sockFd);//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大\n    char buf[100] = { 0 };\n    int res = recv(sockFd, buf, sizeof(buf), 0);//接收信息\n    if (res < 0)\n    {\n        printf(\"recv err\\n\");\n        return -1;\n    }\n    printf(\"recv data success [%s]\\n\", buf);\n    closesocket(sockFd);\n    return 0;\n}\n```\n上面的代码虽然能实现通信，但是只能通信一次，就算加了while也只能按照一定的规律来通信，所以我们这里为了实现随发随收，就需要加上多线程\n只需将发送与接收写在两个不同的线程中即可\n下面附上代码\n\n客户端：\n```javascript\n#include <iostream>\n#include<cstdio>\n#include<string.h>\n#include<WINSOCK2.H>\n#pragma comment(lib,\"ws2_32.lib\")\n#define PORT 5000\nusing namespace std;\nHANDLE hMutex = NULL;\n\nDWORD WINAPI Fun1(LPVOID lpparamter)\n{\n\tint newsockFd = *(int*)lpparamter;\n\twhile (1)\n\t{\n\t\tchar buf[100] = { 0 };\n\t\tmemset(buf, '\\0', sizeof(buf));\n\t\tint res = recv(newsockFd, buf, 100, 0);//接收\n\t\tif (res < 0)\n\t\t{\n\t\t\tcout << \"recv fail!\" << endl;\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t\tprintf(\"receive message[%s]\\n\", buf);\n\n\t}\n\treturn 0L;\n}\n\nDWORD WINAPI Fun2(LPVOID lpparamter)\n{\n\tint newsockFd = *(int *)lpparamter;\n\twhile (1)\n\t{\n\n\t\tchar buf[100] = { 0 };\n\t\tgets_s(buf);\n\t\tint res = send(newsockFd, buf, sizeof(buf), 0);//发送\n\t\tif (res < 0)\n\t\t{\n\t\t\tprintf(\"send err\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tprintf(\"send success [%s]\\n\", buf);\n\n\t}\n\treturn 0L;\n}\n\n\n\nint main()\n{\n\tWORD sockVersion = MAKEWORD(2, 2);\n\tWSADATA wsaData;\n\tif (WSAStartup(sockVersion, &wsaData) != 0)\n\t{\n\t\treturn 0;\n\t}\n\tint sockFd = socket(AF_INET, SOCK_STREAM, 0);\n\tif (sockFd < 0)\n\t{\n\t\tprintf(\"socket error\\n\");\n\t\treturn -1;\n\t}\n\telse\n\t    printf(\"create socket success\\n\");\n\n\tstruct sockaddr_in serAddr;\n\tmemset(&serAddr, 0, sizeof(serAddr));\n\tserAddr.sin_family = AF_INET;\n\tserAddr.sin_port = htons(PORT);\n\tserAddr.sin_addr.S_un.S_addr = inet_addr(\"172.16.13.62\");\n\n\tint res = connect(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n\tif (sockFd < 0)\n\t{\n\t\tprintf(\"connect error\\n\");\n\t\treturn -1;\n\t}\n\telse \n\t    printf(\"connect success\\n\");\n\t//创建线程\n\tHANDLE hand1 = CreateThread(NULL, 0, Fun2, &sockFd , 0, NULL);\n\tHANDLE hand2 = CreateThread(NULL, 0, Fun1, &sockFd , 0, NULL);\n\n\tWaitForSingleObject(hand1, INFINITE);\n\n        closesocket(sockFd);\n\treturn 0;\n}\n```\n\n服务器：\n\n```javascript\n#include <iostream>\n#include <WinSock2.h>\nusing namespace std;\n#define PORT 5000\n//使用ws2_32.lib静态库\n#pragma comment(lib,\"ws2_32.lib\")\n\nHANDLE hMutex = NULL;\n\nDWORD WINAPI Fun1(LPVOID lpparamter)\n{\n\tint newsockFd = *(int*)lpparamter;\n\twhile(1)\n\t{\n\t\tchar buf[100] = { 0 };\n\t\tmemset(buf, '\\0', sizeof(buf));\n\t\tint res = recv(newsockFd, buf, 100, 0);//接收\n\t\tif (res < 0)\n\t\t{\n\t\t\tcout << \"recv fail!\" << endl;\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t\tprintf(\"receive message[%s]\\n\", buf);\n\n\t}\n\treturn 0L;\n}\n\nDWORD WINAPI Fun2(LPVOID lpparamter)\n{\n\tint newsockFd = *(int*)lpparamter;\n\twhile(1)\n\t{\n\n\t\tchar buf[100] = { 0 };\n\t\tgets_s(buf);\n\t\tint res = send(newsockFd, buf, sizeof(buf), 0);//发送\n\t\tif (res < 0)\n\t\t{\n\t\t\tprintf(\"send err\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tprintf(\"send success [%s]\\n\", buf);\n\t}\n\treturn 0L;\n}\n\n\n\nint main()\n{\n\t//windows下需要加载的SOCKET库\n\tWORD sockVersion = MAKEWORD(2, 2);\n\tWSADATA wsadata;\n\tif (WSAStartup(sockVersion, &wsadata) != 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tint sockFd = socket(AF_INET, SOCK_STREAM, 0);\n\tif (sockFd < 0)\n\t{\n\t\tcout << \"socket fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"socket success!\" << endl;\n\n\tstruct sockaddr_in serAddr;\n\tmemset(&serAddr, 0, sizeof(serAddr));\n\tserAddr.sin_family = AF_INET;\n\tserAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\n\tserAddr.sin_port = htons(PORT);\n\n\tint rec = bind(sockFd, (struct sockaddr*) & serAddr, sizeof(serAddr));\n\tif (rec < 0)\n\t{\n\t\tcout << \"bind fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"bind success!\" << endl;\n\n\trec = listen(sockFd, 10);\n\tif (rec < 0)\n\t{\n\t\tcout << \"listen fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"listen success!\" << endl;\n\n\tint newsockFd = accept(sockFd, NULL, NULL);\n\tif (sockFd < 0)\n\t{\n\t\tcout << \"accept fail!\" << endl;\n\t\treturn -1;\n\t}\n\telse\n\t\tcout << \"accept success!\" << endl;\n\t//创建线程\n\tHANDLE hand1 = CreateThread(NULL, 0, Fun1, &newsockFd, 0, NULL);\n\tHANDLE hand2 = CreateThread(NULL, 0, Fun2, &newsockFd, 0, NULL);\n\n\tWaitForSingleObject(hand1, INFINITE);\n\tclosesocket(newsockFd);\n\tclosesocket(sockFd);\n\treturn 0;\n}\n```\n至此就实现了实时的发送接收\n然后我们就可以尝试与小车进行通信了\n<!--more-->\n# 3.与小车连接\n我们首先需要与小车建立连接来将服务器端的代码送进去（这里也可以把小车作为客户端，一样可行，有兴趣的话可以自己去尝试）\n这里我们需要下面两个工具来连接小车\nhttps://pan.baidu.com/s/1f7WXga7jDd45v9jeusdQuA  提取码2w7m\n首先打开树莓派，连上WIFI\n然后打开下载好的Putty在hostname框输入自己本机的IP地址\n接着点击OPEN即可\n接着输入自己的登陆用户名及密码\n也可以在下面的 Saved Sessions里面保存自己的IP地址，方便使用\n到这里其实就连上树莓派了\n然后可以用FileZilla来经行数据传输\n在文件->站点管理器一栏输入自己的IP以及用户名密码然后连接即可\n这时就可以对树莓派的内的文件经行操作了\n接下来就可以尝试将服务器文件放到树莓派之中\n需要注意的是小车内部是linux环境\n所以需要做一些修改\n首先把下面这段删掉，因为这是WINDOWS下需要加载的库\n\n```javescript\n        WORD sockVersion = MAKEWORD(2, 2);\n\tWSADATA wsadata;\n```\n还有就是\n```javescript\nserAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\n```\n改成\n```javescript\nserAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n```\n\n然后就是头文件的修改\n直接百度找到对应的替换的头文件即可\n或者直接用这个\n```javescript\n#include<sys/types.h>\n#include<sys/socket.h>\n#include<stdio.h>\n#include<arpa/inet.h>\n#include<string.h>\n#include<unistd.h>\n#include<netinet/in.h>\n#include <wiringPi.h>\n#include <stdio.h>\n#include <termios.h>\n#include <fcntl.h>\n#include <iostream>\n#include <cstring>\n#include <opencv2/opencv.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n#include <opencv2/core/core.hpp>\n#include <pthread.h>\nusing namespace cv;\nusing namespace std;\n```\n至此就可以与小车通信了\n\n# 4.控制小车\n首先需要在小车里配好WiringPi库和OPENCV库，我的小车是提前装好的，具体操作可以自行百度，同时电脑上也需配好OPENCV库以方便调试\n为了方便操作，客户端建议直接用MFC来写\n代码我就直接放网盘了\nhttps://pan.baidu.com/s/1wYwt1_OyDaCdooHXbyMfzw 提取码y5y0\n其中的OPENCV部分是我同学写的，所以我就不详细展开了。。。\n还有在Linux下编译时编译的指令后面还要加上WiringPi来加载WiringPi库\n至此就可以控制小车啦\n这可以说是我第一次对失误经行操作，以前都是干巴巴的写代码，这也让我再一次找到了编程的乐趣，这样的实训多我来说还是收获颇丰\n\n我的个人博客 amazingz6.github.io\n我的bilibili https://space.bilibili.com/66908429\n我的CSDN https://blog.csdn.net/qq_44105654\n我的简书 https://www.jianshu.com/u/607ef08e5825\n我的github https://github.com/AmazingZ6?tab=repositories\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"树莓派小车基本功能的实现","published":1,"updated":"2020-05-04T08:12:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8500127suufgiicsp8","content":"<p>在2019年暑假，大一的我参加了学校组织的为期15天的实训，实训内容就是树莓派小车的基本功能的实现，包括移动，拍照，录像等。<br>下面我将对本次实训经行一个简单的回顾</p>\n<h1><span id=\"1小车的组装\">1.小车的组装</span></h1><p>首先我们需要一下材料<br>树莓派，小车零件，杜邦线，电池盒，L298N电机驱动模块，TF卡/SD卡<br>然后按照电路图将小车的零部件一个一个组装起来即可<br>唯一需要注意的是引脚的对应<br><img src=\"111.jpg\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"111.jpg\" class=\"lozad post-image\"><br>如图所示，程序里的引脚的标号为黄色框里的编号，横向对应红色框里的物理接口</p>\n<p>下图为组装好的小车</p>\n<p><img src=\"3426615-a8a227ec96464665.jpg\" alt=\"xxx\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"3426615-a8a227ec96464665.jpg\" class=\"lozad post-image\"></p>\n<h1><span id=\"2socket编程\">2.SOCKET编程</span></h1><p>那么要如何实现电脑端与小车的通信呢，这时候就需要用到socket编程了，它可以通过IP地址实现两地之间的通信</p>\n<blockquote>\n<p>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合</p>\n</blockquote>\n<p>首先我们要实现最基本的本地通信<br>下面附上最基本的本地通信的代码<br><span id=\"more\"></span><br>客户端：<br><pre class=\"highlight\"><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;WINSOCK2.H&gt;</span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int initser(int port,char*ip,int* psockFd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;socket error\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;create socket success\\n&quot;</span>);</span><br><span class=\"line\">    struct sockaddr_in serAddr;</span><br><span class=\"line\">    memset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">    serAddr.sin_family = AF_INET;</span><br><span class=\"line\">    serAddr.sin_port = htons(port);</span><br><span class=\"line\">    serAddr.sin_addr.S_un.S_addr = inet_addr(ip);</span><br><span class=\"line\">    int res = connect(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;connect error\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;connect success\\n&quot;</span>);</span><br><span class=\"line\">    *psockFd = sockFd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int sockFd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    char ip[<span class=\"number\">100</span>] = &#123; <span class=\"string\">&quot;192.168.101.63&quot;</span> &#125;;<span class=\"comment\">//这里填自己本机所使用的IP地址</span></span><br><span class=\"line\">    initser(<span class=\"number\">5000</span>, ip, &amp;sockFd);<span class=\"comment\">//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大</span></span><br><span class=\"line\">    char buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    gets_s(buf);</span><br><span class=\"line\">    int res = send(sockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//发送信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;send err\\n&quot;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;send data success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\">    closesocket(sockFd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></p>\n<p>服务器：<br><pre class=\"highlight\"><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;WinSock2.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//使用ws2_32.lib静态库</span></span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\">int initSer(int port, int* psockFd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    WSADATA wsadata;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsadata) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;socket fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;socket success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    struct sockaddr_in serAddr;</span><br><span class=\"line\">    memset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">    serAddr.sin_family = AF_INET;</span><br><span class=\"line\">    serAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);<span class=\"comment\">//让操作系统指派IP，即目前使用的IP</span></span><br><span class=\"line\">    serAddr.sin_port = htons(port);</span><br><span class=\"line\">    int res = bind(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;bind fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;bind success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    res = listen(sockFd, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;listen fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;listen success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    int newsockFd = accept(sockFd, NULL, NULL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;accept fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;accept success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    *psockFd = newsockFd;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int sockFd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    initSer(<span class=\"number\">5000</span>, &amp;sockFd);<span class=\"comment\">//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大</span></span><br><span class=\"line\">    char buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    int res = recv(sockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//接收信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;recv err\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;recv data success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\">    closesocket(sockFd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre><br>上面的代码虽然能实现通信，但是只能通信一次，就算加了while也只能按照一定的规律来通信，所以我们这里为了实现随发随收，就需要加上多线程<br>只需将发送与接收写在两个不同的线程中即可<br>下面附上代码</p>\n<p>客户端：<br><pre class=\"highlight\"><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;WINSOCK2.H&gt;</span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\">#define PORT <span class=\"number\">5000</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">HANDLE hMutex = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun1(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int*)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tmemset(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, sizeof(buf));</span><br><span class=\"line\">\t\tint res = recv(newsockFd, buf, <span class=\"number\">100</span>, <span class=\"number\">0</span>);<span class=\"comment\">//接收</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;recv fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;receive message[%s]\\n&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun2(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int *)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tgets_s(buf);</span><br><span class=\"line\">\t\tint res = send(newsockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//发送</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;send err\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;send success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tWORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\tWSADATA wsaData;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tint sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;socket error\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t    printf(<span class=\"string\">&quot;create socket success\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstruct sockaddr_in serAddr;</span><br><span class=\"line\">\tmemset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">\tserAddr.sin_family = AF_INET;</span><br><span class=\"line\">\tserAddr.sin_port = htons(PORT);</span><br><span class=\"line\">\tserAddr.sin_addr.S_un.S_addr = inet_addr(<span class=\"string\">&quot;172.16.13.62&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint res = connect(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;connect error\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t    printf(<span class=\"string\">&quot;connect success\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//创建线程</span></span><br><span class=\"line\">\tHANDLE hand1 = CreateThread(NULL, <span class=\"number\">0</span>, Fun2, &amp;sockFd , <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\">\tHANDLE hand2 = CreateThread(NULL, <span class=\"number\">0</span>, Fun1, &amp;sockFd , <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWaitForSingleObject(hand1, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">        closesocket(sockFd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></p>\n<p>服务器：</p>\n<pre class=\"highlight\"><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;WinSock2.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define PORT <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\">//使用ws2_32.lib静态库</span></span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE hMutex = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun1(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int*)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tmemset(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, sizeof(buf));</span><br><span class=\"line\">\t\tint res = recv(newsockFd, buf, <span class=\"number\">100</span>, <span class=\"number\">0</span>);<span class=\"comment\">//接收</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;recv fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;receive message[%s]\\n&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun2(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int*)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tgets_s(buf);</span><br><span class=\"line\">\t\tint res = send(newsockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//发送</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;send err\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;send success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//windows下需要加载的SOCKET库</span></span><br><span class=\"line\">\tWORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\tWSADATA wsadata;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsadata) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;socket fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;socket success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstruct sockaddr_in serAddr;</span><br><span class=\"line\">\tmemset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">\tserAddr.sin_family = AF_INET;</span><br><span class=\"line\">\tserAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">\tserAddr.sin_port = htons(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint rec = bind(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;bind fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;bind success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\trec = listen(sockFd, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;listen fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;listen success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint newsockFd = accept(sockFd, NULL, NULL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;accept fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;accept success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//创建线程</span></span><br><span class=\"line\">\tHANDLE hand1 = CreateThread(NULL, <span class=\"number\">0</span>, Fun1, &amp;newsockFd, <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\">\tHANDLE hand2 = CreateThread(NULL, <span class=\"number\">0</span>, Fun2, &amp;newsockFd, <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWaitForSingleObject(hand1, INFINITE);</span><br><span class=\"line\">\tclosesocket(newsockFd);</span><br><span class=\"line\">\tclosesocket(sockFd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n<p>至此就实现了实时的发送接收<br>然后我们就可以尝试与小车进行通信了<br><!--more--></p>\n<h1><span id=\"3与小车连接\">3.与小车连接</span></h1><p>我们首先需要与小车建立连接来将服务器端的代码送进去（这里也可以把小车作为客户端，一样可行，有兴趣的话可以自己去尝试）<br>这里我们需要下面两个工具来连接小车<br><a href=\"https://pan.baidu.com/s/1f7WXga7jDd45v9jeusdQuA\">https://pan.baidu.com/s/1f7WXga7jDd45v9jeusdQuA</a>  提取码2w7m<br>首先打开树莓派，连上WIFI<br>然后打开下载好的Putty在hostname框输入自己本机的IP地址<br>接着点击OPEN即可<br>接着输入自己的登陆用户名及密码<br>也可以在下面的 Saved Sessions里面保存自己的IP地址，方便使用<br>到这里其实就连上树莓派了<br>然后可以用FileZilla来经行数据传输<br>在文件-&gt;站点管理器一栏输入自己的IP以及用户名密码然后连接即可<br>这时就可以对树莓派的内的文件经行操作了<br>接下来就可以尝试将服务器文件放到树莓派之中<br>需要注意的是小车内部是linux环境<br>所以需要做一些修改<br>首先把下面这段删掉，因为这是WINDOWS下需要加载的库</p>\n<pre class=\"highlight\"><span class=\"line\">       WORD sockVersion &#x3D; MAKEWORD(2, 2);</span><br><span class=\"line\">WSADATA wsadata;</span><br></pre>\n<p>还有就是<br><pre class=\"highlight\"><span class=\"line\">serAddr.sin_addr.S_un.S_addr &#x3D; htonl(INADDR_ANY);</span><br></pre><br>改成<br><pre class=\"highlight\"><span class=\"line\">serAddr.sin_addr.s_addr &#x3D; htonl(INADDR_ANY);</span><br></pre></p>\n<p>然后就是头文件的修改<br>直接百度找到对应的替换的头文件即可<br>或者直接用这个<br><pre class=\"highlight\"><span class=\"line\">#include&lt;sys&#x2F;types.h&gt;</span><br><span class=\"line\">#include&lt;sys&#x2F;socket.h&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;arpa&#x2F;inet.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;unistd.h&gt;</span><br><span class=\"line\">#include&lt;netinet&#x2F;in.h&gt;</span><br><span class=\"line\">#include &lt;wiringPi.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;termios.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;opencv.hpp&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;highgui&#x2F;highgui.hpp&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;core&#x2F;core.hpp&gt;</span><br><span class=\"line\">#include &lt;pthread.h&gt;</span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\">using namespace std;</span><br></pre><br>至此就可以与小车通信了</p>\n<h1><span id=\"4控制小车\">4.控制小车</span></h1><p>首先需要在小车里配好WiringPi库和OPENCV库，我的小车是提前装好的，具体操作可以自行百度，同时电脑上也需配好OPENCV库以方便调试<br>为了方便操作，客户端建议直接用MFC来写<br>代码我就直接放网盘了<br><a href=\"https://pan.baidu.com/s/1wYwt1_OyDaCdooHXbyMfzw\">https://pan.baidu.com/s/1wYwt1_OyDaCdooHXbyMfzw</a> 提取码y5y0<br>其中的OPENCV部分是我同学写的，所以我就不详细展开了。。。<br>还有在Linux下编译时编译的指令后面还要加上WiringPi来加载WiringPi库<br>至此就可以控制小车啦<br>这可以说是我第一次对失误经行操作，以前都是干巴巴的写代码，这也让我再一次找到了编程的乐趣，这样的实训多我来说还是收获颇丰</p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>\n","site":{"data":{}},"excerpt":"<p>在2019年暑假，大一的我参加了学校组织的为期15天的实训，实训内容就是树莓派小车的基本功能的实现，包括移动，拍照，录像等。<br>下面我将对本次实训经行一个简单的回顾</p>\n<h1 id=\"1-小车的组装\"><a href=\"#1-小车的组装\" class=\"headerlink\" title=\"1.小车的组装\"></a>1.小车的组装</h1><p>首先我们需要一下材料<br>树莓派，小车零件，杜邦线，电池盒，L298N电机驱动模块，TF卡/SD卡<br>然后按照电路图将小车的零部件一个一个组装起来即可<br>唯一需要注意的是引脚的对应<br><img src=\"111.jpg\" alt=\"xxx\"><br>如图所示，程序里的引脚的标号为黄色框里的编号，横向对应红色框里的物理接口</p>\n<p>下图为组装好的小车</p>\n<p><img src=\"3426615-a8a227ec96464665.jpg\" alt=\"xxx\"></p>\n<h1 id=\"2-SOCKET编程\"><a href=\"#2-SOCKET编程\" class=\"headerlink\" title=\"2.SOCKET编程\"></a>2.SOCKET编程</h1><p>那么要如何实现电脑端与小车的通信呢，这时候就需要用到socket编程了，它可以通过IP地址实现两地之间的通信</p>\n<blockquote>\n<p>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合</p>\n</blockquote>\n<p>首先我们要实现最基本的本地通信<br>下面附上最基本的本地通信的代码<br>","more":"<br>客户端：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;WINSOCK2.H&gt;</span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int initser(int port,char*ip,int* psockFd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;socket error\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;create socket success\\n&quot;</span>);</span><br><span class=\"line\">    struct sockaddr_in serAddr;</span><br><span class=\"line\">    memset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">    serAddr.sin_family = AF_INET;</span><br><span class=\"line\">    serAddr.sin_port = htons(port);</span><br><span class=\"line\">    serAddr.sin_addr.S_un.S_addr = inet_addr(ip);</span><br><span class=\"line\">    int res = connect(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;connect error\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;connect success\\n&quot;</span>);</span><br><span class=\"line\">    *psockFd = sockFd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int sockFd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    char ip[<span class=\"number\">100</span>] = &#123; <span class=\"string\">&quot;192.168.101.63&quot;</span> &#125;;<span class=\"comment\">//这里填自己本机所使用的IP地址</span></span><br><span class=\"line\">    initser(<span class=\"number\">5000</span>, ip, &amp;sockFd);<span class=\"comment\">//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大</span></span><br><span class=\"line\">    char buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    gets_s(buf);</span><br><span class=\"line\">    int res = send(sockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//发送信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;send err\\n&quot;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;send data success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\">    closesocket(sockFd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>服务器：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;WinSock2.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//使用ws2_32.lib静态库</span></span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\">int initSer(int port, int* psockFd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    WSADATA wsadata;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsadata) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;socket fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;socket success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    struct sockaddr_in serAddr;</span><br><span class=\"line\">    memset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">    serAddr.sin_family = AF_INET;</span><br><span class=\"line\">    serAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);<span class=\"comment\">//让操作系统指派IP，即目前使用的IP</span></span><br><span class=\"line\">    serAddr.sin_port = htons(port);</span><br><span class=\"line\">    int res = bind(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;bind fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;bind success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    res = listen(sockFd, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;listen fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;listen success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    int newsockFd = accept(sockFd, NULL, NULL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;accept fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;accept success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    *psockFd = newsockFd;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int sockFd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    initSer(<span class=\"number\">5000</span>, &amp;sockFd);<span class=\"comment\">//端口的数字可以自己决定，不过要保证客户端与服务器一致且一般较大</span></span><br><span class=\"line\">    char buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    int res = recv(sockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//接收信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;recv err\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;recv data success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\">    closesocket(sockFd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面的代码虽然能实现通信，但是只能通信一次，就算加了while也只能按照一定的规律来通信，所以我们这里为了实现随发随收，就需要加上多线程<br>只需将发送与接收写在两个不同的线程中即可<br>下面附上代码</p>\n<p>客户端：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;WINSOCK2.H&gt;</span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\">#define PORT <span class=\"number\">5000</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">HANDLE hMutex = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun1(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int*)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tmemset(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, sizeof(buf));</span><br><span class=\"line\">\t\tint res = recv(newsockFd, buf, <span class=\"number\">100</span>, <span class=\"number\">0</span>);<span class=\"comment\">//接收</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;recv fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;receive message[%s]\\n&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun2(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int *)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tgets_s(buf);</span><br><span class=\"line\">\t\tint res = send(newsockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//发送</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;send err\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;send success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tWORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\tWSADATA wsaData;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tint sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;socket error\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t    printf(<span class=\"string\">&quot;create socket success\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstruct sockaddr_in serAddr;</span><br><span class=\"line\">\tmemset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">\tserAddr.sin_family = AF_INET;</span><br><span class=\"line\">\tserAddr.sin_port = htons(PORT);</span><br><span class=\"line\">\tserAddr.sin_addr.S_un.S_addr = inet_addr(<span class=\"string\">&quot;172.16.13.62&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint res = connect(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;connect error\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t    printf(<span class=\"string\">&quot;connect success\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//创建线程</span></span><br><span class=\"line\">\tHANDLE hand1 = CreateThread(NULL, <span class=\"number\">0</span>, Fun2, &amp;sockFd , <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\">\tHANDLE hand2 = CreateThread(NULL, <span class=\"number\">0</span>, Fun1, &amp;sockFd , <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWaitForSingleObject(hand1, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">        closesocket(sockFd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>服务器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;WinSock2.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define PORT <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\">//使用ws2_32.lib静态库</span></span><br><span class=\"line\">#pragma comment(lib,<span class=\"string\">&quot;ws2_32.lib&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE hMutex = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun1(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int*)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tmemset(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, sizeof(buf));</span><br><span class=\"line\">\t\tint res = recv(newsockFd, buf, <span class=\"number\">100</span>, <span class=\"number\">0</span>);<span class=\"comment\">//接收</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;recv fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;receive message[%s]\\n&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI Fun2(LPVOID lpparamter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint newsockFd = *(int*)lpparamter;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tchar buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tgets_s(buf);</span><br><span class=\"line\">\t\tint res = send(newsockFd, buf, sizeof(buf), <span class=\"number\">0</span>);<span class=\"comment\">//发送</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(<span class=\"string\">&quot;send err\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;send success [%s]\\n&quot;</span>, buf);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 0L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//windows下需要加载的SOCKET库</span></span><br><span class=\"line\">\tWORD sockVersion = MAKEWORD(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\tWSADATA wsadata;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WSAStartup(sockVersion, &amp;wsadata) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint sockFd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;socket fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;socket success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstruct sockaddr_in serAddr;</span><br><span class=\"line\">\tmemset(&amp;serAddr, <span class=\"number\">0</span>, sizeof(serAddr));</span><br><span class=\"line\">\tserAddr.sin_family = AF_INET;</span><br><span class=\"line\">\tserAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">\tserAddr.sin_port = htons(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint rec = bind(sockFd, (struct sockaddr*) &amp; serAddr, sizeof(serAddr));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;bind fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;bind success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\trec = listen(sockFd, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;listen fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;listen success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint newsockFd = accept(sockFd, NULL, NULL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sockFd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;accept fail!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;accept success!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//创建线程</span></span><br><span class=\"line\">\tHANDLE hand1 = CreateThread(NULL, <span class=\"number\">0</span>, Fun1, &amp;newsockFd, <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\">\tHANDLE hand2 = CreateThread(NULL, <span class=\"number\">0</span>, Fun2, &amp;newsockFd, <span class=\"number\">0</span>, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWaitForSingleObject(hand1, INFINITE);</span><br><span class=\"line\">\tclosesocket(newsockFd);</span><br><span class=\"line\">\tclosesocket(sockFd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此就实现了实时的发送接收<br>然后我们就可以尝试与小车进行通信了<br><!--more--></p>\n<h1 id=\"3-与小车连接\"><a href=\"#3-与小车连接\" class=\"headerlink\" title=\"3.与小车连接\"></a>3.与小车连接</h1><p>我们首先需要与小车建立连接来将服务器端的代码送进去（这里也可以把小车作为客户端，一样可行，有兴趣的话可以自己去尝试）<br>这里我们需要下面两个工具来连接小车<br><a href=\"https://pan.baidu.com/s/1f7WXga7jDd45v9jeusdQuA\">https://pan.baidu.com/s/1f7WXga7jDd45v9jeusdQuA</a>  提取码2w7m<br>首先打开树莓派，连上WIFI<br>然后打开下载好的Putty在hostname框输入自己本机的IP地址<br>接着点击OPEN即可<br>接着输入自己的登陆用户名及密码<br>也可以在下面的 Saved Sessions里面保存自己的IP地址，方便使用<br>到这里其实就连上树莓派了<br>然后可以用FileZilla来经行数据传输<br>在文件-&gt;站点管理器一栏输入自己的IP以及用户名密码然后连接即可<br>这时就可以对树莓派的内的文件经行操作了<br>接下来就可以尝试将服务器文件放到树莓派之中<br>需要注意的是小车内部是linux环境<br>所以需要做一些修改<br>首先把下面这段删掉，因为这是WINDOWS下需要加载的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       WORD sockVersion &#x3D; MAKEWORD(2, 2);</span><br><span class=\"line\">WSADATA wsadata;</span><br></pre></td></tr></table></figure>\n<p>还有就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serAddr.sin_addr.S_un.S_addr &#x3D; htonl(INADDR_ANY);</span><br></pre></td></tr></table></figure><br>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serAddr.sin_addr.s_addr &#x3D; htonl(INADDR_ANY);</span><br></pre></td></tr></table></figure></p>\n<p>然后就是头文件的修改<br>直接百度找到对应的替换的头文件即可<br>或者直接用这个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;sys&#x2F;types.h&gt;</span><br><span class=\"line\">#include&lt;sys&#x2F;socket.h&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;arpa&#x2F;inet.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;unistd.h&gt;</span><br><span class=\"line\">#include&lt;netinet&#x2F;in.h&gt;</span><br><span class=\"line\">#include &lt;wiringPi.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;termios.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;opencv.hpp&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;highgui&#x2F;highgui.hpp&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&gt;</span><br><span class=\"line\">#include &lt;opencv2&#x2F;core&#x2F;core.hpp&gt;</span><br><span class=\"line\">#include &lt;pthread.h&gt;</span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\">using namespace std;</span><br></pre></td></tr></table></figure><br>至此就可以与小车通信了</p>\n<h1 id=\"4-控制小车\"><a href=\"#4-控制小车\" class=\"headerlink\" title=\"4.控制小车\"></a>4.控制小车</h1><p>首先需要在小车里配好WiringPi库和OPENCV库，我的小车是提前装好的，具体操作可以自行百度，同时电脑上也需配好OPENCV库以方便调试<br>为了方便操作，客户端建议直接用MFC来写<br>代码我就直接放网盘了<br><a href=\"https://pan.baidu.com/s/1wYwt1_OyDaCdooHXbyMfzw\">https://pan.baidu.com/s/1wYwt1_OyDaCdooHXbyMfzw</a> 提取码y5y0<br>其中的OPENCV部分是我同学写的，所以我就不详细展开了。。。<br>还有在Linux下编译时编译的指令后面还要加上WiringPi来加载WiringPi库<br>至此就可以控制小车啦<br>这可以说是我第一次对失误经行操作，以前都是干巴巴的写代码，这也让我再一次找到了编程的乐趣，这样的实训多我来说还是收获颇丰</p>\n<p>我的个人博客 amazingz6.github.io<br>我的bilibili <a href=\"https://space.bilibili.com/66908429\">https://space.bilibili.com/66908429</a><br>我的CSDN <a href=\"https://blog.csdn.net/qq_44105654\">https://blog.csdn.net/qq_44105654</a><br>我的简书 <a href=\"https://www.jianshu.com/u/607ef08e5825\">https://www.jianshu.com/u/607ef08e5825</a><br>我的github <a href=\"https://github.com/AmazingZ6?tab=repositories\">https://github.com/AmazingZ6?tab=repositories</a></p>"},{"title":"格雷编码","date":"2021-06-24T07:49:55.000Z","_content":"\n# 89.格雷编码\n\n**n 位格雷码序列** 是一个由 `2n` 个整数组成的序列，其中：\n\n- 每个整数都在范围 `[0, 2n - 1]` 内（含 `0` 和 `2n - 1`）\n- 第一个整数是 `0`\n- 一个整数在序列中出现 **不超过一次**\n- 每对 **相邻** 整数的二进制表示 **恰好一位不同** ，且\n- **第一个** 和 **最后一个** 整数的二进制表示 **恰好一位不同**\n\n给你一个整数 `n` ，返回任一有效的 **n 位格雷码序列** 。\n\n \n\n**示例 1：**\n\n```\n输入：n = 2\n输出：[0,1,3,2]\n解释：\n[0,1,3,2] 的二进制表示是 [00,01,11,10] 。\n- 00 和 01 有一位不同\n- 01 和 11 有一位不同\n- 11 和 10 有一位不同\n- 10 和 00 有一位不同\n[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。\n- 00 和 10 有一位不同\n- 10 和 11 有一位不同\n- 11 和 01 有一位不同\n- 01 和 00 有一位不同\n```\n\n**示例 2：**\n\n```\n输入：n = 1\n输出：[0,1]\n```\n\n思路：先把前几个写出来看一看\n\nn = 1\n\n0\n\n------\n\n1\n\n\n\nn = 2\n\n00\n\n01\n\n-------\n\n11\n\n10\n\n\n\nn=3\n\n000\n\n001\n\n011\n\n010\n\n------------------------------------\n\n110\n\n111\n\n101\n\n100\n\n\n\n可以看到 n+1就是把n的所有数字最高位变成1，其他的位置镜像翻转过来，根据这个规律我们就可以写出代码\n\nc++代码：\n\n~~~c++\nclass Solution {\npublic:\n    vector<int> grayCode(int n) {\n        vector<int> ans;\n        ans.push_back(0);\n        ans.push_back(1);\n        int x = 2;\n        for(int i = 0; i < n - 1; i++){\n            for(int j = x - 1; j >= 0; j--){\n                ans.push_back(ans[j] + x);\n            }\n            x *= 2;\n        }\n        return ans;\n    }\n};\n~~~\n\n","source":"_posts/格雷编码.md","raw":"---\ntitle: 格雷编码\ndate: 2021-06-24 15:49:55\ntags: LeetCode\n---\n\n# 89.格雷编码\n\n**n 位格雷码序列** 是一个由 `2n` 个整数组成的序列，其中：\n\n- 每个整数都在范围 `[0, 2n - 1]` 内（含 `0` 和 `2n - 1`）\n- 第一个整数是 `0`\n- 一个整数在序列中出现 **不超过一次**\n- 每对 **相邻** 整数的二进制表示 **恰好一位不同** ，且\n- **第一个** 和 **最后一个** 整数的二进制表示 **恰好一位不同**\n\n给你一个整数 `n` ，返回任一有效的 **n 位格雷码序列** 。\n\n \n\n**示例 1：**\n\n```\n输入：n = 2\n输出：[0,1,3,2]\n解释：\n[0,1,3,2] 的二进制表示是 [00,01,11,10] 。\n- 00 和 01 有一位不同\n- 01 和 11 有一位不同\n- 11 和 10 有一位不同\n- 10 和 00 有一位不同\n[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。\n- 00 和 10 有一位不同\n- 10 和 11 有一位不同\n- 11 和 01 有一位不同\n- 01 和 00 有一位不同\n```\n\n**示例 2：**\n\n```\n输入：n = 1\n输出：[0,1]\n```\n\n思路：先把前几个写出来看一看\n\nn = 1\n\n0\n\n------\n\n1\n\n\n\nn = 2\n\n00\n\n01\n\n-------\n\n11\n\n10\n\n\n\nn=3\n\n000\n\n001\n\n011\n\n010\n\n------------------------------------\n\n110\n\n111\n\n101\n\n100\n\n\n\n可以看到 n+1就是把n的所有数字最高位变成1，其他的位置镜像翻转过来，根据这个规律我们就可以写出代码\n\nc++代码：\n\n~~~c++\nclass Solution {\npublic:\n    vector<int> grayCode(int n) {\n        vector<int> ans;\n        ans.push_back(0);\n        ans.push_back(1);\n        int x = 2;\n        for(int i = 0; i < n - 1; i++){\n            for(int j = x - 1; j >= 0; j--){\n                ans.push_back(ans[j] + x);\n            }\n            x *= 2;\n        }\n        return ans;\n    }\n};\n~~~\n\n","slug":"格雷编码","published":1,"updated":"2022-03-26T12:06:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8600147suu2qvt4ygx","content":"<h1><span id=\"89格雷编码\">89.格雷编码</span></h1><p><strong>n 位格雷码序列</strong> 是一个由 <code>2n</code> 个整数组成的序列，其中：</p>\n<ul>\n<li>每个整数都在范围 <code>[0, 2n - 1]</code> 内（含 <code>0</code> 和 <code>2n - 1</code>）</li>\n<li>第一个整数是 <code>0</code></li>\n<li>一个整数在序列中出现 <strong>不超过一次</strong></li>\n<li>每对 <strong>相邻</strong> 整数的二进制表示 <strong>恰好一位不同</strong> ，且</li>\n<li><strong>第一个</strong> 和 <strong>最后一个</strong> 整数的二进制表示 <strong>恰好一位不同</strong></li>\n</ul>\n<p>给你一个整数 <code>n</code> ，返回任一有效的 <strong>n 位格雷码序列</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入：n &#x3D; 2</span><br><span class=\"line\">输出：[0,1,3,2]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">[0,1,3,2] 的二进制表示是 [00,01,11,10] 。</span><br><span class=\"line\">- 00 和 01 有一位不同</span><br><span class=\"line\">- 01 和 11 有一位不同</span><br><span class=\"line\">- 11 和 10 有一位不同</span><br><span class=\"line\">- 10 和 00 有一位不同</span><br><span class=\"line\">[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。</span><br><span class=\"line\">- 00 和 10 有一位不同</span><br><span class=\"line\">- 10 和 11 有一位不同</span><br><span class=\"line\">- 11 和 01 有一位不同</span><br><span class=\"line\">- 01 和 00 有一位不同</span><br></pre>\n<p><strong>示例 2：</strong></p>\n<pre class=\"highlight\"><span class=\"line\">输入：n &#x3D; 1</span><br><span class=\"line\">输出：[0,1]</span><br></pre>\n<p>思路：先把前几个写出来看一看</p>\n<p>n = 1</p>\n<p>0</p>\n<hr>\n<p>1</p>\n<p>n = 2</p>\n<p>00</p>\n<p>01</p>\n<hr>\n<p>11</p>\n<p>10</p>\n<p>n=3</p>\n<p>000</p>\n<p>001</p>\n<p>011</p>\n<p>010</p>\n<hr>\n<p>110</p>\n<p>111</p>\n<p>101</p>\n<p>100</p>\n<p>可以看到 n+1就是把n的所有数字最高位变成1，其他的位置镜像翻转过来，根据这个规律我们就可以写出代码</p>\n<p>c++代码：</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">grayCode</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">        ans.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ans.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = x - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">                ans.push_back(ans[j] + x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            x *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"89-格雷编码\"><a href=\"#89-格雷编码\" class=\"headerlink\" title=\"89.格雷编码\"></a>89.格雷编码</h1><p><strong>n 位格雷码序列</strong> 是一个由 <code>2n</code> 个整数组成的序列，其中：</p>\n<ul>\n<li>每个整数都在范围 <code>[0, 2n - 1]</code> 内（含 <code>0</code> 和 <code>2n - 1</code>）</li>\n<li>第一个整数是 <code>0</code></li>\n<li>一个整数在序列中出现 <strong>不超过一次</strong></li>\n<li>每对 <strong>相邻</strong> 整数的二进制表示 <strong>恰好一位不同</strong> ，且</li>\n<li><strong>第一个</strong> 和 <strong>最后一个</strong> 整数的二进制表示 <strong>恰好一位不同</strong></li>\n</ul>\n<p>给你一个整数 <code>n</code> ，返回任一有效的 <strong>n 位格雷码序列</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n &#x3D; 2</span><br><span class=\"line\">输出：[0,1,3,2]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">[0,1,3,2] 的二进制表示是 [00,01,11,10] 。</span><br><span class=\"line\">- 00 和 01 有一位不同</span><br><span class=\"line\">- 01 和 11 有一位不同</span><br><span class=\"line\">- 11 和 10 有一位不同</span><br><span class=\"line\">- 10 和 00 有一位不同</span><br><span class=\"line\">[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。</span><br><span class=\"line\">- 00 和 10 有一位不同</span><br><span class=\"line\">- 10 和 11 有一位不同</span><br><span class=\"line\">- 11 和 01 有一位不同</span><br><span class=\"line\">- 01 和 00 有一位不同</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n &#x3D; 1</span><br><span class=\"line\">输出：[0,1]</span><br></pre></td></tr></table></figure>\n<p>思路：先把前几个写出来看一看</p>\n<p>n = 1</p>\n<p>0</p>\n<hr>\n<p>1</p>\n<p>n = 2</p>\n<p>00</p>\n<p>01</p>\n<hr>\n<p>11</p>\n<p>10</p>\n<p>n=3</p>\n<p>000</p>\n<p>001</p>\n<p>011</p>\n<p>010</p>\n<hr>\n<p>110</p>\n<p>111</p>\n<p>101</p>\n<p>100</p>\n<p>可以看到 n+1就是把n的所有数字最高位变成1，其他的位置镜像翻转过来，根据这个规律我们就可以写出代码</p>\n<p>c++代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">grayCode</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">        ans.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ans.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = x - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">                ans.push_back(ans[j] + x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            x *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"考研10","date":"2021-10-03T14:11:52.000Z","_content":"\n# 关于考研的第10篇博客\n\n距离考研还有82天，也是十一假期的最后一天，今天父母来来送了点冬天的衣服，然后吃了个饭，在枯燥的学习生活中也算是有了一点快乐，同时压力开始变大了，撑下去，加油！\n\n数学：正在查漏补缺，准备重点看下武忠祥老师的选题机巧课，看完之后开始做模拟卷，做就完了。\n\n专业课：专业课是我比较慌的，准备先吃透真题，搞清楚它要考什么，怎么考，然后再去把知识点系统的整理出来，进行背诵以及复习。\n\n英语：英二真题整体做下来还是比较简单的，所以并不是很担心，但要开始背作文模板了，每天背一点，到考前就有备无患了。\n\n政治：进度虽然有点慢，但正在光速追赶，帽子题快速过一遍，理解题快速查知识点，每天学一点，绰绰有余。\n\n\n\n考研人，加油！\n\n\n\nps:突然对美的定义很感兴趣，想知道什么样才叫美呢，等考完研去找点书看一看。\n\n","source":"_posts/考研10.md","raw":"---\ntitle: 考研10\ndate: 2021-10-03 22:11:52\ntags: 考研\n---\n\n# 关于考研的第10篇博客\n\n距离考研还有82天，也是十一假期的最后一天，今天父母来来送了点冬天的衣服，然后吃了个饭，在枯燥的学习生活中也算是有了一点快乐，同时压力开始变大了，撑下去，加油！\n\n数学：正在查漏补缺，准备重点看下武忠祥老师的选题机巧课，看完之后开始做模拟卷，做就完了。\n\n专业课：专业课是我比较慌的，准备先吃透真题，搞清楚它要考什么，怎么考，然后再去把知识点系统的整理出来，进行背诵以及复习。\n\n英语：英二真题整体做下来还是比较简单的，所以并不是很担心，但要开始背作文模板了，每天背一点，到考前就有备无患了。\n\n政治：进度虽然有点慢，但正在光速追赶，帽子题快速过一遍，理解题快速查知识点，每天学一点，绰绰有余。\n\n\n\n考研人，加油！\n\n\n\nps:突然对美的定义很感兴趣，想知道什么样才叫美呢，等考完研去找点书看一看。\n\n","slug":"考研10","published":1,"updated":"2021-10-03T14:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8700157suud09k87qa","content":"<h1><span id=\"关于考研的第10篇博客\">关于考研的第10篇博客</span></h1><p>距离考研还有82天，也是十一假期的最后一天，今天父母来来送了点冬天的衣服，然后吃了个饭，在枯燥的学习生活中也算是有了一点快乐，同时压力开始变大了，撑下去，加油！</p>\n<p>数学：正在查漏补缺，准备重点看下武忠祥老师的选题机巧课，看完之后开始做模拟卷，做就完了。</p>\n<p>专业课：专业课是我比较慌的，准备先吃透真题，搞清楚它要考什么，怎么考，然后再去把知识点系统的整理出来，进行背诵以及复习。</p>\n<p>英语：英二真题整体做下来还是比较简单的，所以并不是很担心，但要开始背作文模板了，每天背一点，到考前就有备无患了。</p>\n<p>政治：进度虽然有点慢，但正在光速追赶，帽子题快速过一遍，理解题快速查知识点，每天学一点，绰绰有余。</p>\n<p>考研人，加油！</p>\n<p>ps:突然对美的定义很感兴趣，想知道什么样才叫美呢，等考完研去找点书看一看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第10篇博客\"><a href=\"#关于考研的第10篇博客\" class=\"headerlink\" title=\"关于考研的第10篇博客\"></a>关于考研的第10篇博客</h1><p>距离考研还有82天，也是十一假期的最后一天，今天父母来来送了点冬天的衣服，然后吃了个饭，在枯燥的学习生活中也算是有了一点快乐，同时压力开始变大了，撑下去，加油！</p>\n<p>数学：正在查漏补缺，准备重点看下武忠祥老师的选题机巧课，看完之后开始做模拟卷，做就完了。</p>\n<p>专业课：专业课是我比较慌的，准备先吃透真题，搞清楚它要考什么，怎么考，然后再去把知识点系统的整理出来，进行背诵以及复习。</p>\n<p>英语：英二真题整体做下来还是比较简单的，所以并不是很担心，但要开始背作文模板了，每天背一点，到考前就有备无患了。</p>\n<p>政治：进度虽然有点慢，但正在光速追赶，帽子题快速过一遍，理解题快速查知识点，每天学一点，绰绰有余。</p>\n<p>考研人，加油！</p>\n<p>ps:突然对美的定义很感兴趣，想知道什么样才叫美呢，等考完研去找点书看一看。</p>\n"},{"title":"考研5","date":"2021-05-22T13:01:53.000Z","_content":"\n# 记录下这魔幻的一天\n\n上午正常的在图书馆呆着，中午看了眼手机，有人说袁隆平去世了，吓我一跳，但很快就有人出来辟谣，瞬间对造谣的媒体愤怒不已（好像还是央媒），但很快到了一点多的时候，又说袁老爷爷是真的去世了，这次没人辟谣了，因为是事实，随后又在群里看到了一个视频，一辆汽车冲向正在过马路的人群，瞬间撞飞好几人，导致四人死亡，三人受伤，看着让人十分害怕，又看了下群，发现中国肝脏外科之父吴孟超也去世了，我的妈，到了下午约好了房产中介去看房，房子都看了两个了然后说不能短租，麻了，实在是麻了。\n\n# 关于考研\n\n数学：\n\n错题重做（高数）还差三章，预计下周做完，然后看去年的提高阶段视频。\n\n英语：\n\n准备先把精翻停一下，先做几套真题再说，单词照背。\n\n专业课：\n\n几天前过完了数据结构，但计组还没开始，计组内容和王道书差的好像还挺多，说实话有点不知道怎么复习，准备好好的看一下。\n\n政治：\n\n想了一下，但还没开始。。。\n\nps:下星期有一门考试，要好好的准备一下，所以复习进度要慢一点了。\n\n---------------------------------------------------------------------------------------------\n\n5月24日晚写 租房后续\n\n今天上午九点多中介打电话给我朋友，说有人想转租，刚好一个月，但刚好他又上课，只能下课细聊，等到下课发消息过来说还有人也想要，所以要尽快，本来说是晚上或着明天一起去看看的，但怕被抢，于是我就加上了中介的微信，打算独自去看一下，不错的话就直接签了，没想到快走到校门的时候，中介一个微信打过来，告诉我不用去了，房子已经被人租走了，我顿时傻了眼，他说租房的那个人知道之后直接两分钟干到了他们店里去把房租了。。。无奈只能无功而返，只能说租到房的那个人是真的果断，是在下输了，人麻了。这个故事告诉我们一旦决定要做的时候，就要以最快的速度去做，不然就会被别人捷足先登OvO.\n\n\n\n","source":"_posts/考研5.md","raw":"---\ntitle: 考研5\ndate: 2021-05-22 21:01:53\ntags: 考研\n---\n\n# 记录下这魔幻的一天\n\n上午正常的在图书馆呆着，中午看了眼手机，有人说袁隆平去世了，吓我一跳，但很快就有人出来辟谣，瞬间对造谣的媒体愤怒不已（好像还是央媒），但很快到了一点多的时候，又说袁老爷爷是真的去世了，这次没人辟谣了，因为是事实，随后又在群里看到了一个视频，一辆汽车冲向正在过马路的人群，瞬间撞飞好几人，导致四人死亡，三人受伤，看着让人十分害怕，又看了下群，发现中国肝脏外科之父吴孟超也去世了，我的妈，到了下午约好了房产中介去看房，房子都看了两个了然后说不能短租，麻了，实在是麻了。\n\n# 关于考研\n\n数学：\n\n错题重做（高数）还差三章，预计下周做完，然后看去年的提高阶段视频。\n\n英语：\n\n准备先把精翻停一下，先做几套真题再说，单词照背。\n\n专业课：\n\n几天前过完了数据结构，但计组还没开始，计组内容和王道书差的好像还挺多，说实话有点不知道怎么复习，准备好好的看一下。\n\n政治：\n\n想了一下，但还没开始。。。\n\nps:下星期有一门考试，要好好的准备一下，所以复习进度要慢一点了。\n\n---------------------------------------------------------------------------------------------\n\n5月24日晚写 租房后续\n\n今天上午九点多中介打电话给我朋友，说有人想转租，刚好一个月，但刚好他又上课，只能下课细聊，等到下课发消息过来说还有人也想要，所以要尽快，本来说是晚上或着明天一起去看看的，但怕被抢，于是我就加上了中介的微信，打算独自去看一下，不错的话就直接签了，没想到快走到校门的时候，中介一个微信打过来，告诉我不用去了，房子已经被人租走了，我顿时傻了眼，他说租房的那个人知道之后直接两分钟干到了他们店里去把房租了。。。无奈只能无功而返，只能说租到房的那个人是真的果断，是在下输了，人麻了。这个故事告诉我们一旦决定要做的时候，就要以最快的速度去做，不然就会被别人捷足先登OvO.\n\n\n\n","slug":"考研5","published":1,"updated":"2021-05-24T13:54:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8800187suudcd23b4s","content":"<h1><span id=\"记录下这魔幻的一天\">记录下这魔幻的一天</span></h1><p>上午正常的在图书馆呆着，中午看了眼手机，有人说袁隆平去世了，吓我一跳，但很快就有人出来辟谣，瞬间对造谣的媒体愤怒不已（好像还是央媒），但很快到了一点多的时候，又说袁老爷爷是真的去世了，这次没人辟谣了，因为是事实，随后又在群里看到了一个视频，一辆汽车冲向正在过马路的人群，瞬间撞飞好几人，导致四人死亡，三人受伤，看着让人十分害怕，又看了下群，发现中国肝脏外科之父吴孟超也去世了，我的妈，到了下午约好了房产中介去看房，房子都看了两个了然后说不能短租，麻了，实在是麻了。</p>\n<h1><span id=\"关于考研\">关于考研</span></h1><p>数学：</p>\n<p>错题重做（高数）还差三章，预计下周做完，然后看去年的提高阶段视频。</p>\n<p>英语：</p>\n<p>准备先把精翻停一下，先做几套真题再说，单词照背。</p>\n<p>专业课：</p>\n<p>几天前过完了数据结构，但计组还没开始，计组内容和王道书差的好像还挺多，说实话有点不知道怎么复习，准备好好的看一下。</p>\n<p>政治：</p>\n<p>想了一下，但还没开始。。。</p>\n<p>ps:下星期有一门考试，要好好的准备一下，所以复习进度要慢一点了。</p>\n<hr>\n<p>5月24日晚写 租房后续</p>\n<p>今天上午九点多中介打电话给我朋友，说有人想转租，刚好一个月，但刚好他又上课，只能下课细聊，等到下课发消息过来说还有人也想要，所以要尽快，本来说是晚上或着明天一起去看看的，但怕被抢，于是我就加上了中介的微信，打算独自去看一下，不错的话就直接签了，没想到快走到校门的时候，中介一个微信打过来，告诉我不用去了，房子已经被人租走了，我顿时傻了眼，他说租房的那个人知道之后直接两分钟干到了他们店里去把房租了。。。无奈只能无功而返，只能说租到房的那个人是真的果断，是在下输了，人麻了。这个故事告诉我们一旦决定要做的时候，就要以最快的速度去做，不然就会被别人捷足先登OvO.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"记录下这魔幻的一天\"><a href=\"#记录下这魔幻的一天\" class=\"headerlink\" title=\"记录下这魔幻的一天\"></a>记录下这魔幻的一天</h1><p>上午正常的在图书馆呆着，中午看了眼手机，有人说袁隆平去世了，吓我一跳，但很快就有人出来辟谣，瞬间对造谣的媒体愤怒不已（好像还是央媒），但很快到了一点多的时候，又说袁老爷爷是真的去世了，这次没人辟谣了，因为是事实，随后又在群里看到了一个视频，一辆汽车冲向正在过马路的人群，瞬间撞飞好几人，导致四人死亡，三人受伤，看着让人十分害怕，又看了下群，发现中国肝脏外科之父吴孟超也去世了，我的妈，到了下午约好了房产中介去看房，房子都看了两个了然后说不能短租，麻了，实在是麻了。</p>\n<h1 id=\"关于考研\"><a href=\"#关于考研\" class=\"headerlink\" title=\"关于考研\"></a>关于考研</h1><p>数学：</p>\n<p>错题重做（高数）还差三章，预计下周做完，然后看去年的提高阶段视频。</p>\n<p>英语：</p>\n<p>准备先把精翻停一下，先做几套真题再说，单词照背。</p>\n<p>专业课：</p>\n<p>几天前过完了数据结构，但计组还没开始，计组内容和王道书差的好像还挺多，说实话有点不知道怎么复习，准备好好的看一下。</p>\n<p>政治：</p>\n<p>想了一下，但还没开始。。。</p>\n<p>ps:下星期有一门考试，要好好的准备一下，所以复习进度要慢一点了。</p>\n<hr>\n<p>5月24日晚写 租房后续</p>\n<p>今天上午九点多中介打电话给我朋友，说有人想转租，刚好一个月，但刚好他又上课，只能下课细聊，等到下课发消息过来说还有人也想要，所以要尽快，本来说是晚上或着明天一起去看看的，但怕被抢，于是我就加上了中介的微信，打算独自去看一下，不错的话就直接签了，没想到快走到校门的时候，中介一个微信打过来，告诉我不用去了，房子已经被人租走了，我顿时傻了眼，他说租房的那个人知道之后直接两分钟干到了他们店里去把房租了。。。无奈只能无功而返，只能说租到房的那个人是真的果断，是在下输了，人麻了。这个故事告诉我们一旦决定要做的时候，就要以最快的速度去做，不然就会被别人捷足先登OvO.</p>\n"},{"title":"考研6","date":"2021-06-01T13:34:15.000Z","_content":"\n# 关于考研的第六个博客\n\n到了6月1号了，考研的时间过来将近三分之一，所以来写个博客记录一下\n\n数学:\n\n在看高数强化课视频，目前是准备看完了之后买本李正元复习全书做一做，听说还挺好的,争取这个月把强化课看完。\n\n英语：\n\n真题进度巨慢，到现在才做了一套半真题，主要是因为把英语真题时间安排到了晚上，而晚上总有些乱七八糟的事情，还要学专业课，得试着强迫自己去做真题了（说了好多遍了，这次是真的）。\n\n专业课：\n\n在看计组，说实话，看的一脸懵，但还是要看，没办法，慢慢来吧\n\n政治：\n\n下次一定OvO","source":"_posts/考研6.md","raw":"---\ntitle: 考研6\ndate: 2021-06-01 21:34:15\ntags: 考研\n---\n\n# 关于考研的第六个博客\n\n到了6月1号了，考研的时间过来将近三分之一，所以来写个博客记录一下\n\n数学:\n\n在看高数强化课视频，目前是准备看完了之后买本李正元复习全书做一做，听说还挺好的,争取这个月把强化课看完。\n\n英语：\n\n真题进度巨慢，到现在才做了一套半真题，主要是因为把英语真题时间安排到了晚上，而晚上总有些乱七八糟的事情，还要学专业课，得试着强迫自己去做真题了（说了好多遍了，这次是真的）。\n\n专业课：\n\n在看计组，说实话，看的一脸懵，但还是要看，没办法，慢慢来吧\n\n政治：\n\n下次一定OvO","slug":"考研6","published":1,"updated":"2021-06-01T13:42:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn88001a7suu1ctw14kr","content":"<h1><span id=\"关于考研的第六个博客\">关于考研的第六个博客</span></h1><p>到了6月1号了，考研的时间过来将近三分之一，所以来写个博客记录一下</p>\n<p>数学:</p>\n<p>在看高数强化课视频，目前是准备看完了之后买本李正元复习全书做一做，听说还挺好的,争取这个月把强化课看完。</p>\n<p>英语：</p>\n<p>真题进度巨慢，到现在才做了一套半真题，主要是因为把英语真题时间安排到了晚上，而晚上总有些乱七八糟的事情，还要学专业课，得试着强迫自己去做真题了（说了好多遍了，这次是真的）。</p>\n<p>专业课：</p>\n<p>在看计组，说实话，看的一脸懵，但还是要看，没办法，慢慢来吧</p>\n<p>政治：</p>\n<p>下次一定OvO</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第六个博客\"><a href=\"#关于考研的第六个博客\" class=\"headerlink\" title=\"关于考研的第六个博客\"></a>关于考研的第六个博客</h1><p>到了6月1号了，考研的时间过来将近三分之一，所以来写个博客记录一下</p>\n<p>数学:</p>\n<p>在看高数强化课视频，目前是准备看完了之后买本李正元复习全书做一做，听说还挺好的,争取这个月把强化课看完。</p>\n<p>英语：</p>\n<p>真题进度巨慢，到现在才做了一套半真题，主要是因为把英语真题时间安排到了晚上，而晚上总有些乱七八糟的事情，还要学专业课，得试着强迫自己去做真题了（说了好多遍了，这次是真的）。</p>\n<p>专业课：</p>\n<p>在看计组，说实话，看的一脸懵，但还是要看，没办法，慢慢来吧</p>\n<p>政治：</p>\n<p>下次一定OvO</p>\n"},{"title":"考研7","date":"2021-06-10T14:02:58.000Z","_content":"\n# 关于考研的第七篇博客\n\n最近是真的热，关键这图书馆空调效果还这么差，真的是折磨人，去别的学校试了下他们呢图书馆空调，对比真的明显，无奈只能尝试在寝室学习了。\n\n数学：\n\n看完了高数强化课程，看的时候有题目就暂停，尝试做出来，然后再听讲，所以还是做了些题目（但是肯定不够），目前在看线代的强化课程，准备把课都看完了之后开始系统的做题。\n\n英语：\n\n后天就考六级了，说实话没怎么准备，希望不要比上次低，哈哈。对于考研来讲的话，相比之前做真题的速度变快了，目前感觉还可以。\n\n专业课：\n\n停滞了好几天了，主要是专业课时间安排在了晚上，最近晚上又蹦出来一些实验，图书馆又热，所以一拖再拖，正在想办法解决。\n\n政治：\n\n还没开始，下次一定OvO。\n\n希望快点暑假吧，这天气真的不想天天跑图书馆，太折磨了。","source":"_posts/考研7.md","raw":"---\ntitle: 考研7\ndate: 2021-06-10 22:02:58\ntags: 考研\n---\n\n# 关于考研的第七篇博客\n\n最近是真的热，关键这图书馆空调效果还这么差，真的是折磨人，去别的学校试了下他们呢图书馆空调，对比真的明显，无奈只能尝试在寝室学习了。\n\n数学：\n\n看完了高数强化课程，看的时候有题目就暂停，尝试做出来，然后再听讲，所以还是做了些题目（但是肯定不够），目前在看线代的强化课程，准备把课都看完了之后开始系统的做题。\n\n英语：\n\n后天就考六级了，说实话没怎么准备，希望不要比上次低，哈哈。对于考研来讲的话，相比之前做真题的速度变快了，目前感觉还可以。\n\n专业课：\n\n停滞了好几天了，主要是专业课时间安排在了晚上，最近晚上又蹦出来一些实验，图书馆又热，所以一拖再拖，正在想办法解决。\n\n政治：\n\n还没开始，下次一定OvO。\n\n希望快点暑假吧，这天气真的不想天天跑图书馆，太折磨了。","slug":"考研7","published":1,"updated":"2021-07-29T13:14:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8d001c7suu6zmy91k6","content":"<h1><span id=\"关于考研的第七篇博客\">关于考研的第七篇博客</span></h1><p>最近是真的热，关键这图书馆空调效果还这么差，真的是折磨人，去别的学校试了下他们呢图书馆空调，对比真的明显，无奈只能尝试在寝室学习了。</p>\n<p>数学：</p>\n<p>看完了高数强化课程，看的时候有题目就暂停，尝试做出来，然后再听讲，所以还是做了些题目（但是肯定不够），目前在看线代的强化课程，准备把课都看完了之后开始系统的做题。</p>\n<p>英语：</p>\n<p>后天就考六级了，说实话没怎么准备，希望不要比上次低，哈哈。对于考研来讲的话，相比之前做真题的速度变快了，目前感觉还可以。</p>\n<p>专业课：</p>\n<p>停滞了好几天了，主要是专业课时间安排在了晚上，最近晚上又蹦出来一些实验，图书馆又热，所以一拖再拖，正在想办法解决。</p>\n<p>政治：</p>\n<p>还没开始，下次一定OvO。</p>\n<p>希望快点暑假吧，这天气真的不想天天跑图书馆，太折磨了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第七篇博客\"><a href=\"#关于考研的第七篇博客\" class=\"headerlink\" title=\"关于考研的第七篇博客\"></a>关于考研的第七篇博客</h1><p>最近是真的热，关键这图书馆空调效果还这么差，真的是折磨人，去别的学校试了下他们呢图书馆空调，对比真的明显，无奈只能尝试在寝室学习了。</p>\n<p>数学：</p>\n<p>看完了高数强化课程，看的时候有题目就暂停，尝试做出来，然后再听讲，所以还是做了些题目（但是肯定不够），目前在看线代的强化课程，准备把课都看完了之后开始系统的做题。</p>\n<p>英语：</p>\n<p>后天就考六级了，说实话没怎么准备，希望不要比上次低，哈哈。对于考研来讲的话，相比之前做真题的速度变快了，目前感觉还可以。</p>\n<p>专业课：</p>\n<p>停滞了好几天了，主要是专业课时间安排在了晚上，最近晚上又蹦出来一些实验，图书馆又热，所以一拖再拖，正在想办法解决。</p>\n<p>政治：</p>\n<p>还没开始，下次一定OvO。</p>\n<p>希望快点暑假吧，这天气真的不想天天跑图书馆，太折磨了。</p>\n"},{"title":"考研9","date":"2021-09-17T13:03:08.000Z","_content":"\n# 关于考研的第九篇博客\n\n又是时隔一个多月的更新，这个月发生了蛮多事情，记录一下。\n\n第一，华理公共课改了！数一英一变成数二英二（专硕）！虽然很无奈，但是怀着对专硕的热爱，我毅然决然的选择了跟着转，就是可惜了之前买的复习资料，第二就是上大缩招（专硕直接缩到20多人，我一不考的都觉得离谱），上大缩招带来的最直接的影响就是上大难免冲向华理，同时华理还改公共课，就像是在和上大打配合一样，麻了，不过不是很清楚群里为什么没人改冲东华呢，感觉今年东华热度很低（个人观点），还有一些琐碎但影响不大的事情，比如去年科软失败的难免二战集体冲向华理，群里自己说的16人，感觉就是来搞心态的，而且我觉得他们不一定考很高。\n\n# 学习情况总结\n\n​        数学：转战数二虽然对我来说是浪费了大量的时间，但好在数一转数二还是很轻松的，目前在做真题，最明显的感受就是真题有点简单，一方面可能是我还只做到了09年，那时的难度本来就不高，还有就是平时的练习中参杂了很多真题或者和真题类似的题目，所以做的很轻松，去年客观题加到了80分，但我感觉自己的客观题做的还是不快的，需要找个机会加强一下。\n\n​        专业课：专也算是步入正轨了，这个月把计组结束之后开始尝试做真题，然后再把三门知识点过一遍感觉就没有大问题了，相对来说时间还是比较充裕。\n\n​        英语：英语从数一转到英二，对我来说最直接的感受就是无缝衔接，哈哈，我英语真题刚好也只到了12年，直接再从10年开始做英语二真题就可以了，感觉单词这方面还是要加强，同时打算下个月开始背作文。\n\n​        政治：在做1000题，每天做一点，问题应该不大，但是离做完还有一定距离，做完之后二刷一遍就差不多了。\n\n\n\nps:为什么我感觉操场上跑步比跑步机上跑步要累好多好多呢，家里跑完一点感觉没有，操场跑完气喘吁吁，淦。\n\n","source":"_posts/考研9.md","raw":"---\ntitle: 考研9\ndate: 2021-09-17 21:03:08\ntags: 考研\t\n---\n\n# 关于考研的第九篇博客\n\n又是时隔一个多月的更新，这个月发生了蛮多事情，记录一下。\n\n第一，华理公共课改了！数一英一变成数二英二（专硕）！虽然很无奈，但是怀着对专硕的热爱，我毅然决然的选择了跟着转，就是可惜了之前买的复习资料，第二就是上大缩招（专硕直接缩到20多人，我一不考的都觉得离谱），上大缩招带来的最直接的影响就是上大难免冲向华理，同时华理还改公共课，就像是在和上大打配合一样，麻了，不过不是很清楚群里为什么没人改冲东华呢，感觉今年东华热度很低（个人观点），还有一些琐碎但影响不大的事情，比如去年科软失败的难免二战集体冲向华理，群里自己说的16人，感觉就是来搞心态的，而且我觉得他们不一定考很高。\n\n# 学习情况总结\n\n​        数学：转战数二虽然对我来说是浪费了大量的时间，但好在数一转数二还是很轻松的，目前在做真题，最明显的感受就是真题有点简单，一方面可能是我还只做到了09年，那时的难度本来就不高，还有就是平时的练习中参杂了很多真题或者和真题类似的题目，所以做的很轻松，去年客观题加到了80分，但我感觉自己的客观题做的还是不快的，需要找个机会加强一下。\n\n​        专业课：专也算是步入正轨了，这个月把计组结束之后开始尝试做真题，然后再把三门知识点过一遍感觉就没有大问题了，相对来说时间还是比较充裕。\n\n​        英语：英语从数一转到英二，对我来说最直接的感受就是无缝衔接，哈哈，我英语真题刚好也只到了12年，直接再从10年开始做英语二真题就可以了，感觉单词这方面还是要加强，同时打算下个月开始背作文。\n\n​        政治：在做1000题，每天做一点，问题应该不大，但是离做完还有一定距离，做完之后二刷一遍就差不多了。\n\n\n\nps:为什么我感觉操场上跑步比跑步机上跑步要累好多好多呢，家里跑完一点感觉没有，操场跑完气喘吁吁，淦。\n\n","slug":"考研9","published":1,"updated":"2021-09-17T13:55:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8e001e7suu7t0102d3","content":"<h1><span id=\"关于考研的第九篇博客\">关于考研的第九篇博客</span></h1><p>又是时隔一个多月的更新，这个月发生了蛮多事情，记录一下。</p>\n<p>第一，华理公共课改了！数一英一变成数二英二（专硕）！虽然很无奈，但是怀着对专硕的热爱，我毅然决然的选择了跟着转，就是可惜了之前买的复习资料，第二就是上大缩招（专硕直接缩到20多人，我一不考的都觉得离谱），上大缩招带来的最直接的影响就是上大难免冲向华理，同时华理还改公共课，就像是在和上大打配合一样，麻了，不过不是很清楚群里为什么没人改冲东华呢，感觉今年东华热度很低（个人观点），还有一些琐碎但影响不大的事情，比如去年科软失败的难免二战集体冲向华理，群里自己说的16人，感觉就是来搞心态的，而且我觉得他们不一定考很高。</p>\n<h1><span id=\"学习情况总结\">学习情况总结</span></h1><p>​        数学：转战数二虽然对我来说是浪费了大量的时间，但好在数一转数二还是很轻松的，目前在做真题，最明显的感受就是真题有点简单，一方面可能是我还只做到了09年，那时的难度本来就不高，还有就是平时的练习中参杂了很多真题或者和真题类似的题目，所以做的很轻松，去年客观题加到了80分，但我感觉自己的客观题做的还是不快的，需要找个机会加强一下。</p>\n<p>​        专业课：专也算是步入正轨了，这个月把计组结束之后开始尝试做真题，然后再把三门知识点过一遍感觉就没有大问题了，相对来说时间还是比较充裕。</p>\n<p>​        英语：英语从数一转到英二，对我来说最直接的感受就是无缝衔接，哈哈，我英语真题刚好也只到了12年，直接再从10年开始做英语二真题就可以了，感觉单词这方面还是要加强，同时打算下个月开始背作文。</p>\n<p>​        政治：在做1000题，每天做一点，问题应该不大，但是离做完还有一定距离，做完之后二刷一遍就差不多了。</p>\n<p>ps:为什么我感觉操场上跑步比跑步机上跑步要累好多好多呢，家里跑完一点感觉没有，操场跑完气喘吁吁，淦。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第九篇博客\"><a href=\"#关于考研的第九篇博客\" class=\"headerlink\" title=\"关于考研的第九篇博客\"></a>关于考研的第九篇博客</h1><p>又是时隔一个多月的更新，这个月发生了蛮多事情，记录一下。</p>\n<p>第一，华理公共课改了！数一英一变成数二英二（专硕）！虽然很无奈，但是怀着对专硕的热爱，我毅然决然的选择了跟着转，就是可惜了之前买的复习资料，第二就是上大缩招（专硕直接缩到20多人，我一不考的都觉得离谱），上大缩招带来的最直接的影响就是上大难免冲向华理，同时华理还改公共课，就像是在和上大打配合一样，麻了，不过不是很清楚群里为什么没人改冲东华呢，感觉今年东华热度很低（个人观点），还有一些琐碎但影响不大的事情，比如去年科软失败的难免二战集体冲向华理，群里自己说的16人，感觉就是来搞心态的，而且我觉得他们不一定考很高。</p>\n<h1 id=\"学习情况总结\"><a href=\"#学习情况总结\" class=\"headerlink\" title=\"学习情况总结\"></a>学习情况总结</h1><p>​        数学：转战数二虽然对我来说是浪费了大量的时间，但好在数一转数二还是很轻松的，目前在做真题，最明显的感受就是真题有点简单，一方面可能是我还只做到了09年，那时的难度本来就不高，还有就是平时的练习中参杂了很多真题或者和真题类似的题目，所以做的很轻松，去年客观题加到了80分，但我感觉自己的客观题做的还是不快的，需要找个机会加强一下。</p>\n<p>​        专业课：专也算是步入正轨了，这个月把计组结束之后开始尝试做真题，然后再把三门知识点过一遍感觉就没有大问题了，相对来说时间还是比较充裕。</p>\n<p>​        英语：英语从数一转到英二，对我来说最直接的感受就是无缝衔接，哈哈，我英语真题刚好也只到了12年，直接再从10年开始做英语二真题就可以了，感觉单词这方面还是要加强，同时打算下个月开始背作文。</p>\n<p>​        政治：在做1000题，每天做一点，问题应该不大，但是离做完还有一定距离，做完之后二刷一遍就差不多了。</p>\n<p>ps:为什么我感觉操场上跑步比跑步机上跑步要累好多好多呢，家里跑完一点感觉没有，操场跑完气喘吁吁，淦。</p>\n"},{"title":"考研8","date":"2021-07-29T12:57:02.000Z","_content":"\n# 关于考研的第八篇博客\n\n好久没更新了，主要是在家懒得开电脑，今天借着写报告的时间写下博客- -\n\n数学：复习全书高数部分还差三章，进度比我想象的要慢一些，争取10天结束高数。\n\n英语：现在做到了09年的阅读，进度还算可以，准备把最后几年的卷子留下来练手，所以差不多做了一半，单词明天就算过完了一遍，准备之后直接背真题里不会的词，不整个的去背了。\n\n专业课：专业课是我最担心的，主要是进度有点慢，准备之后把数学的世家分点给专业课了，毕竟都是150分，不能偏科啊。\n\n政治：政治已经开始几天了，每天花半个小时左右去看视频和做题，一千题也到手了，感觉不用担心。\n\nps:慢慢来，才更快，考研加油\n\n","source":"_posts/考研8.md","raw":"---\ntitle: 考研8\ndate: 2021-07-29 20:57:02\ntags: 考研\n---\n\n# 关于考研的第八篇博客\n\n好久没更新了，主要是在家懒得开电脑，今天借着写报告的时间写下博客- -\n\n数学：复习全书高数部分还差三章，进度比我想象的要慢一些，争取10天结束高数。\n\n英语：现在做到了09年的阅读，进度还算可以，准备把最后几年的卷子留下来练手，所以差不多做了一半，单词明天就算过完了一遍，准备之后直接背真题里不会的词，不整个的去背了。\n\n专业课：专业课是我最担心的，主要是进度有点慢，准备之后把数学的世家分点给专业课了，毕竟都是150分，不能偏科啊。\n\n政治：政治已经开始几天了，每天花半个小时左右去看视频和做题，一千题也到手了，感觉不用担心。\n\nps:慢慢来，才更快，考研加油\n\n","slug":"考研8","published":1,"updated":"2021-07-29T13:11:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8f001h7suue98o6oxr","content":"<h1><span id=\"关于考研的第八篇博客\">关于考研的第八篇博客</span></h1><p>好久没更新了，主要是在家懒得开电脑，今天借着写报告的时间写下博客- -</p>\n<p>数学：复习全书高数部分还差三章，进度比我想象的要慢一些，争取10天结束高数。</p>\n<p>英语：现在做到了09年的阅读，进度还算可以，准备把最后几年的卷子留下来练手，所以差不多做了一半，单词明天就算过完了一遍，准备之后直接背真题里不会的词，不整个的去背了。</p>\n<p>专业课：专业课是我最担心的，主要是进度有点慢，准备之后把数学的世家分点给专业课了，毕竟都是150分，不能偏科啊。</p>\n<p>政治：政治已经开始几天了，每天花半个小时左右去看视频和做题，一千题也到手了，感觉不用担心。</p>\n<p>ps:慢慢来，才更快，考研加油</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第八篇博客\"><a href=\"#关于考研的第八篇博客\" class=\"headerlink\" title=\"关于考研的第八篇博客\"></a>关于考研的第八篇博客</h1><p>好久没更新了，主要是在家懒得开电脑，今天借着写报告的时间写下博客- -</p>\n<p>数学：复习全书高数部分还差三章，进度比我想象的要慢一些，争取10天结束高数。</p>\n<p>英语：现在做到了09年的阅读，进度还算可以，准备把最后几年的卷子留下来练手，所以差不多做了一半，单词明天就算过完了一遍，准备之后直接背真题里不会的词，不整个的去背了。</p>\n<p>专业课：专业课是我最担心的，主要是进度有点慢，准备之后把数学的世家分点给专业课了，毕竟都是150分，不能偏科啊。</p>\n<p>政治：政治已经开始几天了，每天花半个小时左右去看视频和做题，一千题也到手了，感觉不用担心。</p>\n<p>ps:慢慢来，才更快，考研加油</p>\n"},{"title":"考研001","date":"2021-03-14T11:49:34.000Z","_content":"\n## 关于考研的第一篇博客\n\n目前学习状态还可以(～￣▽￣)～\n\n但从明天开始要上课了，效率肯定会有所下降，目前目标是在四月之前把高数1800基础题做完（现在还在做定积分，所以有点难，但可以争取一下）\n\n英语单词每天在背，不过照现在这个速度得到7月份才能背完，准备下月开始做一下关于英语阅读方面的练习\n\n专业课在慢慢的看课，自己当初学的还可以（感谢我的老师），所以学起来感觉还是很轻松的（除了计组。。。）\n\n至于政治，还没开始，应该还不急，哈哈。睡了睡了\n\n\n\n","source":"_posts/考研之旅001.md","raw":"---\ntitle: 考研001\ndate: 2021-03-14 19:49:34\ntags: 考研\n---\n\n## 关于考研的第一篇博客\n\n目前学习状态还可以(～￣▽￣)～\n\n但从明天开始要上课了，效率肯定会有所下降，目前目标是在四月之前把高数1800基础题做完（现在还在做定积分，所以有点难，但可以争取一下）\n\n英语单词每天在背，不过照现在这个速度得到7月份才能背完，准备下月开始做一下关于英语阅读方面的练习\n\n专业课在慢慢的看课，自己当初学的还可以（感谢我的老师），所以学起来感觉还是很轻松的（除了计组。。。）\n\n至于政治，还没开始，应该还不急，哈哈。睡了睡了\n\n\n\n","slug":"考研之旅001","published":1,"updated":"2021-05-09T02:44:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8g001j7suu2pvhb3p6","content":"<h2><span id=\"关于考研的第一篇博客\">关于考研的第一篇博客</span></h2><p>目前学习状态还可以(～￣▽￣)～</p>\n<p>但从明天开始要上课了，效率肯定会有所下降，目前目标是在四月之前把高数1800基础题做完（现在还在做定积分，所以有点难，但可以争取一下）</p>\n<p>英语单词每天在背，不过照现在这个速度得到7月份才能背完，准备下月开始做一下关于英语阅读方面的练习</p>\n<p>专业课在慢慢的看课，自己当初学的还可以（感谢我的老师），所以学起来感觉还是很轻松的（除了计组。。。）</p>\n<p>至于政治，还没开始，应该还不急，哈哈。睡了睡了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于考研的第一篇博客\"><a href=\"#关于考研的第一篇博客\" class=\"headerlink\" title=\"关于考研的第一篇博客\"></a>关于考研的第一篇博客</h2><p>目前学习状态还可以(～￣▽￣)～</p>\n<p>但从明天开始要上课了，效率肯定会有所下降，目前目标是在四月之前把高数1800基础题做完（现在还在做定积分，所以有点难，但可以争取一下）</p>\n<p>英语单词每天在背，不过照现在这个速度得到7月份才能背完，准备下月开始做一下关于英语阅读方面的练习</p>\n<p>专业课在慢慢的看课，自己当初学的还可以（感谢我的老师），所以学起来感觉还是很轻松的（除了计组。。。）</p>\n<p>至于政治，还没开始，应该还不急，哈哈。睡了睡了</p>\n"},{"title":"考研002","date":"2021-04-04T07:37:21.000Z","_content":"\n# 关于考研的第二篇博客\n\n数学：终于在今天做完了1800高数基础，明天开始线代，刚好书昨天到了，争取这个月把线代基础过完，快点开始概率论\n\n英语：还在背单词，打算在本月做下真题，看下阅读试试手，当然单词也在背（刚买的黄皮书的厚度吓到我了`(*>﹏<*)′）\n\n专业课：好久没看了，得找个时间看，这样下去也不是办法\n\n政治：还没开始😆😆😆","source":"_posts/考研之旅002.md","raw":"---\ntitle: 考研002\ndate: 2021-04-04 15:37:21\ntags: 考研\n---\n\n# 关于考研的第二篇博客\n\n数学：终于在今天做完了1800高数基础，明天开始线代，刚好书昨天到了，争取这个月把线代基础过完，快点开始概率论\n\n英语：还在背单词，打算在本月做下真题，看下阅读试试手，当然单词也在背（刚买的黄皮书的厚度吓到我了`(*>﹏<*)′）\n\n专业课：好久没看了，得找个时间看，这样下去也不是办法\n\n政治：还没开始😆😆😆","slug":"考研之旅002","published":1,"updated":"2021-05-09T02:45:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8h001m7suu2v7bafm7","content":"<h1><span id=\"关于考研的第二篇博客\">关于考研的第二篇博客</span></h1><p>数学：终于在今天做完了1800高数基础，明天开始线代，刚好书昨天到了，争取这个月把线代基础过完，快点开始概率论</p>\n<p>英语：还在背单词，打算在本月做下真题，看下阅读试试手，当然单词也在背（刚买的黄皮书的厚度吓到我了`(<em>&gt;﹏&lt;</em>)′）</p>\n<p>专业课：好久没看了，得找个时间看，这样下去也不是办法</p>\n<p>政治：还没开始😆😆😆</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第二篇博客\"><a href=\"#关于考研的第二篇博客\" class=\"headerlink\" title=\"关于考研的第二篇博客\"></a>关于考研的第二篇博客</h1><p>数学：终于在今天做完了1800高数基础，明天开始线代，刚好书昨天到了，争取这个月把线代基础过完，快点开始概率论</p>\n<p>英语：还在背单词，打算在本月做下真题，看下阅读试试手，当然单词也在背（刚买的黄皮书的厚度吓到我了`(<em>&gt;﹏&lt;</em>)′）</p>\n<p>专业课：好久没看了，得找个时间看，这样下去也不是办法</p>\n<p>政治：还没开始😆😆😆</p>\n"},{"title":"考研003","date":"2021-04-19T14:26:22.000Z","_content":"\n# 关于考研的第三篇博客\n\n数学：\n\n​        刷完了线代，感觉线代内容是相对偏少的，已经开始概率论，但是对应的网课好像还没出，只能拿去年的看看了哈哈。\n\n英语：\n\n​        目前是背单词加做真题，但是真题做的有点慢，一篇阅读要么就是文章里的词很多不认识，要么就是选项里很多不认识，很绝望，所以还是要加紧背单词哈哈。\n\n专业课：\n\n​        目前是慢慢的在把专业课的时间往上加，争取在这个月把数据结构第一遍搞定，毕竟感觉自己还是有点底子，看的还是蛮快的。\n\n政治：\n\n​        依旧没开始哈哈\n\nps:这个博客本来是昨天就该写的，但是昨天去参加了蓝桥杯然后下午加晚上去了楚河汉街看比赛，所以拖到了今天晚上哈哈。（看比赛还是很开心的，现场气氛是真的好，就是单词累积到了今天，导致今天背了好久的单词，人要背傻了，所以以后要尽量避免这种情况，最少要把复习部分的单词看完）\n\n","source":"_posts/考研之旅003.md","raw":"---\ntitle: 考研003\ndate: 2021-04-19 22:26:22\ntags: 考研\n---\n\n# 关于考研的第三篇博客\n\n数学：\n\n​        刷完了线代，感觉线代内容是相对偏少的，已经开始概率论，但是对应的网课好像还没出，只能拿去年的看看了哈哈。\n\n英语：\n\n​        目前是背单词加做真题，但是真题做的有点慢，一篇阅读要么就是文章里的词很多不认识，要么就是选项里很多不认识，很绝望，所以还是要加紧背单词哈哈。\n\n专业课：\n\n​        目前是慢慢的在把专业课的时间往上加，争取在这个月把数据结构第一遍搞定，毕竟感觉自己还是有点底子，看的还是蛮快的。\n\n政治：\n\n​        依旧没开始哈哈\n\nps:这个博客本来是昨天就该写的，但是昨天去参加了蓝桥杯然后下午加晚上去了楚河汉街看比赛，所以拖到了今天晚上哈哈。（看比赛还是很开心的，现场气氛是真的好，就是单词累积到了今天，导致今天背了好久的单词，人要背傻了，所以以后要尽量避免这种情况，最少要把复习部分的单词看完）\n\n","slug":"考研之旅003","published":1,"updated":"2021-05-09T02:44:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8i001o7suu56iiakth","content":"<h1><span id=\"关于考研的第三篇博客\">关于考研的第三篇博客</span></h1><p>数学：</p>\n<p>​        刷完了线代，感觉线代内容是相对偏少的，已经开始概率论，但是对应的网课好像还没出，只能拿去年的看看了哈哈。</p>\n<p>英语：</p>\n<p>​        目前是背单词加做真题，但是真题做的有点慢，一篇阅读要么就是文章里的词很多不认识，要么就是选项里很多不认识，很绝望，所以还是要加紧背单词哈哈。</p>\n<p>专业课：</p>\n<p>​        目前是慢慢的在把专业课的时间往上加，争取在这个月把数据结构第一遍搞定，毕竟感觉自己还是有点底子，看的还是蛮快的。</p>\n<p>政治：</p>\n<p>​        依旧没开始哈哈</p>\n<p>ps:这个博客本来是昨天就该写的，但是昨天去参加了蓝桥杯然后下午加晚上去了楚河汉街看比赛，所以拖到了今天晚上哈哈。（看比赛还是很开心的，现场气氛是真的好，就是单词累积到了今天，导致今天背了好久的单词，人要背傻了，所以以后要尽量避免这种情况，最少要把复习部分的单词看完）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第三篇博客\"><a href=\"#关于考研的第三篇博客\" class=\"headerlink\" title=\"关于考研的第三篇博客\"></a>关于考研的第三篇博客</h1><p>数学：</p>\n<p>​        刷完了线代，感觉线代内容是相对偏少的，已经开始概率论，但是对应的网课好像还没出，只能拿去年的看看了哈哈。</p>\n<p>英语：</p>\n<p>​        目前是背单词加做真题，但是真题做的有点慢，一篇阅读要么就是文章里的词很多不认识，要么就是选项里很多不认识，很绝望，所以还是要加紧背单词哈哈。</p>\n<p>专业课：</p>\n<p>​        目前是慢慢的在把专业课的时间往上加，争取在这个月把数据结构第一遍搞定，毕竟感觉自己还是有点底子，看的还是蛮快的。</p>\n<p>政治：</p>\n<p>​        依旧没开始哈哈</p>\n<p>ps:这个博客本来是昨天就该写的，但是昨天去参加了蓝桥杯然后下午加晚上去了楚河汉街看比赛，所以拖到了今天晚上哈哈。（看比赛还是很开心的，现场气氛是真的好，就是单词累积到了今天，导致今天背了好久的单词，人要背傻了，所以以后要尽量避免这种情况，最少要把复习部分的单词看完）</p>\n"},{"title":"考研004","date":"2021-05-09T02:29:41.000Z","_content":"\n# 关于考研的第四篇博客\n\n天气热了起来，开始折磨了，热的人心也开始烦躁了，希望图书馆早点开空调吧\n\n数学：\n\n​        基础过了一遍，现在要开始复习跟总结一下了（感觉忘得差不多了），主要是把错题重做一遍以及把该记的公式全部记一下，会花多久也不清楚，尽量在五月份搞完吧。\n\n英语：\n\n​        真题还只做了一套，得加快速度了，同时背单词。\n\n专业课：\n\n​        说好的上个月看完数据库，但现在还有两章，感觉会不知不觉的忘掉还要学专业课，看来是需要一个时间表啥的了（这几天看完数据结构）。\n\n政治：\n\n​        没开始。\n\n最近可能会考虑更一些数据结构的技术性文章（自己没忘记的话）。\n\n","source":"_posts/考研之旅004.md","raw":"---\ntitle: 考研004\ndate: 2021-05-09 10:29:41\ntags: 考研\n---\n\n# 关于考研的第四篇博客\n\n天气热了起来，开始折磨了，热的人心也开始烦躁了，希望图书馆早点开空调吧\n\n数学：\n\n​        基础过了一遍，现在要开始复习跟总结一下了（感觉忘得差不多了），主要是把错题重做一遍以及把该记的公式全部记一下，会花多久也不清楚，尽量在五月份搞完吧。\n\n英语：\n\n​        真题还只做了一套，得加快速度了，同时背单词。\n\n专业课：\n\n​        说好的上个月看完数据库，但现在还有两章，感觉会不知不觉的忘掉还要学专业课，看来是需要一个时间表啥的了（这几天看完数据结构）。\n\n政治：\n\n​        没开始。\n\n最近可能会考虑更一些数据结构的技术性文章（自己没忘记的话）。\n\n","slug":"考研之旅004","published":1,"updated":"2021-05-09T02:42:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8j001q7suug62o4e3x","content":"<h1><span id=\"关于考研的第四篇博客\">关于考研的第四篇博客</span></h1><p>天气热了起来，开始折磨了，热的人心也开始烦躁了，希望图书馆早点开空调吧</p>\n<p>数学：</p>\n<p>​        基础过了一遍，现在要开始复习跟总结一下了（感觉忘得差不多了），主要是把错题重做一遍以及把该记的公式全部记一下，会花多久也不清楚，尽量在五月份搞完吧。</p>\n<p>英语：</p>\n<p>​        真题还只做了一套，得加快速度了，同时背单词。</p>\n<p>专业课：</p>\n<p>​        说好的上个月看完数据库，但现在还有两章，感觉会不知不觉的忘掉还要学专业课，看来是需要一个时间表啥的了（这几天看完数据结构）。</p>\n<p>政治：</p>\n<p>​        没开始。</p>\n<p>最近可能会考虑更一些数据结构的技术性文章（自己没忘记的话）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于考研的第四篇博客\"><a href=\"#关于考研的第四篇博客\" class=\"headerlink\" title=\"关于考研的第四篇博客\"></a>关于考研的第四篇博客</h1><p>天气热了起来，开始折磨了，热的人心也开始烦躁了，希望图书馆早点开空调吧</p>\n<p>数学：</p>\n<p>​        基础过了一遍，现在要开始复习跟总结一下了（感觉忘得差不多了），主要是把错题重做一遍以及把该记的公式全部记一下，会花多久也不清楚，尽量在五月份搞完吧。</p>\n<p>英语：</p>\n<p>​        真题还只做了一套，得加快速度了，同时背单词。</p>\n<p>专业课：</p>\n<p>​        说好的上个月看完数据库，但现在还有两章，感觉会不知不觉的忘掉还要学专业课，看来是需要一个时间表啥的了（这几天看完数据结构）。</p>\n<p>政治：</p>\n<p>​        没开始。</p>\n<p>最近可能会考虑更一些数据结构的技术性文章（自己没忘记的话）。</p>\n"},{"title":"考研初始结束","date":"2022-01-04T03:14:30.000Z","_content":"\n# 初始结束\n\n距离考研初始结束已经过去八天，为什么现在才更新呢，因为我玩了8天哈哈。现在来总结一下考研初始吧。\n\n### 政治：\n\n对于从小到大都害怕语文的我来讲，政治就只剩下死记硬背，考前三天只背了一套多一点（花了时间，但就是没背下来），最后两天像是掌握了背书技巧一样，直接给背完了，然而政治大题第一题第一问就直接给我整蒙了，偶然与必然，对于这个我只记得选择题选项中出现的偶然寓于必然，没办法，只能硬扯扯了一大堆。后面的题多多少少都背了点，然后就是抄材料。说实话这是我最没把握的一课，上海还是大旱区，希望能多给我点分吧555。\n\n###  英语：\n\n考英语二的我觉得英语二有点过于简单了，做完了还有一个小时，对的机构答案，选择题就完型错二个，阅读错一个，后面的题我也拿不准，有点后悔作文没有好好准备，希望别扣太多分，这样的话80分应该问题不大。\n\n### 数学：\n\n今年的数学二整体来讲我也觉得特别简单，就是那个证明题是真不会，记错时间，以为十一点交卷，结果在那坐半天也没收卷子，才意识到十一点半交卷，然后在那干坐半个小时，对的机构答案，除了证明题没做，别的全对，就是有个填空题看错了题目，定积分看成了不定积分，结果把空写满了，发现错误后没办法，只能把正确答案写在横线左下方，希望阅卷老师不要扣我分。关于那个证明题，考完才看到网上说这是1800上面的原题，奈何自己1800是上学期做的，已经过去太长时间了，一点印象都没有，看了下答案，发现自己前半部分思路是对的，就是没有接着往下做（以为是错的，因为看到函数的自变量不一样，没有想到用中值定理），有点可惜。\n\n### 专业课：\n\n今年的专业课相对来说也是比较简单的（当然没去年简单），唯一考的偏一点的就是那个c程序变成可执行程序的四个过程，我只写了编译和链接，希望少扣点分，然后34记成了add了，这个之前记得很熟的，奈何考前时间全背政治去了，专业课忘的有点多（麻了），这个故事告诉我们政治一定要提早背，不要像我一样考前再抱佛脚。\n\n### 总结\n\n今天开始要准备复试了，考完之后以为自己会疯玩，但不知为何，有点玩不下去了，感觉游戏也没以前好玩了，现在开始边玩便准备吧，也没有必要太认真，同时也要开始锻炼了，把考研期间累坏的身体给补回来。\n\n\n\n\n\n\n\n","source":"_posts/考研初始结束.md","raw":"---\ntitle: 考研初始结束\ndate: 2022-01-04 11:14:30\ntags: 考研\n---\n\n# 初始结束\n\n距离考研初始结束已经过去八天，为什么现在才更新呢，因为我玩了8天哈哈。现在来总结一下考研初始吧。\n\n### 政治：\n\n对于从小到大都害怕语文的我来讲，政治就只剩下死记硬背，考前三天只背了一套多一点（花了时间，但就是没背下来），最后两天像是掌握了背书技巧一样，直接给背完了，然而政治大题第一题第一问就直接给我整蒙了，偶然与必然，对于这个我只记得选择题选项中出现的偶然寓于必然，没办法，只能硬扯扯了一大堆。后面的题多多少少都背了点，然后就是抄材料。说实话这是我最没把握的一课，上海还是大旱区，希望能多给我点分吧555。\n\n###  英语：\n\n考英语二的我觉得英语二有点过于简单了，做完了还有一个小时，对的机构答案，选择题就完型错二个，阅读错一个，后面的题我也拿不准，有点后悔作文没有好好准备，希望别扣太多分，这样的话80分应该问题不大。\n\n### 数学：\n\n今年的数学二整体来讲我也觉得特别简单，就是那个证明题是真不会，记错时间，以为十一点交卷，结果在那坐半天也没收卷子，才意识到十一点半交卷，然后在那干坐半个小时，对的机构答案，除了证明题没做，别的全对，就是有个填空题看错了题目，定积分看成了不定积分，结果把空写满了，发现错误后没办法，只能把正确答案写在横线左下方，希望阅卷老师不要扣我分。关于那个证明题，考完才看到网上说这是1800上面的原题，奈何自己1800是上学期做的，已经过去太长时间了，一点印象都没有，看了下答案，发现自己前半部分思路是对的，就是没有接着往下做（以为是错的，因为看到函数的自变量不一样，没有想到用中值定理），有点可惜。\n\n### 专业课：\n\n今年的专业课相对来说也是比较简单的（当然没去年简单），唯一考的偏一点的就是那个c程序变成可执行程序的四个过程，我只写了编译和链接，希望少扣点分，然后34记成了add了，这个之前记得很熟的，奈何考前时间全背政治去了，专业课忘的有点多（麻了），这个故事告诉我们政治一定要提早背，不要像我一样考前再抱佛脚。\n\n### 总结\n\n今天开始要准备复试了，考完之后以为自己会疯玩，但不知为何，有点玩不下去了，感觉游戏也没以前好玩了，现在开始边玩便准备吧，也没有必要太认真，同时也要开始锻炼了，把考研期间累坏的身体给补回来。\n\n\n\n\n\n\n\n","slug":"考研初始结束","published":1,"updated":"2022-01-04T03:40:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8n001w7suufglw6dgh","content":"<h1><span id=\"初始结束\">初始结束</span></h1><p>距离考研初始结束已经过去八天，为什么现在才更新呢，因为我玩了8天哈哈。现在来总结一下考研初始吧。</p>\n<h3><span id=\"政治\">政治：</span></h3><p>对于从小到大都害怕语文的我来讲，政治就只剩下死记硬背，考前三天只背了一套多一点（花了时间，但就是没背下来），最后两天像是掌握了背书技巧一样，直接给背完了，然而政治大题第一题第一问就直接给我整蒙了，偶然与必然，对于这个我只记得选择题选项中出现的偶然寓于必然，没办法，只能硬扯扯了一大堆。后面的题多多少少都背了点，然后就是抄材料。说实话这是我最没把握的一课，上海还是大旱区，希望能多给我点分吧555。</p>\n<h3><span id=\"英语\">英语：</span></h3><p>考英语二的我觉得英语二有点过于简单了，做完了还有一个小时，对的机构答案，选择题就完型错二个，阅读错一个，后面的题我也拿不准，有点后悔作文没有好好准备，希望别扣太多分，这样的话80分应该问题不大。</p>\n<h3><span id=\"数学\">数学：</span></h3><p>今年的数学二整体来讲我也觉得特别简单，就是那个证明题是真不会，记错时间，以为十一点交卷，结果在那坐半天也没收卷子，才意识到十一点半交卷，然后在那干坐半个小时，对的机构答案，除了证明题没做，别的全对，就是有个填空题看错了题目，定积分看成了不定积分，结果把空写满了，发现错误后没办法，只能把正确答案写在横线左下方，希望阅卷老师不要扣我分。关于那个证明题，考完才看到网上说这是1800上面的原题，奈何自己1800是上学期做的，已经过去太长时间了，一点印象都没有，看了下答案，发现自己前半部分思路是对的，就是没有接着往下做（以为是错的，因为看到函数的自变量不一样，没有想到用中值定理），有点可惜。</p>\n<h3><span id=\"专业课\">专业课：</span></h3><p>今年的专业课相对来说也是比较简单的（当然没去年简单），唯一考的偏一点的就是那个c程序变成可执行程序的四个过程，我只写了编译和链接，希望少扣点分，然后34记成了add了，这个之前记得很熟的，奈何考前时间全背政治去了，专业课忘的有点多（麻了），这个故事告诉我们政治一定要提早背，不要像我一样考前再抱佛脚。</p>\n<h3><span id=\"总结\">总结</span></h3><p>今天开始要准备复试了，考完之后以为自己会疯玩，但不知为何，有点玩不下去了，感觉游戏也没以前好玩了，现在开始边玩便准备吧，也没有必要太认真，同时也要开始锻炼了，把考研期间累坏的身体给补回来。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初始结束\"><a href=\"#初始结束\" class=\"headerlink\" title=\"初始结束\"></a>初始结束</h1><p>距离考研初始结束已经过去八天，为什么现在才更新呢，因为我玩了8天哈哈。现在来总结一下考研初始吧。</p>\n<h3 id=\"政治：\"><a href=\"#政治：\" class=\"headerlink\" title=\"政治：\"></a>政治：</h3><p>对于从小到大都害怕语文的我来讲，政治就只剩下死记硬背，考前三天只背了一套多一点（花了时间，但就是没背下来），最后两天像是掌握了背书技巧一样，直接给背完了，然而政治大题第一题第一问就直接给我整蒙了，偶然与必然，对于这个我只记得选择题选项中出现的偶然寓于必然，没办法，只能硬扯扯了一大堆。后面的题多多少少都背了点，然后就是抄材料。说实话这是我最没把握的一课，上海还是大旱区，希望能多给我点分吧555。</p>\n<h3 id=\"英语：\"><a href=\"#英语：\" class=\"headerlink\" title=\"英语：\"></a>英语：</h3><p>考英语二的我觉得英语二有点过于简单了，做完了还有一个小时，对的机构答案，选择题就完型错二个，阅读错一个，后面的题我也拿不准，有点后悔作文没有好好准备，希望别扣太多分，这样的话80分应该问题不大。</p>\n<h3 id=\"数学：\"><a href=\"#数学：\" class=\"headerlink\" title=\"数学：\"></a>数学：</h3><p>今年的数学二整体来讲我也觉得特别简单，就是那个证明题是真不会，记错时间，以为十一点交卷，结果在那坐半天也没收卷子，才意识到十一点半交卷，然后在那干坐半个小时，对的机构答案，除了证明题没做，别的全对，就是有个填空题看错了题目，定积分看成了不定积分，结果把空写满了，发现错误后没办法，只能把正确答案写在横线左下方，希望阅卷老师不要扣我分。关于那个证明题，考完才看到网上说这是1800上面的原题，奈何自己1800是上学期做的，已经过去太长时间了，一点印象都没有，看了下答案，发现自己前半部分思路是对的，就是没有接着往下做（以为是错的，因为看到函数的自变量不一样，没有想到用中值定理），有点可惜。</p>\n<h3 id=\"专业课：\"><a href=\"#专业课：\" class=\"headerlink\" title=\"专业课：\"></a>专业课：</h3><p>今年的专业课相对来说也是比较简单的（当然没去年简单），唯一考的偏一点的就是那个c程序变成可执行程序的四个过程，我只写了编译和链接，希望少扣点分，然后34记成了add了，这个之前记得很熟的，奈何考前时间全背政治去了，专业课忘的有点多（麻了），这个故事告诉我们政治一定要提早背，不要像我一样考前再抱佛脚。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天开始要准备复试了，考完之后以为自己会疯玩，但不知为何，有点玩不下去了，感觉游戏也没以前好玩了，现在开始边玩便准备吧，也没有必要太认真，同时也要开始锻炼了，把考研期间累坏的身体给补回来。</p>\n"},{"title":"计算三重积分的四种方法","date":"2019-09-11T09:00:08.000Z","mathjax":true,"_content":"以后可能会经常使用，在这里总结一下\n\n# 先一后二法\n$\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dx\\int ^{y_{2}\\left( x\\right) }_{y_{1}\\left( x\\right) }dy\\int ^{z_{2}\\left( x,y\\right) }_{z_{1}\\left( x,y\\right) }f\\left( x,y,z\\right) dz$\n# 先二后一法\n$\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dz\\iint _{Dz}f\\left( x,y,z\\right) dxdy\\end{aligned}$\n# 利用柱面坐标计算\n$\\begin{cases}x=\\rho \\cos \\theta \\\\ y=\\rho \\sin \\theta \\\\ z=z\\end{cases}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\begin{aligned}\\iiint _{\\Omega }f\\left( \\rho \\cos \\theta ,\\rho \\sin \\theta ,z\\right) \\rho d\\rho d\\theta dz\\end{aligned}$\n# 利用球面坐标计算\n$\\begin{cases}x=r\\sin \\varphi \\cos \\theta \\\\ y=r\\sin \\varphi \\sin \\theta \\\\ z=r\\cos \\varphi \\end{cases}\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\iiint _{\\Omega }f\\left( r\\sin \\varphi \\cos \\theta ,r\\sin \\varphi \\sin \\theta ,r\\cos y\\right) r^{2}\\sin \\varphi drdyd\\theta \\end{aligned}$\n","source":"_posts/计算三重积分的四种方法.md","raw":"---\ntitle: 计算三重积分的四种方法\ndate: 2019-09-11 17:00:08\ntags:\nmathjax: true\n---\n以后可能会经常使用，在这里总结一下\n\n# 先一后二法\n$\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dx\\int ^{y_{2}\\left( x\\right) }_{y_{1}\\left( x\\right) }dy\\int ^{z_{2}\\left( x,y\\right) }_{z_{1}\\left( x,y\\right) }f\\left( x,y,z\\right) dz$\n# 先二后一法\n$\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dz\\iint _{Dz}f\\left( x,y,z\\right) dxdy\\end{aligned}$\n# 利用柱面坐标计算\n$\\begin{cases}x=\\rho \\cos \\theta \\\\ y=\\rho \\sin \\theta \\\\ z=z\\end{cases}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\begin{aligned}\\iiint _{\\Omega }f\\left( \\rho \\cos \\theta ,\\rho \\sin \\theta ,z\\right) \\rho d\\rho d\\theta dz\\end{aligned}$\n# 利用球面坐标计算\n$\\begin{cases}x=r\\sin \\varphi \\cos \\theta \\\\ y=r\\sin \\varphi \\sin \\theta \\\\ z=r\\cos \\varphi \\end{cases}\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\iiint _{\\Omega }f\\left( r\\sin \\varphi \\cos \\theta ,r\\sin \\varphi \\sin \\theta ,r\\cos y\\right) r^{2}\\sin \\varphi drdyd\\theta \\end{aligned}$\n","slug":"计算三重积分的四种方法","published":1,"updated":"2019-09-11T09:12:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8o001x7suufvpt6dng","content":"<p>以后可能会经常使用，在这里总结一下</p>\n<h1><span id=\"先一后二法\">先一后二法</span></h1><p>$\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dx\\int ^{y_{2}\\left( x\\right) }_{y_{1}\\left( x\\right) }dy\\int ^{z_{2}\\left( x,y\\right) }_{z_{1}\\left( x,y\\right) }f\\left( x,y,z\\right) dz$</p>\n<h1><span id=\"先二后一法\">先二后一法</span></h1><p>$\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dz\\iint _{Dz}f\\left( x,y,z\\right) dxdy\\end{aligned}$</p>\n<h1><span id=\"利用柱面坐标计算\">利用柱面坐标计算</span></h1><p>$\\begin{cases}x=\\rho \\cos \\theta \\\\ y=\\rho \\sin \\theta \\\\ z=z\\end{cases}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\begin{aligned}\\iiint _{\\Omega }f\\left( \\rho \\cos \\theta ,\\rho \\sin \\theta ,z\\right) \\rho d\\rho d\\theta dz\\end{aligned}$</p>\n<h1><span id=\"利用球面坐标计算\">利用球面坐标计算</span></h1><p>$\\begin{cases}x=r\\sin \\varphi \\cos \\theta \\\\ y=r\\sin \\varphi \\sin \\theta \\\\ z=r\\cos \\varphi \\end{cases}\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\iiint _{\\Omega }f\\left( r\\sin \\varphi \\cos \\theta ,r\\sin \\varphi \\sin \\theta ,r\\cos y\\right) r^{2}\\sin \\varphi drdyd\\theta \\end{aligned}$</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以后可能会经常使用，在这里总结一下</p>\n<h1 id=\"先一后二法\"><a href=\"#先一后二法\" class=\"headerlink\" title=\"先一后二法\"></a>先一后二法</h1><p>$\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dx\\int ^{y_{2}\\left( x\\right) }_{y_{1}\\left( x\\right) }dy\\int ^{z_{2}\\left( x,y\\right) }_{z_{1}\\left( x,y\\right) }f\\left( x,y,z\\right) dz$</p>\n<h1 id=\"先二后一法\"><a href=\"#先二后一法\" class=\"headerlink\" title=\"先二后一法\"></a>先二后一法</h1><p>$\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\int ^{b}_{a}dz\\iint _{Dz}f\\left( x,y,z\\right) dxdy\\end{aligned}$</p>\n<h1 id=\"利用柱面坐标计算\"><a href=\"#利用柱面坐标计算\" class=\"headerlink\" title=\"利用柱面坐标计算\"></a>利用柱面坐标计算</h1><p>$\\begin{cases}x=\\rho \\cos \\theta \\\\ y=\\rho \\sin \\theta \\\\ z=z\\end{cases}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\begin{aligned}\\iiint _{\\Omega }f\\left( \\rho \\cos \\theta ,\\rho \\sin \\theta ,z\\right) \\rho d\\rho d\\theta dz\\end{aligned}$</p>\n<h1 id=\"利用球面坐标计算\"><a href=\"#利用球面坐标计算\" class=\"headerlink\" title=\"利用球面坐标计算\"></a>利用球面坐标计算</h1><p>$\\begin{cases}x=r\\sin \\varphi \\cos \\theta \\\\ y=r\\sin \\varphi \\sin \\theta \\\\ z=r\\cos \\varphi \\end{cases}\\begin{aligned}\\iiint _{\\Omega }f\\left( x,y,z\\right) dv=\\iiint _{\\Omega }f\\left( r\\sin \\varphi \\cos \\theta ,r\\sin \\varphi \\sin \\theta ,r\\cos y\\right) r^{2}\\sin \\varphi drdyd\\theta \\end{aligned}$</p>\n"},{"title":"颜色分类","date":"2020-04-23T11:50:26.000Z","_content":"\n# 75.颜色分类\n\n题目描述：\n\n给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\n\n我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\n\n必须在不使用库的sort函数的情况下解决这个问题。\n\n \n\n示例 1：\n\n```javascript\n输入：nums = [2,0,2,1,1,0]\n输出：[0,0,1,1,2,2]\n```\n\n\n示例 2：\n\n```java\n输入：nums = [2,0,1]\n输出：[0,1,2]\n```\n\n\n提示：\n\nn == nums.length\n1 <= n <= 300\nnums[i] 为 0、1 或 2\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/sort-colors\n\n思路：这个题较为简单，思路也非常明了，既然只有0，1，2三个数字，那我们直接把0放到数组前面，然后放1，再放2就行，遍历一趟来找到数字0，1出现的次数，然后再给数组赋值即可，时间复杂度o(n);\n\nc++代码：\n\n```c++\nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int len = nums.size();\n        int x = 0, y = 0;\n        for(int i = 0; i < len; i++){\n            if(nums[i] == 0) x++;\n            else if(nums[i] == 1) y++;\n        }\n        int i = 0;\n        len = len - x - y;\n        while(x){\n            nums[i++] = 0;\n            x--;\n        }\n        while(y){\n            nums[i++] = 1;\n            y--;\n        }\n        while(len){\n            nums[i++] = 2;\n            len--;\n        }\n    }\n};\n```\n\n","source":"_posts/颜色分类.md","raw":"---\ntitle: 颜色分类\ndate: 2020-04-23 19:50:26\ntags: LeetCode\n---\n\n# 75.颜色分类\n\n题目描述：\n\n给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\n\n我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\n\n必须在不使用库的sort函数的情况下解决这个问题。\n\n \n\n示例 1：\n\n```javascript\n输入：nums = [2,0,2,1,1,0]\n输出：[0,0,1,1,2,2]\n```\n\n\n示例 2：\n\n```java\n输入：nums = [2,0,1]\n输出：[0,1,2]\n```\n\n\n提示：\n\nn == nums.length\n1 <= n <= 300\nnums[i] 为 0、1 或 2\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/sort-colors\n\n思路：这个题较为简单，思路也非常明了，既然只有0，1，2三个数字，那我们直接把0放到数组前面，然后放1，再放2就行，遍历一趟来找到数字0，1出现的次数，然后再给数组赋值即可，时间复杂度o(n);\n\nc++代码：\n\n```c++\nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int len = nums.size();\n        int x = 0, y = 0;\n        for(int i = 0; i < len; i++){\n            if(nums[i] == 0) x++;\n            else if(nums[i] == 1) y++;\n        }\n        int i = 0;\n        len = len - x - y;\n        while(x){\n            nums[i++] = 0;\n            x--;\n        }\n        while(y){\n            nums[i++] = 1;\n            y--;\n        }\n        while(len){\n            nums[i++] = 2;\n            len--;\n        }\n    }\n};\n```\n\n","slug":"颜色分类","published":1,"updated":"2022-03-26T12:04:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfqktn8p001z7suu4fr43qxc","content":"<h1><span id=\"75颜色分类\">75.颜色分类</span></h1><p>题目描述：</p>\n<p>给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n<p>我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>\n<p>必须在不使用库的sort函数的情况下解决这个问题。</p>\n<p>示例 1：</p>\n<pre class=\"highlight\"><span class=\"line\">输入：nums = [<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br></pre>\n<p>示例 2：</p>\n<pre class=\"highlight\"><span class=\"line\">输入：nums = [<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre>\n<p>提示：</p>\n<p>n == nums.length<br>1 &lt;= n &lt;= 300<br>nums[i] 为 0、1 或 2</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/sort-colors\">https://leetcode-cn.com/problems/sort-colors</a></p>\n<p>思路：这个题较为简单，思路也非常明了，既然只有0，1，2三个数字，那我们直接把0放到数组前面，然后放1，再放2就行，遍历一趟来找到数字0，1出现的次数，然后再给数组赋值即可，时间复杂度o(n);</p>\n<p>c++代码：</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">0</span>) x++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">1</span>) y++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        len = len - x - y;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">            nums[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            x--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(y)&#123;</span><br><span class=\"line\">            nums[i++] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(len)&#123;</span><br><span class=\"line\">            nums[i++] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"75-颜色分类\"><a href=\"#75-颜色分类\" class=\"headerlink\" title=\"75.颜色分类\"></a>75.颜色分类</h1><p>题目描述：</p>\n<p>给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n<p>我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>\n<p>必须在不使用库的sort函数的情况下解决这个问题。</p>\n<p>示例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<p>n == nums.length<br>1 &lt;= n &lt;= 300<br>nums[i] 为 0、1 或 2</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/sort-colors\">https://leetcode-cn.com/problems/sort-colors</a></p>\n<p>思路：这个题较为简单，思路也非常明了，既然只有0，1，2三个数字，那我们直接把0放到数组前面，然后放1，再放2就行，遍历一趟来找到数字0，1出现的次数，然后再给数组赋值即可，时间复杂度o(n);</p>\n<p>c++代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">0</span>) x++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">1</span>) y++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        len = len - x - y;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">            nums[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            x--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(y)&#123;</span><br><span class=\"line\">            nums[i++] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(len)&#123;</span><br><span class=\"line\">            nums[i++] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/1.png","slug":"1.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/2.png","slug":"2.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/3.png","slug":"3.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/4.png","slug":"4.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/5.png","slug":"5.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/6.png","slug":"6.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/7.png","slug":"7.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/8.png","slug":"8.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/Eclipse的安装-HelloWorld的实现以及jdk的下载与环境配置/9.png","slug":"9.png","post":"clfqktn7600007suu6waa6b6t","modified":0,"renderable":0},{"_id":"source/_posts/一元二次多项式的相加/1.PNG","slug":"1.PNG","post":"clfqktn7u000j7suu3k0g8yex","modified":0,"renderable":0},{"_id":"source/_posts/串的模式匹配算法/1.png","slug":"1.png","post":"clfqktn7v000l7suugqcvdsph","modified":0,"renderable":0},{"_id":"source/_posts/串的模式匹配算法/2.png","slug":"2.png","post":"clfqktn7v000l7suugqcvdsph","modified":0,"renderable":0},{"_id":"source/_posts/串的模式匹配算法/3.png","slug":"3.png","post":"clfqktn7v000l7suugqcvdsph","modified":0,"renderable":0},{"_id":"source/_posts/串的模式匹配算法/4.png","slug":"4.png","post":"clfqktn7v000l7suugqcvdsph","modified":0,"renderable":0},{"_id":"source/_posts/串的模式匹配算法/5.png","slug":"5.png","post":"clfqktn7v000l7suugqcvdsph","modified":0,"renderable":0},{"_id":"source/_posts/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/1.PNG","slug":"1.PNG","post":"clfqktn7w000n7suuf7wg6xw4","modified":0,"renderable":0},{"_id":"source/_posts/二叉树的先序创建及遍历（包含层次遍历）和静态链表储存结构/2.png","slug":"2.png","post":"clfqktn7w000n7suuf7wg6xw4","modified":0,"renderable":0},{"_id":"source/_posts/动态查找（查找，插入及删除）/1.PNG","slug":"1.PNG","post":"clfqktn80000t7suug5hk52sk","modified":0,"renderable":0},{"_id":"source/_posts/基本JAVA-WEB项目/1.PNG","slug":"1.PNG","post":"clfqktn81000u7suu8a476qqj","modified":0,"renderable":0},{"_id":"source/_posts/树莓派小车基本功能的实现/111.jpg","slug":"111.jpg","post":"clfqktn8500127suufgiicsp8","modified":0,"renderable":0},{"_id":"source/_posts/树莓派小车基本功能的实现/3426615-a8a227ec96464665.jpg","slug":"3426615-a8a227ec96464665.jpg","post":"clfqktn8500127suufgiicsp8","modified":0,"renderable":0},{"_id":"source/_posts/树莓派小车基本功能的实现/alipay.jpeg","slug":"alipay.jpeg","post":"clfqktn8500127suufgiicsp8","modified":0,"renderable":0},{"_id":"source/_posts/树莓派小车基本功能的实现/L@4)MDNEM8]XG)U~P248D]E.png","slug":"L@4)MDNEM8]XG)U~P248D]E.png","post":"clfqktn8500127suufgiicsp8","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clfqktn7k00077suu9e8d9osv","tag_id":"clfqktn7i00057suu8n403670","_id":"clfqktn7o000a7suuggzdeb0g"},{"post_id":"clfqktn7g00037suue3x7b3ui","tag_id":"clfqktn7i00057suu8n403670","_id":"clfqktn7p000c7suu92jmc1cw"},{"post_id":"clfqktn7h00047suu7tx7cv8i","tag_id":"clfqktn7i00057suu8n403670","_id":"clfqktn7r000f7suu1faj1v6y"},{"post_id":"clfqktn7k00067suu3ews3ee4","tag_id":"clfqktn7q000e7suugiflh0pv","_id":"clfqktn7v000k7suu4nkdei5s"},{"post_id":"clfqktn7l00087suu2esbcdpp","tag_id":"clfqktn7u000i7suu491o9obr","_id":"clfqktn7y000o7suu0lem0x3j"},{"post_id":"clfqktn7r000h7suu24ik8vuz","tag_id":"clfqktn7w000m7suuh6my237e","_id":"clfqktn80000r7suu5e6f7iku"},{"post_id":"clfqktn7y000p7suug3nf9ex3","tag_id":"clfqktn80000s7suu35t9ctfn","_id":"clfqktn83000x7suu9r5p2etd"},{"post_id":"clfqktn7z000q7suu98jq9ou4","tag_id":"clfqktn80000s7suu35t9ctfn","_id":"clfqktn8500117suu8mteb4kf"},{"post_id":"clfqktn84000z7suu82pq4rxa","tag_id":"clfqktn7w000m7suuh6my237e","_id":"clfqktn8600137suu0h2c4tas"},{"post_id":"clfqktn8600147suu2qvt4ygx","tag_id":"clfqktn7i00057suu8n403670","_id":"clfqktn8800177suuefzl7zcj"},{"post_id":"clfqktn83000y7suuftw5daj8","tag_id":"clfqktn8500107suu4c2u9ujq","_id":"clfqktn8800197suuh7hyaa2p"},{"post_id":"clfqktn8500127suufgiicsp8","tag_id":"clfqktn8700167suucl386w34","_id":"clfqktn8d001d7suuhdmebgvv"},{"post_id":"clfqktn8d001c7suu6zmy91k6","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8e001g7suubdeuavek"},{"post_id":"clfqktn8700157suud09k87qa","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8g001i7suubg7eebk8"},{"post_id":"clfqktn8e001e7suu7t0102d3","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8h001l7suu4vsackzz"},{"post_id":"clfqktn8f001h7suue98o6oxr","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8i001n7suu6ap7fuyg"},{"post_id":"clfqktn8800187suudcd23b4s","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8j001p7suu5e13c5r5"},{"post_id":"clfqktn8g001j7suu2pvhb3p6","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8k001r7suu9fqm9nyj"},{"post_id":"clfqktn8h001m7suu2v7bafm7","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8k001s7suu3zcwfmdw"},{"post_id":"clfqktn88001a7suu1ctw14kr","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8k001t7suufwd623jc"},{"post_id":"clfqktn8i001o7suu56iiakth","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8k001u7suu80vu1vkk"},{"post_id":"clfqktn8j001q7suug62o4e3x","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8k001v7suu43oocmjq"},{"post_id":"clfqktn8n001w7suufglw6dgh","tag_id":"clfqktn89001b7suugd98bi8u","_id":"clfqktn8p001y7suuckxz25px"},{"post_id":"clfqktn8p001z7suu4fr43qxc","tag_id":"clfqktn7i00057suu8n403670","_id":"clfqktn8p00207suubs70fr5m"}],"Tag":[{"name":"LeetCode","_id":"clfqktn7i00057suu8n403670"},{"name":"JAVA基础知识","_id":"clfqktn7q000e7suugiflh0pv"},{"name":"算法","_id":"clfqktn7u000i7suu491o9obr"},{"name":"数据结构","_id":"clfqktn7w000m7suuh6my237e"},{"name":"随笔","_id":"clfqktn80000s7suu35t9ctfn"},{"name":"差分隐私","_id":"clfqktn8500107suu4c2u9ujq"},{"name":"树莓派","_id":"clfqktn8700167suucl386w34"},{"name":"考研","_id":"clfqktn89001b7suugd98bi8u"}]}}